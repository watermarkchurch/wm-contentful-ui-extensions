#!/bin/bash

COLOR_NC='\033[0m' # No Color
COLOR_GRAY='\033[1;30m'
COLOR_RED='\033[0;31m'
COLOR_LCYAN='\033[1;36m'
COLOR_YELLOW='\033[1;33m'
COLOR_LGREEN='\033[1;32m'

logv() {
  [[ -z "$VERBOSE" ]] && return 0;

  local msg=$(echo "$@")
  if [[ ! -z "$CONTENTFUL_MANAGEMENT_TOKEN" ]]; then
    msg=$(echo "$msg" | sed "s/$CONTENTFUL_MANAGEMENT_TOKEN/\*\*\*\*\*/")
  fi
  >&2 echo -e "${COLOR_GRAY}$msg${COLOR_NC}" || true
}

logerr() {
  >&2 echo -e "${COLOR_RED}$@${COLOR_NC}"
}

panic() {
  >&2 echo -e "${COLOR_RED}$@${COLOR_NC}";
  exit 1
}

curlv() {
  logv "curl" $@
  curl "$@"
}

execv() {
  logv "$@"
  "$@"
}

## *** Argument Parsing & validation ***

usage() {
  echo "$0 <command> [opts]
  Commands:
    new
      Templates a new editor extension in the src folder

    install
      Installs an extension in the space pointing to the Github Pages hosting
      for the selected version.

    delete
      Deletes an extension by ID from the space.

    dev
      Enables development of an extension by creating an extension in the space
      that points to 'localhost:8080'.  The webpack-dev-server can then be started
      with 'npm run serve' to begin hacking.

  Flags:" && \
    grep " .)\ #" $0
  echo "
  Examples:" && \
    grep -i "#\ example:" $0 | awk '{$1=""; $2=""; print "  "$0}'
}

parse_args() {
  OPTIND=1
  local s=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  case "$s" in
    install|delete|dev|new|help|h|\?)
      export subcommand=$s
      OPTIND=2
      ;;
  esac

  # Parse flags
  while getopts ":hyvs:e:a:o:" arg; do
    case $arg in
      y) # Yes - skip prompts
        export YES="-y"
        ;;
      s) # Contentful Space ID - overrides env var CONTENTFUL_SPACE_ID
        export CONTENTFUL_SPACE_ID=$OPTARG
        ;;
      a) # Contentful Mgmt Token - overrides env var CONTENTFUL_MANAGEMENT_TOKEN
        export CONTENTFUL_MANAGEMENT_TOKEN=$OPTARG
        ;;
      e) # Contentful environment ID - overrides env var CONTENTFUL_ENVIRONMENT
        export CONTENTFUL_ENVIRONMENT=$OPTARG
        ;;
      o) # Output directory
        export OUTDIR=$OPTARG
        ;;
      v) # Verbose mode - extra output
        export VERBOSE=true
        ;;
      h) # Display help.
        usage
        exit 0
        ;;
      *)
        logerr "Unknown option: '$OPTARG'"
        usage
        exit -1
        ;;
    esac
  done

  export OPTIND
}

parse_args $@ && shift $(($OPTIND - 1))
  # If they put args before the command like 'bin/contentful -s 1xab migrate -y', try parsing again
[[ -z "$subcommand" ]] && parse_args $@ && shift $(($OPTIND - 1))

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
require_environment() {

  CONTENTFUL_CLI='contentful'
  command -v contentful >/dev/null 2>&1 || CONTENTFUL_CLI=''

  if [[ -z "$CONTENTFUL_CLI" ]]; then
    if [[ ! -f node_modules/.bin/contentful ]]; then
      command -v npm >/dev/null 2>&1 || (logerr "I require 'npm' but it's not installed.  Please install nodejs."; exit -1)
      execv npm install
      [[ -f node_modules/.bin/contentful ]] || (logerr "Failed installing node modules - please ensure contentful CLI is installed"; exit -1)
    fi
    CONTENTFUL_CLI=`pwd`'/node_modules/.bin/contentful'
  fi

  if [[ -z "$CONTENTFUL_MANAGEMENT_TOKEN" ]]; then
    if [[ ! -f ~/.contentfulrc.json || -z "$(cat ~/.contentfulrc.json | grep cmaToken)" ]]; then
      $CONTENTFUL_CLI login
    fi
    CONTENTFUL_MANAGEMENT_TOKEN="$(cat ~/.contentfulrc.json | jq -r '.cmaToken')"
  fi

  if [[ -z "$CONTENTFUL_SPACE_ID" ]]; then
    if [[ ! -f ~/.contentfulrc.json || -z "$(cat ~/.contentfulrc.json | grep activeSpaceId)" ]]; then
      $CONTENTFUL_CLI space use
    fi
    CONTENTFUL_SPACE_ID="$(cat ~/.contentfulrc.json | jq -r '.activeSpaceId')"
  fi
}

## *** Utility functions ***

confirm() {
  [[ -z "$2" ]] && [[ ! -z "$YES" ]] && logv "$1 (y/n): confirmed by -y flag" && return 0;

  while true; do
    if [[ -z "$2" ]]; then
      read -p $'\033[1;36m'"$1"' (y/n): '$'\033[0m' yn
    else
      # double confirm - extra dangerous.
      read -p $'\033[0;31m'"$1"' (y/n): '$'\033[0m' yn
    fi
    case $yn in
        [Yy]* ) return 0;;
        [Nn]* ) return 1;;
        * ) echo "Please answer yes or no.";;
    esac
  done
}

get_space_name() {
  curlv -H "Authorization: Bearer $CONTENTFUL_MANAGEMENT_TOKEN" -s https://api.contentful.com/spaces/$1 | jq -r .name | tr '[:upper:]' '[:lower:]'
}

# Man I wish I understood sed... https://stackoverflow.com/a/29060802
# $1 File
# $2 Find
# $3 Replace / Append
replace_append() {
  if grep -q "^$2" "$1"
  then
      sed -i.bak "s/^$2.*$/$3/" "$1"
  else
      echo "\n$3" >> "$1"
  fi
}

latest_version() {
  cat package.json | grep "version" | grep -Eo '\d.\d'
}

all_versions() {
  echo "latest"
  version=$(cat package.json | jq -r '.version')
  echo "$version" | grep -Eo '^\d'
  echo "$version" | grep -Eo '^\d.\d'
  echo "$version" | grep -Eo '^\d.\d.\d'
}

select_package() {
  local packages=($(for D in src/*/extension.json; do echo $(basename $(dirname $D)); done))
  logv "packages: ${packages[@]}"
  PS3="Select which extension to install in space ${CONTENTFUL_SPACE_ID}: "
  select package in "${packages[@]}"
  do
    if [[ ! -z "$package" ]]; then
      echo "$package"
      break;
    fi
  done
}

select_version() {
  local versions=($(all_versions))
  logv "versions: ${versions}"
  PS3="Select which version to use: "
  select version in "${versions[@]}"
  do
    if [[ ! -z "$version" ]]; then
      echo "$version"
      break;
    fi
  done
}

FIELD_TYPES=(Symbol Text Integer Number Date Boolean Object Location Array Link)
select_field_type() {
  PS3="Select field type: "
  select type in "${FIELD_TYPES[@]}"
  do
    if [[ ! -z "$type" ]]; then
      echo "$type"
      break;
    fi
  done
}

select_extension() {
  [[ ! -z "$CONTENTFUL_ENVIRONMENT" ]] && path="/environments/$CONTENTFUL_ENVIRONMENT"

  local extensions=$(curlv -H "Authorization: Bearer ${CONTENTFUL_MANAGEMENT_TOKEN}" -s https://api.contentful.com/spaces/${CONTENTFUL_SPACE_ID}${path}/extensions)
  logv "extensions: ${extensions}"
  local error=$(echo "$extensions" | jq -r '.message')
  [[ ! -z "$error" && "$error" != "null" ]] && logerr "Error locating extensions: ${error}" && exit -1;

  extensions=($(echo "$extensions" | jq -r '.items[].sys.id'))
  PS3="Select which extension: "
  select extension in "${extensions[@]}"
  do
    if [[ ! -z "$extension" ]]; then
      echo "$extension"
      break;
    fi
  done
}

set -e

# *** Commands ***

# Example: bin/contentful install -s 1xab -e gburgett slug-editor
install() {

  require_environment
  space_name=$(get_space_name $CONTENTFUL_SPACE_ID)

  if [[ ! -z "$CONTENTFUL_ENVIRONMENT" ]]; then
    space_name="$space_name/$CONTENTFUL_ENVIRONMENT"
    ENV="--environment-id $CONTENTFUL_ENVIRONMENT"
  fi

  local extension="$1"
  [[ -z "$extension" ]] && extension=$(select_package)
  
  local extension_name=$(echo "$extension" | awk -F@ '{ print $1 }')
  local extension_version=$(echo "$extension" | awk -F@ '{ print $2 }')
  [[ -z "$extension_version" ]] && extension_version=$(select_version)
  extension="$extension_name@$extension_version"

  echo -e "${COLOR_LCYAN}This will install the extension ${COLOR_YELLOW}${extension_name} v${extension_version}${COLOR_LCYAN} in $space_name${COLOR_NC}"
  confirm "Continue?" || exit -1
  export YES='-y' # don't keep bugging the user

  pushd src/$extension_name
  $CONTENTFUL_CLI extension create --space-id "$CONTENTFUL_SPACE_ID" $ENV --id "${extension_name}" \
    --management-token "$CONTENTFUL_MANAGEMENT_TOKEN" \
    --src "https://watermarkchurch.github.io/wm-contentful-ui-extensions/${extension_version}/${extension_name}.html"
  popd
}

# Example: bin/contentful delete slug-editor
delete() {
  require_environment
  space_name=$(get_space_name $CONTENTFUL_SPACE_ID)

  if [[ ! -z "$CONTENTFUL_ENVIRONMENT" ]]; then
    space_name="$space_name/$CONTENTFUL_ENVIRONMENT"
    ENV="--environment-id $CONTENTFUL_ENVIRONMENT"
  fi

  local extension="$1"
  [[ -z "$extension" ]] && extension=$(select_extension)
  [[ -z "$extension" ]] && logerr "Unable to find any extension to delete.  Try rerunning with -v." && exit -1;
  
  local extension_name=$(echo "$extension" | awk -F@ '{ print $1 }')

  echo -e "${COLOR_LCYAN}This will delete the extension ${COLOR_YELLOW}$extension_name${COLOR_LCYAN} in $space_name${COLOR_NC}"
  confirm "Continue?" || exit -1

  $CONTENTFUL_CLI extension delete --space-id "$CONTENTFUL_SPACE_ID" $ENV --id "${extension_name}" --force
}

# Example: bin/contentful dev -s 1xab -e gburgett
dev() {
  require_environment
  space_name=$(get_space_name $CONTENTFUL_SPACE_ID)

  if [[ ! -z "$CONTENTFUL_ENVIRONMENT" ]]; then
    space_name="$space_name/$CONTENTFUL_ENVIRONMENT"
    ENV="--environment-id $CONTENTFUL_ENVIRONMENT"
  fi

  local extension="$1"
  [[ -z "$extension" ]] && extension=$(select_package)
  
  local extension_name="$(echo "$extension" | awk -F@ '{ print $1 }')"

  echo -e "${COLOR_LCYAN}This will enable dev server on localhost:8080 for the extension ${COLOR_YELLOW}$extension_name-$USER-dev${COLOR_LCYAN} in $space_name${COLOR_NC}"
  confirm "Continue?" || exit -1

  pushd src/$extension_name
  $CONTENTFUL_CLI extension update --force --space-id "$CONTENTFUL_SPACE_ID" $ENV --id "${extension_name}-$USER-dev" --name "${extension_name}-$USER-dev"  \
    --management-token "$CONTENTFUL_MANAGEMENT_TOKEN" \
    --src "https://localhost:8080/dist/${extension_name}.html"
  popd
}


new() {
  export name="$1"
  [[ ! -z "$name" ]] || read -rp "name: " name
  [[ ! -z "$name" ]] || panic "Must provide name"
  shift || true
  export symbol="$1"
  [[ ! -z "$symbol" ]] || symbol=$(select_field_type)
  [[ ! -z "$symbol" ]] || panic "Must provide symbol"
  shift || true

  export desc="$@"
  [[ ! -z "$desc" ]] || read -rp "description: " desc

  export name_dasherized=$(node -e "console.log(require('inflection').dasherize('$name'.toLowerCase()))")
  [[ ! -z "$name_dasherized" ]] || panic "failed to dasherize name"
  export name_titleized=$(node -e "console.log(require('inflection').titleize('$name_dasherized').replace('-', ''))")
  [[ ! -z "$name_titleized" ]] || panic "failed to titleize name"

  mkdir -p "src/${name_dasherized}"
  for file in template/*; do
  logv "templating ${file} to src/${name_dasherized}/$(basename $file)"
    eval "cat <<EOF
$(<$file)
EOF" > "src/${name_dasherized}/$(basename $file)" 2> /dev/null
  done

}

case $subcommand in 
  install)
    install "$@"
    ;;
  delete)
    delete "$@"
    ;;
  dev)
    dev "$@"
    ;;
  new)
    new "$@"
    ;;
  help|h|\?)
    usage
    ;;
  *)
    logerr "Unknown command: '$1'"
    usage
    exit -1
    ;;
esac