!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="../",n(n.s=318)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,n(65))},function(t,e,n){var r=n(0),o=n(32),i=n(6),u=n(44),c=n(47),a=n(72),f=o("wks"),s=r.Symbol,l=a?s:s&&s.withoutSetter||u;t.exports=function(t){return i(f,t)&&(c||"string"==typeof f[t])||(c&&i(s,t)?f[t]=s[t]:f[t]=l("Symbol."+t)),f[t]}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(0),o=n(15).f,i=n(9),u=n(13),c=n(41),a=n(67),f=n(71);t.exports=function(t,e){var n,s,l,p,h,v=t.target,d=t.global,y=t.stat;if(n=d?r:y?r[v]||c(v,{}):(r[v]||{}).prototype)for(s in e){if(p=e[s],l=t.noTargetGet?(h=o(n,s))&&h.value:n[s],!f(d?s:v+(y?".":"#")+s,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(n,s,p,t)}}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(8),o=n(66),i=n(4),u=n(25),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(i(t),e=u(e,!0),i(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(2);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(8),o=n(7),i=n(21);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(35),o=n(17);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(28),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(17);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(0),o=n(9),i=n(6),u=n(41),c=n(42),a=n(22),f=a.get,s=a.enforce,l=String(String).split("String");(t.exports=function(t,e,n,c){var a,f=!!c&&!!c.unsafe,p=!!c&&!!c.enumerable,h=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),(a=s(n)).source||(a.source=l.join("string"==typeof e?e:""))),t!==r?(f?!h&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:u(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||c(this)}))},function(t,e,n){var r=n(68),o=n(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(8),o=n(56),i=n(21),u=n(10),c=n(25),a=n(6),f=n(66),s=Object.getOwnPropertyDescriptor;e.f=r?s:function(t,e){if(t=u(t),e=c(e,!0),f)try{return s(t,e)}catch(t){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e){t.exports=!1},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){"use strict";n.r(e),n.d(e,"render",(function(){return F})),n.d(e,"hydrate",(function(){return D})),n.d(e,"createElement",(function(){return v})),n.d(e,"h",(function(){return v})),n.d(e,"Fragment",(function(){return _})),n.d(e,"createRef",(function(){return y})),n.d(e,"isValidElement",(function(){return o})),n.d(e,"Component",(function(){return m})),n.d(e,"cloneElement",(function(){return G})),n.d(e,"createContext",(function(){return U})),n.d(e,"toChildArray",(function(){return k})),n.d(e,"options",(function(){return r}));var r,o,i,u,c,a,f={},s=[],l=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function p(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function v(t,e,n){var r,o,i,u=arguments,c={};for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:c[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(u[i]);if(null!=n&&(c.children=n),"function"==typeof t&&null!=t.defaultProps)for(i in t.defaultProps)void 0===c[i]&&(c[i]=t.defaultProps[i]);return d(t,c,r,o,null)}function d(t,e,n,o,i){var u={type:t,props:e,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++r.__v:i};return null!=r.vnode&&r.vnode(u),u}function y(){return{current:null}}function _(t){return t.children}function m(t,e){this.props=t,this.context=e}function g(t,e){if(null==e)return t.__?g(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?g(t):null}function b(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return b(t)}}function w(t){(!t.__d&&(t.__d=!0)&&i.push(t)&&!x.__r++||c!==r.debounceRendering)&&((c=r.debounceRendering)||u)(x)}function x(){for(var t;x.__r=i.length;)t=i.sort((function(t,e){return t.__v.__b-e.__v.__b})),i=[],t.some((function(t){var e,n,r,o,i,u;t.__d&&(i=(o=(e=t).__v).__e,(u=e.__P)&&(n=[],(r=p({},o)).__v=o.__v+1,C(u,o,r,e.__n,void 0!==u.ownerSVGElement,null!=o.__h?[i]:null,n,null==i?g(o):i,o.__h),L(n,o),o.__e!=i&&b(o)))}))}function S(t,e,n,r,o,i,u,c,a,l){var p,h,v,y,m,b,w,x=r&&r.__k||s,S=x.length;for(n.__k=[],p=0;p<e.length;p++)if(null!=(y=n.__k[p]=null==(y=e[p])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?d(null,y,null,null,y):Array.isArray(y)?d(_,{children:y},null,null,null):y.__b>0?d(y.type,y.props,y.key,null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(v=x[p])||v&&y.key==v.key&&y.type===v.type)x[p]=void 0;else for(h=0;h<S;h++){if((v=x[h])&&y.key==v.key&&y.type===v.type){x[h]=void 0;break}v=null}C(t,y,v=v||f,o,i,u,c,a,l),m=y.__e,(h=y.ref)&&v.ref!=h&&(w||(w=[]),v.ref&&w.push(v.ref,null,y),w.push(h,y.__c||m,y)),null!=m?(null==b&&(b=m),"function"==typeof y.type&&null!=y.__k&&y.__k===v.__k?y.__d=a=O(y,a,t):a=j(t,y,v,x,m,a),l||"option"!==n.type?"function"==typeof n.type&&(n.__d=a):t.value=""):a&&v.__e==a&&a.parentNode!=t&&(a=g(v))}for(n.__e=b,p=S;p--;)null!=x[p]&&("function"==typeof n.type&&null!=x[p].__e&&x[p].__e==n.__d&&(n.__d=g(r,p+1)),R(x[p],x[p]));if(w)for(p=0;p<w.length;p++)N(w[p],w[++p],w[++p])}function O(t,e,n){var r,o;for(r=0;r<t.__k.length;r++)(o=t.__k[r])&&(o.__=t,e="function"==typeof o.type?O(o,e,n):j(n,o,o,t.__k,o.__e,e));return e}function k(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){k(t,e)})):e.push(t)),e}function j(t,e,n,r,o,i){var u,c,a;if(void 0!==e.__d)u=e.__d,e.__d=void 0;else if(null==n||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),u=null;else{for(c=i,a=0;(c=c.nextSibling)&&a<r.length;a+=2)if(c==o)break t;t.insertBefore(o,i),u=i}return void 0!==u?u:o.nextSibling}function P(t,e,n){"-"===e[0]?t.setProperty(e,n):t[e]=null==n?"":"number"!=typeof n||l.test(e)?n:n+"px"}function E(t,e,n,r,o){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||P(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||P(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r||t.addEventListener(e,i?A:T,i):t.removeEventListener(e,i?A:T,i);else if("dangerouslySetInnerHTML"!==e){if(o)e=e.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null!=n&&(!1!==n||"a"===e[0]&&"r"===e[1])?t.setAttribute(e,n):t.removeAttribute(e))}}function T(t){this.l[t.type+!1](r.event?r.event(t):t)}function A(t){this.l[t.type+!0](r.event?r.event(t):t)}function C(t,e,n,o,i,u,c,a,f){var s,l,h,v,d,y,g,b,w,x,O,k=e.type;if(void 0!==e.constructor)return null;null!=n.__h&&(f=n.__h,a=e.__e=n.__e,e.__h=null,u=[a]),(s=r.__b)&&s(e);try{t:if("function"==typeof k){if(b=e.props,w=(s=k.contextType)&&o[s.__c],x=s?w?w.props.value:s.__:o,n.__c?g=(l=e.__c=n.__c).__=l.__E:("prototype"in k&&k.prototype.render?e.__c=l=new k(b,x):(e.__c=l=new m(b,x),l.constructor=k,l.render=M),w&&w.sub(l),l.props=b,l.state||(l.state={}),l.context=x,l.__n=o,h=l.__d=!0,l.__h=[]),null==l.__s&&(l.__s=l.state),null!=k.getDerivedStateFromProps&&(l.__s==l.state&&(l.__s=p({},l.__s)),p(l.__s,k.getDerivedStateFromProps(b,l.__s))),v=l.props,d=l.state,h)null==k.getDerivedStateFromProps&&null!=l.componentWillMount&&l.componentWillMount(),null!=l.componentDidMount&&l.__h.push(l.componentDidMount);else{if(null==k.getDerivedStateFromProps&&b!==v&&null!=l.componentWillReceiveProps&&l.componentWillReceiveProps(b,x),!l.__e&&null!=l.shouldComponentUpdate&&!1===l.shouldComponentUpdate(b,l.__s,x)||e.__v===n.__v){l.props=b,l.state=l.__s,e.__v!==n.__v&&(l.__d=!1),l.__v=e,e.__e=n.__e,e.__k=n.__k,e.__k.forEach((function(t){t&&(t.__=e)})),l.__h.length&&c.push(l);break t}null!=l.componentWillUpdate&&l.componentWillUpdate(b,l.__s,x),null!=l.componentDidUpdate&&l.__h.push((function(){l.componentDidUpdate(v,d,y)}))}l.context=x,l.props=b,l.state=l.__s,(s=r.__r)&&s(e),l.__d=!1,l.__v=e,l.__P=t,s=l.render(l.props,l.state,l.context),l.state=l.__s,null!=l.getChildContext&&(o=p(p({},o),l.getChildContext())),h||null==l.getSnapshotBeforeUpdate||(y=l.getSnapshotBeforeUpdate(v,d)),O=null!=s&&s.type===_&&null==s.key?s.props.children:s,S(t,Array.isArray(O)?O:[O],e,n,o,i,u,c,a,f),l.base=e.__e,e.__h=null,l.__h.length&&c.push(l),g&&(l.__E=l.__=null),l.__e=!1}else null==u&&e.__v===n.__v?(e.__k=n.__k,e.__e=n.__e):e.__e=I(n.__e,e,n,o,i,u,c,f);(s=r.diffed)&&s(e)}catch(t){e.__v=null,(f||null!=u)&&(e.__e=a,e.__h=!!f,u[u.indexOf(a)]=null),r.__e(t,e,n)}}function L(t,e){r.__c&&r.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){r.__e(t,e.__v)}}))}function I(t,e,n,r,o,i,u,c){var a,l,p,v,d=n.props,y=e.props,_=e.type,m=0;if("svg"===_&&(o=!0),null!=i)for(;m<i.length;m++)if((a=i[m])&&(a===t||(_?a.localName==_:3==a.nodeType))){t=a,i[m]=null;break}if(null==t){if(null===_)return document.createTextNode(y);t=o?document.createElementNS("http://www.w3.org/2000/svg",_):document.createElement(_,y.is&&y),i=null,c=!1}if(null===_)d===y||c&&t.data===y||(t.data=y);else{if(i=i&&s.slice.call(t.childNodes),l=(d=n.props||f).dangerouslySetInnerHTML,p=y.dangerouslySetInnerHTML,!c){if(null!=i)for(d={},v=0;v<t.attributes.length;v++)d[t.attributes[v].name]=t.attributes[v].value;(p||l)&&(p&&(l&&p.__html==l.__html||p.__html===t.innerHTML)||(t.innerHTML=p&&p.__html||""))}if(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||E(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||E(t,i,e[i],n[i],r)}(t,y,d,o,c),p)e.__k=[];else if(m=e.props.children,S(t,Array.isArray(m)?m:[m],e,n,r,o&&"foreignObject"!==_,i,u,t.firstChild,c),null!=i)for(m=i.length;m--;)null!=i[m]&&h(i[m]);c||("value"in y&&void 0!==(m=y.value)&&(m!==t.value||"progress"===_&&!m)&&E(t,"value",m,d.value,!1),"checked"in y&&void 0!==(m=y.checked)&&m!==t.checked&&E(t,"checked",m,d.checked,!1))}return t}function N(t,e,n){try{"function"==typeof t?t(e):t.current=e}catch(t){r.__e(t,n)}}function R(t,e,n){var o,i,u;if(r.unmount&&r.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||N(o,null,e)),n||"function"==typeof t.type||(n=null!=(i=t.__e)),t.__e=t.__d=void 0,null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){r.__e(t,e)}o.base=o.__P=null}if(o=t.__k)for(u=0;u<o.length;u++)o[u]&&R(o[u],e,n);null!=i&&h(i)}function M(t,e,n){return this.constructor(t,n)}function F(t,e,n){var o,i,u;r.__&&r.__(t,e),i=(o="function"==typeof n)?null:n&&n.__k||e.__k,u=[],C(e,t=(!o&&n||e).__k=v(_,null,[t]),i||f,f,void 0!==e.ownerSVGElement,!o&&n?[n]:i?null:e.firstChild?s.slice.call(e.childNodes):null,u,!o&&n?n:i?i.__e:e.firstChild,o),L(u,t)}function D(t,e){F(t,e,D)}function G(t,e,n){var r,o,i,u=arguments,c=p({},t.props);for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:c[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(u[i]);return null!=n&&(c.children=n),d(t.type,c,r||t.key,o||t.ref,null)}function U(t,e){var n={__c:e="__cC"+a++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var n,r;return this.getChildContext||(n=[],(r={})[e]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&n.some(w)},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return n.Provider.__=n.Consumer.contextType=n}r={__e:function(t,e){for(var n,r,o;e=e.__;)if((n=e.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(t)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(t),o=n.__d),o)return n.__E=n}catch(e){t=e}throw t},__v:0},o=function(t){return null!=t&&void 0===t.constructor},m.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof t&&(t=t(p({},n),this.props)),t&&p(n,t),null!=t&&this.__v&&(e&&this.__h.push(e),w(this))},m.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),w(this))},m.prototype.render=_,i=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,x.__r=0,a=0},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r,o,i,u=n(112),c=n(0),a=n(5),f=n(9),s=n(6),l=n(43),p=n(26),h=n(27),v=c.WeakMap;if(u){var d=l.state||(l.state=new v),y=d.get,_=d.has,m=d.set;r=function(t,e){return e.facade=t,m.call(d,t,e),e},o=function(t){return y.call(d,t)||{}},i=function(t){return _.call(d,t)}}else{var g=p("state");h[g]=!0,r=function(t,e){return e.facade=t,f(t,g,e),e},o=function(t){return s(t,g)?t[g]:{}},i=function(t){return s(t,g)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!a(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e){t.exports={}},,function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(32),o=n(44),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){t.exports={}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(19),o=n(0);t.exports="process"==r(o.process)},function(t,e,n){var r,o=n(4),i=n(113),u=n(46),c=n(27),a=n(73),f=n(40),s=n(26),l=s("IE_PROTO"),p=function(){},h=function(t){return"<script>"+t+"<\/script>"},v=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;v=r?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=f("iframe")).style.display="none",a.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var n=u.length;n--;)delete v.prototype[u[n]];return v()};c[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[l]=t):n=v(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(7).f,o=n(6),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(18),o=n(43);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.10.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(16);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(33),o=n(35),i=n(12),u=n(11),c=n(99),a=[].push,f=function(t){var e=1==t,n=2==t,f=3==t,s=4==t,l=6==t,p=7==t,h=5==t||l;return function(v,d,y,_){for(var m,g,b=i(v),w=o(b),x=r(d,y,3),S=u(w.length),O=0,k=_||c,j=e?k(v,S):n||p?k(v,0):void 0;S>O;O++)if((h||O in w)&&(g=x(m=w[O],O,b),t))if(e)j[O]=g;else if(g)switch(t){case 3:return!0;case 5:return m;case 6:return O;case 2:a.call(j,m)}else switch(t){case 4:return!1;case 7:a.call(j,m)}return l?-1:f||s?s:j}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterOut:f(7)}},function(t,e,n){var r=n(2),o=n(19),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r,o,i=n(0),u=n(48),c=i.process,a=c&&c.versions,f=a&&a.v8;f?o=(r=f.split("."))[0]+r[1]:u&&(!(r=u.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=u.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){var r=n(19);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(69),o=n(46);t.exports=Object.keys||function(t){return r(t,o)}},,function(t,e,n){var r=n(0),o=n(5),i=r.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e,n){var r=n(0),o=n(9);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(43),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(0),o=n(41),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(69),o=n(46).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(29),o=n(36),i=n(2);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},function(t,e,n){var r=n(14);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(2),o=n(1),i=n(36),u=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[u]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){var r=n(6),o=n(12),i=n(26),u=n(74),c=i("IE_PROTO"),a=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),r(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r={};r[n(1)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e){t.exports=window.contentfulExtension},function(t,e,n){"use strict";var r=n(25),o=n(7),i=n(21);t.exports=function(t,e,n){var u=r(e);u in t?o.f(t,u,i(0,n)):t[u]=n}},function(t,e,n){"use strict";var r=n(10),o=n(100),i=n(23),u=n(22),c=n(82),a=u.set,f=u.getterFor("Array Iterator");t.exports=c(Array,"Array",(function(t,e){a(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},,function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(51),o=n(13),i=n(116);r||o(Object.prototype,"toString",i,{unsafe:!0})},,,,,,,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(8),o=n(2),i=n(40);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(6),o=n(97),i=n(15),u=n(7);t.exports=function(t,e){for(var n=o(e),c=u.f,a=i.f,f=0;f<n.length;f++){var s=n[f];r(t,s)||c(t,s,a(e,s))}}},function(t,e,n){var r=n(0);t.exports=r},function(t,e,n){var r=n(6),o=n(10),i=n(109).indexOf,u=n(27);t.exports=function(t,e){var n,c=o(t),a=0,f=[];for(n in c)!r(u,n)&&r(c,n)&&f.push(n);for(;e.length>a;)r(c,n=e[a++])&&(~i(f,n)||f.push(n));return f}},function(t,e,n){var r=n(28),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){var r=n(2),o=/#|\.prototype\./,i=function(t,e){var n=c[u(t)];return n==f||n!=a&&("function"==typeof e?r(e):!!e)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},a=i.NATIVE="N",f=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(47);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(14);t.exports=r("document","documentElement")},function(t,e,n){var r=n(2);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(51),o=n(19),i=n(1)("toStringTag"),u="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:u?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){"use strict";var r,o,i,u,c=n(3),a=n(18),f=n(0),s=n(14),l=n(117),p=n(13),h=n(118),v=n(31),d=n(119),y=n(5),_=n(16),m=n(120),g=n(42),b=n(121),w=n(89),x=n(90),S=n(77).set,O=n(122),k=n(124),j=n(125),P=n(79),E=n(126),T=n(22),A=n(71),C=n(1),L=n(29),I=n(36),N=C("species"),R="Promise",M=T.get,F=T.set,D=T.getterFor(R),G=l,U=f.TypeError,V=f.document,W=f.process,B=s("fetch"),H=P.f,z=H,K=!!(V&&V.createEvent&&f.dispatchEvent),$="function"==typeof PromiseRejectionEvent,Y=A(R,(function(){if(!(g(G)!==String(G))){if(66===I)return!0;if(!L&&!$)return!0}if(a&&!G.prototype.finally)return!0;if(I>=51&&/native code/.test(G))return!1;var t=G.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[N]=e,!(t.then((function(){}))instanceof e)})),q=Y||!w((function(t){G.all(t).catch((function(){}))})),J=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;O((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var u,c,a,f=n[i++],s=o?f.ok:f.fail,l=f.resolve,p=f.reject,h=f.domain;try{s?(o||(2===t.rejection&&et(t),t.rejection=1),!0===s?u=r:(h&&h.enter(),u=s(r),h&&(h.exit(),a=!0)),u===f.promise?p(U("Promise-chain cycle")):(c=J(u))?c.call(u,l,p):l(u)):p(r)}catch(t){h&&!a&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&Z(t)}))}},Q=function(t,e,n){var r,o;K?((r=V.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),f.dispatchEvent(r)):r={promise:e,reason:n},!$&&(o=f["on"+t])?o(r):"unhandledrejection"===t&&j("Unhandled promise rejection",n)},Z=function(t){S.call(f,(function(){var e,n=t.facade,r=t.value;if(tt(t)&&(e=E((function(){L?W.emit("unhandledRejection",r,n):Q("unhandledrejection",n,r)})),t.rejection=L||tt(t)?2:1,e.error))throw e.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){S.call(f,(function(){var e=t.facade;L?W.emit("rejectionHandled",e):Q("rejectionhandled",e,t.value)}))},nt=function(t,e,n){return function(r){t(e,r,n)}},rt=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,X(t,!0))},ot=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U("Promise can't be resolved itself");var r=J(e);r?O((function(){var n={done:!1};try{r.call(e,nt(ot,n,t),nt(rt,n,t))}catch(e){rt(n,e,t)}})):(t.value=e,t.state=1,X(t,!1))}catch(e){rt({done:!1},e,t)}}};Y&&(G=function(t){m(this,G,R),_(t),r.call(this);var e=M(this);try{t(nt(ot,e),nt(rt,e))}catch(t){rt(e,t)}},(r=function(t){F(this,{type:R,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(G.prototype,{then:function(t,e){var n=D(this),r=H(x(this,G));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=L?W.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=nt(ot,e),this.reject=nt(rt,e)},P.f=H=function(t){return t===G||t===i?new o(t):z(t)},a||"function"!=typeof l||(u=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new G((function(t,e){u.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof B&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return k(G,B.apply(f,arguments))}}))),c({global:!0,wrap:!0,forced:Y},{Promise:G}),v(G,R,!1,!0),d(R),i=s(R),c({target:R,stat:!0,forced:Y},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),c({target:R,stat:!0,forced:a||Y},{resolve:function(t){return k(a&&this===i?G:this,t)}}),c({target:R,stat:!0,forced:q},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=E((function(){var n=_(e.resolve),i=[],u=0,c=1;b(t,(function(t){var a=u++,f=!1;i.push(void 0),c++,n.call(e,t).then((function(t){f||(f=!0,i[a]=t,--c||r(i))}),o)})),--c||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=E((function(){var o=_(e.resolve);b(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r,o,i,u=n(0),c=n(2),a=n(33),f=n(73),s=n(40),l=n(78),p=n(29),h=u.location,v=u.setImmediate,d=u.clearImmediate,y=u.process,_=u.MessageChannel,m=u.Dispatch,g=0,b={},w=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},x=function(t){return function(){w(t)}},S=function(t){w(t.data)},O=function(t){u.postMessage(t+"",h.protocol+"//"+h.host)};v&&d||(v=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return b[++g]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(g),g},d=function(t){delete b[t]},p?r=function(t){y.nextTick(x(t))}:m&&m.now?r=function(t){m.now(x(t))}:_&&!l?(i=(o=new _).port2,o.port1.onmessage=S,r=a(i.postMessage,i,1)):u.addEventListener&&"function"==typeof postMessage&&!u.importScripts&&h&&"file:"!==h.protocol&&!c(O)?(r=O,u.addEventListener("message",S,!1)):r="onreadystatechange"in s("script")?function(t){f.appendChild(s("script")).onreadystatechange=function(){f.removeChild(this),w(t)}}:function(t){setTimeout(x(t),0)}),t.exports={set:v,clear:d}},function(t,e,n){var r=n(48);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){"use strict";var r=n(16),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){var r=n(1);e.f=r},function(t,e,n){var r=n(68),o=n(6),i=n(80),u=n(7).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||u(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(3),o=n(128),i=n(50),u=n(129),c=n(31),a=n(9),f=n(13),s=n(1),l=n(18),p=n(23),h=n(83),v=h.IteratorPrototype,d=h.BUGGY_SAFARI_ITERATORS,y=s("iterator"),_=function(){return this};t.exports=function(t,e,n,s,h,m,g){o(n,e,s);var b,w,x,S=function(t){if(t===h&&E)return E;if(!d&&t in j)return j[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},O=e+" Iterator",k=!1,j=t.prototype,P=j[y]||j["@@iterator"]||h&&j[h],E=!d&&P||S(h),T="Array"==e&&j.entries||P;if(T&&(b=i(T.call(new t)),v!==Object.prototype&&b.next&&(l||i(b)===v||(u?u(b,v):"function"!=typeof b[y]&&a(b,y,_)),c(b,O,!0,!0),l&&(p[O]=_))),"values"==h&&P&&"values"!==P.name&&(k=!0,E=function(){return P.call(this)}),l&&!g||j[y]===E||a(j,y,E),p[e]=E,h)if(w={values:S("values"),keys:m?E:S("keys"),entries:S("entries")},g)for(x in w)!d&&!k&&x in j||f(j,x,w[x]);else r({target:e,proto:!0,forced:d||k},w);return w}},function(t,e,n){"use strict";var r,o,i,u=n(2),c=n(50),a=n(9),f=n(6),s=n(1),l=n(18),p=s("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):h=!0);var v=null==r||u((function(){var t={};return r[p].call(t)!==t}));v&&(r={}),l&&!v||f(r,p)||a(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},,function(t,e,n){var r=n(28),o=n(17),i=function(t){return function(e,n){var i,u,c=String(o(e)),a=r(n),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){var r=n(1),o=n(23),i=r("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,e,n){var r=n(75),o=n(23),i=n(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(4);t.exports=function(t){var e=t.return;if(void 0!==e)return r(e.call(t)).value}},function(t,e,n){var r=n(1)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[r]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(16),i=n(1)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||null==(n=r(u)[i])?e:o(n)}},function(t,e,n){"use strict";var r=n(3),o=n(0),i=n(14),u=n(18),c=n(8),a=n(47),f=n(72),s=n(2),l=n(6),p=n(37),h=n(5),v=n(4),d=n(12),y=n(10),_=n(25),m=n(21),g=n(30),b=n(38),w=n(45),x=n(127),S=n(57),O=n(15),k=n(7),j=n(56),P=n(9),E=n(13),T=n(32),A=n(26),C=n(27),L=n(44),I=n(1),N=n(80),R=n(81),M=n(31),F=n(22),D=n(34).forEach,G=A("hidden"),U=I("toPrimitive"),V=F.set,W=F.getterFor("Symbol"),B=Object.prototype,H=o.Symbol,z=i("JSON","stringify"),K=O.f,$=k.f,Y=x.f,q=j.f,J=T("symbols"),X=T("op-symbols"),Q=T("string-to-symbol-registry"),Z=T("symbol-to-string-registry"),tt=T("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=c&&s((function(){return 7!=g($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=K(B,e);r&&delete B[e],$(t,e,n),r&&t!==B&&$(B,e,r)}:$,ot=function(t,e){var n=J[t]=g(H.prototype);return V(n,{type:"Symbol",tag:t,description:e}),c||(n.description=e),n},it=f?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},ut=function(t,e,n){t===B&&ut(X,e,n),v(t);var r=_(e,!0);return v(n),l(J,r)?(n.enumerable?(l(t,G)&&t[G][r]&&(t[G][r]=!1),n=g(n,{enumerable:m(0,!1)})):(l(t,G)||$(t,G,m(1,{})),t[G][r]=!0),rt(t,r,n)):$(t,r,n)},ct=function(t,e){v(t);var n=y(e),r=b(n).concat(lt(n));return D(r,(function(e){c&&!at.call(n,e)||ut(t,e,n[e])})),t},at=function(t){var e=_(t,!0),n=q.call(this,e);return!(this===B&&l(J,e)&&!l(X,e))&&(!(n||!l(this,e)||!l(J,e)||l(this,G)&&this[G][e])||n)},ft=function(t,e){var n=y(t),r=_(e,!0);if(n!==B||!l(J,r)||l(X,r)){var o=K(n,r);return!o||!l(J,r)||l(n,G)&&n[G][r]||(o.enumerable=!0),o}},st=function(t){var e=Y(y(t)),n=[];return D(e,(function(t){l(J,t)||l(C,t)||n.push(t)})),n},lt=function(t){var e=t===B,n=Y(e?X:y(t)),r=[];return D(n,(function(t){!l(J,t)||e&&!l(B,t)||r.push(J[t])})),r};(a||(E((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=L(t),n=function(t){this===B&&n.call(X,t),l(this,G)&&l(this[G],e)&&(this[G][e]=!1),rt(this,e,m(1,t))};return c&&nt&&rt(B,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return W(this).tag})),E(H,"withoutSetter",(function(t){return ot(L(t),t)})),j.f=at,k.f=ut,O.f=ft,w.f=x.f=st,S.f=lt,N.f=function(t){return ot(I(t),t)},c&&($(H.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),u||E(B,"propertyIsEnumerable",at,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:H}),D(b(tt),(function(t){R(t)})),r({target:"Symbol",stat:!0,forced:!a},{for:function(t){var e=String(t);if(l(Q,e))return Q[e];var n=H(e);return Q[e]=n,Z[n]=e,n},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(l(Z,t))return Z[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!a,sham:!c},{create:function(t,e){return void 0===e?g(t):ct(g(t),e)},defineProperty:ut,defineProperties:ct,getOwnPropertyDescriptor:ft}),r({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:st,getOwnPropertySymbols:lt}),r({target:"Object",stat:!0,forced:s((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(d(t))}}),z)&&r({target:"JSON",stat:!0,forced:!a||s((function(){var t=H();return"[null]"!=z([t])||"{}"!=z({a:t})||"{}"!=z(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(h(e)||void 0!==t)&&!it(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!it(e))return e}),o[1]=e,z.apply(null,o)}});H.prototype[U]||P(H.prototype,U,H.prototype.valueOf),M(H,"Symbol"),C[G]=!0},function(t,e,n){"use strict";var r=n(3),o=n(8),i=n(0),u=n(6),c=n(5),a=n(7).f,f=n(67),s=i.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new s(t):void 0===t?s():s(t);return""===t&&(l[e]=!0),e};f(p,s);var h=p.prototype=s.prototype;h.constructor=p;var v=h.toString,d="Symbol(test)"==String(s("test")),y=/^Symbol\((.*)\)[^)]+$/;a(h,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,e=v.call(t);if(u(l,t))return"";var n=d?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(81)("iterator")},function(t,e,n){"use strict";var r=n(85).charAt,o=n(22),i=n(82),u=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(0),o=n(101),i=n(54),u=n(9),c=n(1),a=c("iterator"),f=c("toStringTag"),s=i.values;for(var l in o){var p=r[l],h=p&&p.prototype;if(h){if(h[a]!==s)try{u(h,a,s)}catch(t){h[a]=s}if(h[f]||u(h,f,l),o[l])for(var v in i)if(h[v]!==i[v])try{u(h,v,i[v])}catch(t){h[v]=i[v]}}}},,function(t,e,n){var r=n(14),o=n(45),i=n(57),u=n(4);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(u(t)),n=i.f;return n?e.concat(n(t)):e}},,function(t,e,n){var r=n(5),o=n(37),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(1),o=n(30),i=n(7),u=r("unscopables"),c=Array.prototype;null==c[u]&&i.f(c,u,{configurable:!0,value:o(null)}),t.exports=function(t){c[u][t]=!0}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},,,,,,function(t,e,n){var r=n(3),o=n(2),i=n(12),u=n(50),c=n(74);r({target:"Object",stat:!0,forced:o((function(){u(1)})),sham:!c},{getPrototypeOf:function(t){return u(i(t))}})},function(t,e,n){var r=n(3),o=n(14),i=n(16),u=n(4),c=n(5),a=n(30),f=n(115),s=n(2),l=o("Reflect","construct"),p=s((function(){function t(){}return!(l((function(){}),[],t)instanceof t)})),h=!s((function(){l((function(){}))})),v=p||h;r({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(t,e){i(t),u(e);var n=arguments.length<3?t:i(arguments[2]);if(h&&!p)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(f.apply(t,r))}var o=n.prototype,s=a(c(o)?o:Object.prototype),v=Function.apply.call(t,s,e);return c(v)?v:s}})},function(t,e,n){var r=n(10),o=n(11),i=n(70),u=function(t){return function(e,n,u){var c,a=r(e),f=o(a.length),s=i(u,f);if(t&&n!=n){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===n)return t||s||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},,,function(t,e,n){var r=n(0),o=n(42),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){var r=n(8),o=n(7),i=n(4),u=n(38);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=u(e),c=r.length,a=0;c>a;)o.f(t,n=r[a++],e[n]);return t}},function(t,e,n){"use strict";var r=n(3),o=n(34).filter;r({target:"Array",proto:!0,forced:!n(49)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(16),o=n(5),i=[].slice,u={},c=function(t,e,n){if(!(e in u)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";u[e]=Function("C,a","return new C("+r.join(",")+")")}return u[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=i.call(arguments,1),u=function(){var r=n.concat(i.call(arguments));return this instanceof u?c(e,r.length,r):e.apply(t,r)};return o(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e,n){"use strict";var r=n(51),o=n(75);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){var r=n(13);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(14),o=n(7),i=n(1),u=n(8),c=i("species");t.exports=function(t){var e=r(t),n=o.f;u&&e&&!e[c]&&n(e,c,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(4),o=n(86),i=n(11),u=n(33),c=n(87),a=n(88),f=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var s,l,p,h,v,d,y,_=n&&n.that,m=!(!n||!n.AS_ENTRIES),g=!(!n||!n.IS_ITERATOR),b=!(!n||!n.INTERRUPTED),w=u(e,_,1+m+b),x=function(t){return s&&a(s),new f(!0,t)},S=function(t){return m?(r(t),b?w(t[0],t[1],x):w(t[0],t[1])):b?w(t,x):w(t)};if(g)s=t;else{if("function"!=typeof(l=c(t)))throw TypeError("Target is not iterable");if(o(l)){for(p=0,h=i(t.length);h>p;p++)if((v=S(t[p]))&&v instanceof f)return v;return new f(!1)}s=l.call(t)}for(d=s.next;!(y=d.call(s)).done;){try{v=S(y.value)}catch(t){throw a(s),t}if("object"==typeof v&&v&&v instanceof f)return v}return new f(!1)}},function(t,e,n){var r,o,i,u,c,a,f,s,l=n(0),p=n(15).f,h=n(77).set,v=n(78),d=n(123),y=n(29),_=l.MutationObserver||l.WebKitMutationObserver,m=l.document,g=l.process,b=l.Promise,w=p(l,"queueMicrotask"),x=w&&w.value;x||(r=function(){var t,e;for(y&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?u():i=void 0,t}}i=void 0,t&&t.enter()},v||y||d||!_||!m?b&&b.resolve?(f=b.resolve(void 0),s=f.then,u=function(){s.call(f,r)}):u=y?function(){g.nextTick(r)}:function(){h.call(l,r)}:(c=!0,a=m.createTextNode(""),new _(r).observe(a,{characterData:!0}),u=function(){a.data=c=!c})),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,u()),i=e}},function(t,e,n){var r=n(48);t.exports=/web0s(?!.*chrome)/i.test(r)},function(t,e,n){var r=n(4),o=n(5),i=n(79);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(10),o=n(45).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(83).IteratorPrototype,o=n(30),i=n(21),u=n(31),c=n(23),a=function(){return this};t.exports=function(t,e,n){var f=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),u(t,f,!1,!0),c[f]=a,t}},function(t,e,n){var r=n(4),o=n(130);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(t){a=function(t,e,n){return t[e]=n}}function f(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),u=new E(r||[]);return i._invoke=function(t,e,n){var r=l;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var c=k(u,n);if(c){if(c===d)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var a=s(t,e,n);if("normal"===a.type){if(r=n.done?v:p,a.arg===d)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r=v,n.method="throw",n.arg=a.arg)}}}(t,n,u),i}function s(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var l="suspendedStart",p="suspendedYield",h="executing",v="completed",d={};function y(){}function _(){}function m(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(T([])));w&&w!==n&&r.call(w,i)&&(g=w);var x=m.prototype=y.prototype=Object.create(g);function S(t){["next","throw","return"].forEach((function(e){a(t,e,(function(t){return this._invoke(e,t)}))}))}function O(t,e){var n;this._invoke=function(o,i){function u(){return new e((function(n,u){!function n(o,i,u,c){var a=s(t[o],t,i);if("throw"!==a.type){var f=a.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,u,c)}),(function(t){n("throw",t,u,c)})):e.resolve(l).then((function(t){f.value=t,u(f)}),(function(t){return n("throw",t,u,c)}))}c(a.arg)}(o,i,n,u)}))}return n=n?n.then(u,u):u()}}function k(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,k(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=s(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,d;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,d):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function T(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return u.next=u}}return{next:A}}function A(){return{value:e,done:!0}}return _.prototype=x.constructor=m,m.constructor=_,_.displayName=a(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===_||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a(t,c,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},S(O.prototype),O.prototype[u]=function(){return this},t.AsyncIterator=O,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var u=new O(f(e,n,r,o),i);return t.isGeneratorFunction(n)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},S(x),a(x,c,"Generator"),x[i]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=T,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),f=r.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,,,,,function(t,e,n){var r=n(3),o=n(146);r({target:"Array",stat:!0,forced:!n(89)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(3),o=n(5),i=n(37),u=n(70),c=n(11),a=n(10),f=n(53),s=n(1),l=n(49)("slice"),p=s("species"),h=[].slice,v=Math.max;r({target:"Array",proto:!0,forced:!l},{slice:function(t,e){var n,r,s,l=a(this),d=c(l.length),y=u(t,d),_=u(void 0===e?d:e,d);if(i(l)&&("function"!=typeof(n=l.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return h.call(l,y,_);for(r=new(void 0===n?Array:n)(v(_-y,0)),s=0;y<_;y++,s++)y in l&&f(r,s,l[y]);return r.length=s,r}})},function(t,e,n){var r=n(8),o=n(7).f,i=Function.prototype,u=i.toString,c=/^\s*function ([^ (]*)/;!r||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return u.call(this).match(c)[1]}catch(t){return""}}})},,,,,function(t,e,n){"use strict";var r=n(33),o=n(12),i=n(147),u=n(86),c=n(11),a=n(53),f=n(87);t.exports=function(t){var e,n,s,l,p,h,v=o(t),d="function"==typeof this?this:Array,y=arguments.length,_=y>1?arguments[1]:void 0,m=void 0!==_,g=f(v),b=0;if(m&&(_=r(_,y>2?arguments[2]:void 0,2)),null==g||d==Array&&u(g))for(n=new d(e=c(v.length));e>b;b++)h=m?_(v[b],b):v[b],a(n,b,h);else for(p=(l=g.call(v)).next,n=new d;!(s=p.call(l)).done;b++)h=m?i(l,_,[s.value,b],!0):s.value,a(n,b,h);return n.length=b,n}},function(t,e,n){var r=n(4),o=n(88);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){throw o(t),e}}},,,,,,,function(t,e,n){"use strict";var r=n(3),o=n(34).map;r({target:"Array",proto:!0,forced:!n(49)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(3),o=n(2),i=n(37),u=n(5),c=n(12),a=n(11),f=n(53),s=n(99),l=n(49),p=n(1),h=n(36),v=p("isConcatSpreadable"),d=h>=51||!o((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),y=l("concat"),_=function(t){if(!u(t))return!1;var e=t[v];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!d||!y},{concat:function(t){var e,n,r,o,i,u=c(this),l=s(u,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(i=-1===e?u:arguments[e],_(i)){if(p+(o=a(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&f(l,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");f(l,p++,i)}return l.length=p,l}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return h}));n(154),n(183),n(319),n(140),n(320),n(107),n(108),n(91),n(92),n(58),n(93),n(54),n(94),n(95),n(139),n(141);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=l(t);if(e){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?s(t):e}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var h=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(l,e);var n,r,i,f=a(l);function l(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),p(s(t=f.call(this)),"setKey",(function(e){var n="string"==typeof e?e:e.target.value;t.setState({key:n})})),p(s(t),"setVal",(function(e){var n="string"==typeof e?e:e.target.value;t.setState({value:n})})),t.setKey=t.setKey.bind(s(t)),t.setVal=t.setVal.bind(s(t)),t.addRow=t.addRow.bind(s(t)),t.deleteRow=t.deleteRow.bind(s(t)),t}return n=l,(r=[{key:"render",value:function(){var e=this,n=this.props.items;return console.log("rerender",this.state.errors),t("div",{className:"kvp-form"},t("div",{className:"kvp-form__table"},t("table",null,t("tbody",null,n&&n.map((function(r,o){return t("tr",{key:o,className:"kvp-form__table__row","data-testid":"table-row"},t("td",{className:"text"},r.key),t("td",{className:"divider"},"|"),t("td",{className:"text"},r.value),t("td",{className:"buttons"},t("div",{className:"flex-vert"},t("a",{className:"","data-testid":"move-up",onClick:function(){return e.moveUp(o)}},o>0?"△":" "),t("a",{className:"","data-testid":"move-down",onClick:function(){return e.moveDown(o)}},o<n.length-1?"▽":" ")),t("button",{className:"cf-btn-secondary delete","data-testid":"delete",onClick:function(){return e.deleteRow(r)}},"X")))})),t("tr",{className:"kvp-form__table__row form","data-testid":"form-row"},t("td",{className:"text"},t("input",{className:"cf-form-input",type:"text",id:"key","data-testid":"key",onChange:this.setKey,value:this.state.key})),t("td",{className:"divider"},t("span",{class:"divider"},"|")),t("td",{className:"text"},t("input",{className:"cf-form-input",type:"text",id:"value","data-testid":"value",onChange:this.setVal,value:this.state.value})),t("td",{className:"buttons"},t("button",{className:"cf-btn-primary",type:"submit",id:"add","data-testid":"add",onClick:this.addRow},"+"))))),this.state.errors&&this.state.errors.map((function(e){return t("div",{class:"error","data-testid":"error"},e)}))))}},{key:"addRow",value:function(){var t=[];if(this.state.key&&0!=this.state.key.length||t.push("Please set a key"),this.state.value&&0!=this.state.value.length||t.push("Please set a value"),0==t.length&&this.props.onItemsChanged){var e={key:this.state.key,value:this.state.value},n=this.props.items||[];this.props.onItemsChanged([].concat(o(n),[e])),this.setState({key:"",value:""})}this.setState({errors:t})}},{key:"deleteRow",value:function(t){if(console.log("deleteRow"),this.setState({key:t.key,value:t.value}),this.props.onItemsChanged){var e=this.props.items||[];if(0!=e.length){var n=e.findIndex((function(e){return e.key==t.key&&e.value==t.value}));if(!(n<0)){var r=e.slice(0,n);r.push.apply(r,o(e.slice(n+1))),this.props.onItemsChanged(r)}}}}},{key:"moveUp",value:function(t){var e=this.props.items||[];if(e.length>0&&t>0&&this.props.onItemsChanged){var n=e.splice(t,1);e.splice.apply(e,[t-1,0].concat(o(n))),this.props.onItemsChanged(e)}}},{key:"moveDown",value:function(t){var e=this.props.items||[];if(e.length>0&&t<e.length-1&&this.props.onItemsChanged){var n=e.splice(t,1);e.splice.apply(e,[t+1,0].concat(o(n))),this.props.onItemsChanged(e)}}}])&&u(n.prototype,r),i&&u(n,i),l}(n(20).Component)}).call(this,n(20).h)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"KvpEditor",(function(){return v}));n(131),n(114),n(107),n(108),n(58),n(76),n(91),n(92),n(93),n(54),n(94),n(95);var r=n(52),o=n(20),i=n(216);function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void n(t)}c.done?e(a):Promise.resolve(a).then(r,o)}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=h(t);if(e){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?p(t):e}function p(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n(321);r&&r.init((function(e){Object(o.render)(t(v,e),document.getElementById("react-root")),e.window.startAutoResizer()}));var v=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(v,e);var n,r,o,u,l,h=s(v);function v(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),(t=h.call(this)).onItemsChanged=t.onItemsChanged.bind(p(t)),t}return n=v,(r=[{key:"componentDidMount",value:function(){var t=this,e=this.props;this.setState({fieldValue:(e.field.getValue()||[]).filter((function(t){return t}))}),e.field.onValueChanged((function(e){t.setState({fieldValue:(e||[]).filter((function(t){return t}))})}))}},{key:"render",value:function(){var e=this.state,n=e.fieldValue,r=e.waiting;return t("div",{className:r?"disabled":""},t(i.a,{items:n,onItemsChanged:this.onItemsChanged}))}},{key:"onItemsChanged",value:(u=regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.props,this.setState({waiting:!0}),t.next=4,n.field.setValue(e);case 4:this.setState({fieldValue:e,waiting:!1});case 5:case"end":return t.stop()}}),t,this)})),l=function(){var t=this,e=arguments;return new Promise((function(n,r){var o=u.apply(t,e);function i(t){c(o,n,r,i,a,"next",t)}function a(t){c(o,n,r,i,a,"throw",t)}i(void 0)}))},function(t){return l.apply(this,arguments)})}])&&a(n.prototype,r),o&&a(n,o),v}(o.Component)}.call(this,n(20).h)},function(t,e,n){"use strict";var r=n(3),o=n(34).findIndex,i=n(100),u=!0;"findIndex"in[]&&Array(1).findIndex((function(){u=!1})),r({target:"Array",proto:!0,forced:u},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(t,e,n){"use strict";var r=n(3),o=n(70),i=n(28),u=n(11),c=n(12),a=n(99),f=n(53),s=n(49)("splice"),l=Math.max,p=Math.min;r({target:"Array",proto:!0,forced:!s},{splice:function(t,e){var n,r,s,h,v,d,y=c(this),_=u(y.length),m=o(t,_),g=arguments.length;if(0===g?n=r=0:1===g?(n=0,r=_-m):(n=g-2,r=p(l(i(e),0),_-m)),_+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(s=a(y,r),h=0;h<r;h++)(v=m+h)in y&&f(s,h,y[v]);if(s.length=r,n<r){for(h=m;h<_-r;h++)d=h+n,(v=h+r)in y?y[d]=y[v]:delete y[d];for(h=_;h>_-r+n;h--)delete y[h-1]}else if(n>r)for(h=_-r;h>m;h--)d=h+n-1,(v=h+r-1)in y?y[d]=y[v]:delete y[d];for(h=0;h<n;h++)y[h+m]=arguments[h+2];return y.length=_-r+n,s}})},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJlYWN0L2Rpc3QvcHJlYWN0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmNvbnRlbnRmdWxFeHRlbnNpb25cIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1jbG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMva3ZwLWVkaXRvci9rdnAtZm9ybS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2t2cC1lZGl0b3IvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJ0aGlzIiwiRnVuY3Rpb24iLCJzaGFyZWQiLCJoYXMiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiZXhlYyIsImVycm9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiREVTQ1JJUFRPUlMiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCIkZGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJmYWlscyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiSW5kZXhlZE9iamVjdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsImluc3BlY3RTb3VyY2UiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJzdGF0ZSIsInVuc2FmZSIsInNpbXBsZSIsImpvaW4iLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsInRvSW5kZXhlZE9iamVjdCIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0b1N0cmluZyIsInNsaWNlIiwidSIsImUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhIiwicHVzaCIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwidiIsInR5cGUiLCJwcm9wcyIsInJlZiIsIl9fayIsIl9fIiwiX19iIiwiX19lIiwiX19kIiwiX19jIiwiX19oIiwiY29uc3RydWN0b3IiLCJfX3YiLCJ2bm9kZSIsImgiLCJjdXJyZW50IiwieSIsImNvbnRleHQiLCJpbmRleE9mIiwiXyIsImJhc2UiLCJrIiwiYiIsIl9fciIsImRlYm91bmNlUmVuZGVyaW5nIiwic29ydCIsInNvbWUiLCJfX1AiLCJJIiwiX19uIiwib3duZXJTVkdFbGVtZW50IiwiVCIsInciLCJBIiwiQXJyYXkiLCJpc0FycmF5IiwiZyIsIngiLCJMIiwieiIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJzZXRQcm9wZXJ0eSIsInRlc3QiLCJDIiwic3R5bGUiLCJjc3NUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkgiLCIkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImV2ZW50IiwiY29udGV4dFR5cGUiLCJfX0UiLCJyZW5kZXIiLCJNIiwic3ViIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yRWFjaCIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImoiLCJkaWZmZWQiLCJsb2NhbE5hbWUiLCJub2RlVHlwZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVFbGVtZW50IiwiaXMiLCJkYXRhIiwiY2hpbGROb2RlcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYXR0cmlidXRlcyIsIl9faHRtbCIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJjaGVja2VkIiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiTiIsIlMiLCJxIiwiQ29uc3VtZXIiLCJQcm92aWRlciIsInNwbGljZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJ0aGVuIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJXZWFrTWFwIiwic3RvcmUiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwiVFlQRSIsImlucHV0IiwiUFJFRkVSUkVEX1NUUklORyIsImZuIiwidmFsIiwidmFsdWVPZiIsImtleXMiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImNsYXNzb2YiLCJwcm9jZXNzIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCJQcm9wZXJ0aWVzIiwicmVzdWx0IiwiVE9fU1RSSU5HX1RBRyIsIndlbGxLbm93blN5bWJvbCIsIlRBRyIsIklTX1BVUkUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwidGhhdCIsImFwcGx5IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImNyZWF0ZU1ldGhvZCIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJJU19GSUxURVJfT1VUIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJpbmRleCIsIm1hcCIsImZpbHRlciIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlck91dCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibWF0Y2giLCJ1c2VyQWdlbnQiLCJ2ZXJzaW9ucyIsInY4IiwiYXJnIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiRVhJU1RTIiwiZnVuY3Rpb25Ub1N0cmluZyIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImNvbmNhdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJJU19OT0RFIiwiVjhfVkVSU0lPTiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldEJ1aWx0SW4iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsImNvbnRlbnRmdWxFeHRlbnNpb24iLCJwcm9wZXJ0eUtleSIsImFkZFRvVW5zY29wYWJsZXMiLCJJdGVyYXRvcnMiLCJkZWZpbmVJdGVyYXRvciIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJkb25lIiwiQXJndW1lbnRzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJuYW1lcyIsIm1heCIsImludGVnZXIiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsIml0ZXJhdG9yIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFRvU3RyaW5nVGFnIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRk9SQ0VEIiwicHJvbWlzZSIsIkZha2VQcm9taXNlIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsIml0ZXJhYmxlIiwiYWxsIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJwYXJlbnQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZldGNoIiwid3JhcCIsImNhcGFiaWxpdHkiLCIkcHJvbWlzZVJlc29sdmUiLCJ2YWx1ZXMiLCJjb3VudGVyIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiTkFNRSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJJVEVSQVRPUiIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInByb3RvIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsImZpcnN0Iiwic2Vjb25kIiwicG9zaXRpb24iLCJzaXplIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImNvZGVBdCIsIkFycmF5UHJvdG90eXBlIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwib2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCIkZm9yRWFjaCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsImRlc2NyaXB0aW9uIiwic3ltYm9sIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwic2V0dGVyIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsIk5hdGl2ZVN5bWJvbCIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJzeW1ib2xUb1N0cmluZyIsIm5hdGl2ZSIsInJlZ2V4cCIsImRlc2MiLCJwb2ludCIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIm9yaWdpbmFsQXJyYXkiLCJVTlNDT1BBQkxFUyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCJuYXRpdmVDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiY29uc3RydWN0IiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJpbnN0YW5jZSIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsIiRmaWx0ZXIiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwiZmFjdG9yaWVzIiwiYXJnc0xlbmd0aCIsImxpc3QiLCJwYXJ0QXJncyIsIkNPTlNUUlVDVE9SX05BTUUiLCJDb25zdHJ1Y3RvciIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiaXRlcmF0b3JDbG9zZSIsIlJlc3VsdCIsInN0b3BwZWQiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJzdGVwIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsInRvZ2dsZSIsIm5vZGUiLCJtYWNyb3Rhc2siLCJJU19XRUJPU19XRUJLSVQiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImNvbnNvbGUiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJkZWZpbmUiLCJvYmoiLCJlcnIiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiY3JlYXRlUHJvcGVydHkiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwibmF0aXZlU2xpY2UiLCJzdGFydCIsImVuZCIsImZpbiIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJhcnJheUxpa2UiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJFTlRSSUVTIiwiJG1hcCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJsZW4iLCJFIiwiS1ZQRm9ybSIsImV2dCIsIm5ld0tleSIsIm5ld1ZhbCIsInNldEtleSIsInNldFZhbCIsImFkZFJvdyIsImRlbGV0ZVJvdyIsIml0ZW1zIiwibG9nIiwiZXJyb3JzIiwiY2xhc3NOYW1lIiwiaXRlbSIsImRhdGEtdGVzdGlkIiwib25DbGljayIsIm1vdmVVcCIsIm1vdmVEb3duIiwib25DaGFuZ2UiLCJjbGFzcyIsIm9uSXRlbXNDaGFuZ2VkIiwiQ29tcG9uZW50IiwicmVxdWlyZSIsImV4dGVuc2lvbiIsIkt2cEVkaXRvciIsImdldEVsZW1lbnRCeUlkIiwic3RhcnRBdXRvUmVzaXplciIsInNkayIsImZpZWxkVmFsdWUiLCJmaWVsZCIsImdldFZhbHVlIiwib25WYWx1ZUNoYW5nZWQiLCJuZXdWYWx1ZSIsIndhaXRpbmciLCJuZXdJdGVtcyIsInNldFZhbHVlIiwiJGZpbmRJbmRleCIsIlNLSVBTX0hPTEVTIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwidG8iLCJhY3R1YWxTdGFydCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxNQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSyxtQkNsRnJELDhCQUNFLE9BQU9DLEdBQU1BLEVBQUdDLE1BQVFBLE1BQVFELEdBSWxDakMsRUFBT0QsUUFFTG9DLEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWRSxRQUFzQkEsU0FFbkNGLEVBQXFCLGlCQUFSRyxNQUFvQkEsT0FDakNILEVBQXVCLGlCQUFWSSxHQUFzQkEsSUFFbkMsV0FBZSxPQUFPQyxLQUF0QixJQUFvQ0MsU0FBUyxjQUFUQSxLLGtDQ2J0QyxJQUFJRixFQUFTLEVBQVEsR0FDakJHLEVBQVMsRUFBUSxJQUNqQkMsRUFBTSxFQUFRLEdBQ2RDLEVBQU0sRUFBUSxJQUNkQyxFQUFnQixFQUFRLElBQ3hCQyxFQUFvQixFQUFRLElBRTVCQyxFQUF3QkwsRUFBTyxPQUMvQjFCLEVBQVN1QixFQUFPdkIsT0FDaEJnQyxFQUF3QkYsRUFBb0I5QixFQUFTQSxHQUFVQSxFQUFPaUMsZUFBaUJMLEVBRTNGNUMsRUFBT0QsUUFBVSxTQUFVUyxHQU92QixPQU5HbUMsRUFBSUksRUFBdUJ2QyxLQUFXcUMsR0FBdUQsaUJBQS9CRSxFQUFzQnZDLE1BQ25GcUMsR0FBaUJGLEVBQUkzQixFQUFRUixHQUMvQnVDLEVBQXNCdkMsR0FBUVEsRUFBT1IsR0FFckN1QyxFQUFzQnZDLEdBQVF3QyxFQUFzQixVQUFZeEMsSUFFM0R1QyxFQUFzQnZDLEssY0NsQmpDUixFQUFPRCxRQUFVLFNBQVVtRCxHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBT0MsR0FDUCxPQUFPLEssZ0JDSlgsSUFBSVosRUFBUyxFQUFRLEdBQ2pCYSxFQUEyQixFQUFRLElBQW1EQyxFQUN0RkMsRUFBOEIsRUFBUSxHQUN0Q0MsRUFBVyxFQUFRLElBQ25CQyxFQUFZLEVBQVEsSUFDcEJDLEVBQTRCLEVBQVEsSUFDcENDLEVBQVcsRUFBUSxJQWdCdkIxRCxFQUFPRCxRQUFVLFNBQVU0RCxFQUFTQyxHQUNsQyxJQUdZQyxFQUFRckMsRUFBS3NDLEVBQWdCQyxFQUFnQkMsRUFIckRDLEVBQVNOLEVBQVFFLE9BQ2pCSyxFQUFTUCxFQUFRcEIsT0FDakI0QixFQUFTUixFQUFRUyxLQVNyQixHQU5FUCxFQURFSyxFQUNPM0IsRUFDQTRCLEVBQ0E1QixFQUFPMEIsSUFBV1QsRUFBVVMsRUFBUSxLQUVuQzFCLEVBQU8wQixJQUFXLElBQUlwQyxVQUV0QixJQUFLTCxLQUFPb0MsRUFBUSxDQVE5QixHQVBBRyxFQUFpQkgsRUFBT3BDLEdBR3RCc0MsRUFGRUgsRUFBUVUsYUFDVkwsRUFBYVosRUFBeUJTLEVBQVFyQyxLQUNmd0MsRUFBVzlDLE1BQ3BCMkMsRUFBT3JDLElBQ3RCa0MsRUFBU1EsRUFBUzFDLEVBQU15QyxHQUFVRSxFQUFTLElBQU0sS0FBTzNDLEVBQUttQyxFQUFRVyxjQUU1Q0MsSUFBbkJULEVBQThCLENBQzNDLFVBQVdDLFVBQTBCRCxFQUFnQixTQUNyREwsRUFBMEJNLEVBQWdCRCxJQUd4Q0gsRUFBUWEsTUFBU1YsR0FBa0JBLEVBQWVVLE9BQ3BEbEIsRUFBNEJTLEVBQWdCLFFBQVEsR0FHdERSLEVBQVNNLEVBQVFyQyxFQUFLdUMsRUFBZ0JKLE0sZ0JDbkQxQyxJQUFJYyxFQUFXLEVBQVEsR0FFdkJ6RSxFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixJQUFLd0MsRUFBU3hDLEdBQ1osTUFBTXlDLFVBQVVDLE9BQU8xQyxHQUFNLHFCQUM3QixPQUFPQSxJLGNDTFhqQyxFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLEksY0NEdkQsSUFBSUgsRUFBaUIsR0FBR0EsZUFFeEI5QixFQUFPRCxRQUFVLFNBQVVrQyxFQUFJVCxHQUM3QixPQUFPTSxFQUFlMUIsS0FBSzZCLEVBQUlULEssZ0JDSGpDLElBQUlvRCxFQUFjLEVBQVEsR0FDdEJDLEVBQWlCLEVBQVEsSUFDekJDLEVBQVcsRUFBUSxHQUNuQkMsRUFBYyxFQUFRLElBR3RCQyxFQUFrQnJFLE9BQU9DLGVBSTdCYixFQUFRc0QsRUFBSXVCLEVBQWNJLEVBQWtCLFNBQXdCQyxFQUFHQyxFQUFHQyxHQUl4RSxHQUhBTCxFQUFTRyxHQUNUQyxFQUFJSCxFQUFZRyxHQUFHLEdBQ25CSixFQUFTSyxHQUNMTixFQUFnQixJQUNsQixPQUFPRyxFQUFnQkMsRUFBR0MsRUFBR0MsR0FDN0IsTUFBT2hDLElBQ1QsR0FBSSxRQUFTZ0MsR0FBYyxRQUFTQSxFQUFZLE1BQU1ULFVBQVUsMkJBRWhFLE1BREksVUFBV1MsSUFBWUYsRUFBRUMsR0FBS0MsRUFBV2pFLE9BQ3RDK0QsSSxnQkNuQlQsSUFBSUcsRUFBUSxFQUFRLEdBR3BCcEYsRUFBT0QsU0FBV3FGLEdBQU0sV0FFdEIsT0FBOEUsR0FBdkV6RSxPQUFPQyxlQUFlLEdBQUksRUFBRyxDQUFFRSxJQUFLLFdBQWMsT0FBTyxLQUFRLE8sZ0JDTDFFLElBQUk4RCxFQUFjLEVBQVEsR0FDdEJTLEVBQXVCLEVBQVEsR0FDL0JDLEVBQTJCLEVBQVEsSUFFdkN0RixFQUFPRCxRQUFVNkUsRUFBYyxTQUFVakQsRUFBUUgsRUFBS04sR0FDcEQsT0FBT21FLEVBQXFCaEMsRUFBRTFCLEVBQVFILEVBQUs4RCxFQUF5QixFQUFHcEUsS0FDckUsU0FBVVMsRUFBUUgsRUFBS04sR0FFekIsT0FEQVMsRUFBT0gsR0FBT04sRUFDUFMsSSxnQkNQVCxJQUFJNEQsRUFBZ0IsRUFBUSxJQUN4QkMsRUFBeUIsRUFBUSxJQUVyQ3hGLEVBQU9ELFFBQVUsU0FBVWtDLEdBQ3pCLE9BQU9zRCxFQUFjQyxFQUF1QnZELE0sZ0JDTDlDLElBQUl3RCxFQUFZLEVBQVEsSUFFcEJDLEVBQU14RCxLQUFLd0QsSUFJZjFGLEVBQU9ELFFBQVUsU0FBVTRGLEdBQ3pCLE9BQU9BLEVBQVcsRUFBSUQsRUFBSUQsRUFBVUUsR0FBVyxrQkFBb0IsSSxnQkNQckUsSUFBSUgsRUFBeUIsRUFBUSxJQUlyQ3hGLEVBQU9ELFFBQVUsU0FBVTRGLEdBQ3pCLE9BQU9oRixPQUFPNkUsRUFBdUJHLE0sZ0JDTHZDLElBQUlwRCxFQUFTLEVBQVEsR0FDakJlLEVBQThCLEVBQVEsR0FDdENYLEVBQU0sRUFBUSxHQUNkYSxFQUFZLEVBQVEsSUFDcEJvQyxFQUFnQixFQUFRLElBQ3hCQyxFQUFzQixFQUFRLElBRTlCQyxFQUFtQkQsRUFBb0IvRSxJQUN2Q2lGLEVBQXVCRixFQUFvQkcsUUFDM0NDLEVBQVd0QixPQUFPQSxRQUFRdUIsTUFBTSxXQUVuQ2xHLEVBQU9ELFFBQVUsU0FBVWtGLEVBQUd6RCxFQUFLTixFQUFPeUMsR0FDekMsSUFHSXdDLEVBSEFDLElBQVN6QyxLQUFZQSxFQUFReUMsT0FDN0JDLElBQVMxQyxLQUFZQSxFQUFROUMsV0FDN0J3RCxJQUFjVixLQUFZQSxFQUFRVSxZQUVsQixtQkFBVG5ELElBQ1MsaUJBQVBNLEdBQW9CbUIsRUFBSXpCLEVBQU8sU0FDeENvQyxFQUE0QnBDLEVBQU8sT0FBUU0sSUFFN0MyRSxFQUFRSixFQUFxQjdFLElBQ2xCMEMsU0FDVHVDLEVBQU12QyxPQUFTcUMsRUFBU0ssS0FBbUIsaUJBQVA5RSxFQUFrQkEsRUFBTSxNQUc1RHlELElBQU0xQyxHQUlFNkQsR0FFQS9CLEdBQWVZLEVBQUV6RCxLQUMzQjZFLEdBQVMsVUFGRnBCLEVBQUV6RCxHQUlQNkUsRUFBUXBCLEVBQUV6RCxHQUFPTixFQUNoQm9DLEVBQTRCMkIsRUFBR3pELEVBQUtOLElBVG5DbUYsRUFBUXBCLEVBQUV6RCxHQUFPTixFQUNoQnNDLEVBQVVoQyxFQUFLTixLQVVyQnVCLFNBQVNaLFVBQVcsWUFBWSxXQUNqQyxNQUFzQixtQkFBUlcsTUFBc0JzRCxFQUFpQnRELE1BQU1vQixRQUFVZ0MsRUFBY3BELFUsZ0JDdENyRixJQUFJK0QsRUFBTyxFQUFRLElBQ2ZoRSxFQUFTLEVBQVEsR0FFakJpRSxFQUFZLFNBQVVDLEdBQ3hCLE1BQTBCLG1CQUFaQSxFQUF5QkEsT0FBV2xDLEdBR3BEdkUsRUFBT0QsUUFBVSxTQUFVMkcsRUFBV0MsR0FDcEMsT0FBT0MsVUFBVUMsT0FBUyxFQUFJTCxFQUFVRCxFQUFLRyxLQUFlRixFQUFVakUsRUFBT21FLElBQ3pFSCxFQUFLRyxJQUFjSCxFQUFLRyxHQUFXQyxJQUFXcEUsRUFBT21FLElBQWNuRSxFQUFPbUUsR0FBV0MsSyxnQkNUM0YsSUFBSS9CLEVBQWMsRUFBUSxHQUN0QmtDLEVBQTZCLEVBQVEsSUFDckN4QixFQUEyQixFQUFRLElBQ25DeUIsRUFBa0IsRUFBUSxJQUMxQmhDLEVBQWMsRUFBUSxJQUN0QnBDLEVBQU0sRUFBUSxHQUNka0MsRUFBaUIsRUFBUSxJQUd6Qm1DLEVBQTRCckcsT0FBT3lDLHlCQUl2Q3JELEVBQVFzRCxFQUFJdUIsRUFBY29DLEVBQTRCLFNBQWtDL0IsRUFBR0MsR0FHekYsR0FGQUQsRUFBSThCLEVBQWdCOUIsR0FDcEJDLEVBQUlILEVBQVlHLEdBQUcsR0FDZkwsRUFBZ0IsSUFDbEIsT0FBT21DLEVBQTBCL0IsRUFBR0MsR0FDcEMsTUFBTy9CLElBQ1QsR0FBSVIsRUFBSXNDLEVBQUdDLEdBQUksT0FBT0ksR0FBMEJ3QixFQUEyQnpELEVBQUVqRCxLQUFLNkUsRUFBR0MsR0FBSUQsRUFBRUMsTSxjQ25CN0ZsRixFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixHQUFpQixtQkFBTkEsRUFDVCxNQUFNeUMsVUFBVUMsT0FBTzFDLEdBQU0sc0JBQzdCLE9BQU9BLEksY0NEWGpDLEVBQU9ELFFBQVUsU0FBVWtDLEdBQ3pCLEdBQVVzQyxNQUFOdEMsRUFBaUIsTUFBTXlDLFVBQVUsd0JBQTBCekMsR0FDL0QsT0FBT0EsSSxjQ0pUakMsRUFBT0QsU0FBVSxHLGNDQWpCLElBQUlrSCxFQUFXLEdBQUdBLFNBRWxCakgsRUFBT0QsUUFBVSxTQUFVa0MsR0FDekIsT0FBT2dGLEVBQVM3RyxLQUFLNkIsR0FBSWlGLE1BQU0sR0FBSSxLLDZCQ0hyQyxzZ0JBQUl4RixFQUFFeEIsRUFBRWlILEVBQUVsSCxFQUFFa0IsRUFBRVQsRUFBRUssRUFBRSxHQUFHc0MsRUFBRSxHQUFHK0QsRUFBRSxvRUFBb0UsU0FBUzlHLEVBQUVvQixFQUFFeEIsR0FBRyxJQUFJLElBQUlpSCxLQUFLakgsRUFBRXdCLEVBQUV5RixHQUFHakgsRUFBRWlILEdBQUcsT0FBT3pGLEVBQUUsU0FBU00sRUFBRU4sR0FBRyxJQUFJeEIsRUFBRXdCLEVBQUUyRixXQUFXbkgsR0FBR0EsRUFBRW9ILFlBQVk1RixHQUFHLFNBQVM2RixFQUFFN0YsRUFBRXhCLEVBQUVpSCxHQUFHLElBQUlsSCxFQUFFa0IsRUFBRVQsRUFBRUssRUFBRTZGLFVBQVV2RCxFQUFFLEdBQUcsSUFBSTNDLEtBQUtSLEVBQUUsT0FBT1EsRUFBRVQsRUFBRUMsRUFBRVEsR0FBRyxPQUFPQSxFQUFFUyxFQUFFakIsRUFBRVEsR0FBRzJDLEVBQUUzQyxHQUFHUixFQUFFUSxHQUFHLEdBQUdrRyxVQUFVQyxPQUFPLEVBQUUsSUFBSU0sRUFBRSxDQUFDQSxHQUFHekcsRUFBRSxFQUFFQSxFQUFFa0csVUFBVUMsT0FBT25HLElBQUl5RyxFQUFFSyxLQUFLekcsRUFBRUwsSUFBSSxHQUFHLE1BQU15RyxJQUFJOUQsRUFBRW9FLFNBQVNOLEdBQUcsbUJBQW1CekYsR0FBRyxNQUFNQSxFQUFFZ0csYUFBYSxJQUFJaEgsS0FBS2dCLEVBQUVnRyxrQkFBYSxJQUFTckUsRUFBRTNDLEtBQUsyQyxFQUFFM0MsR0FBR2dCLEVBQUVnRyxhQUFhaEgsSUFBSSxPQUFPaUgsRUFBRWpHLEVBQUUyQixFQUFFcEQsRUFBRWtCLEVBQUUsTUFBTSxTQUFTd0csRUFBRXpILEVBQUVpSCxFQUFFbEgsRUFBRWtCLEVBQUVULEdBQUcsSUFBSUssRUFBRSxDQUFDNkcsS0FBSzFILEVBQUUySCxNQUFNVixFQUFFM0YsSUFBSXZCLEVBQUU2SCxJQUFJM0csRUFBRTRHLElBQUksS0FBS0MsR0FBRyxLQUFLQyxJQUFJLEVBQUVDLElBQUksS0FBS0MsU0FBSSxFQUFPQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsaUJBQVksRUFBT0MsSUFBSSxNQUFNN0gsSUFBSWdCLEVBQUU2RyxJQUFJN0gsR0FBRyxPQUFPLE1BQU1nQixFQUFFOEcsT0FBTzlHLEVBQUU4RyxNQUFNekgsR0FBR0EsRUFBRSxTQUFTMEgsSUFBSSxNQUFNLENBQUNDLFFBQVEsTUFBTSxTQUFTQyxFQUFFakgsR0FBRyxPQUFPQSxFQUFFK0YsU0FBUyxTQUFTMUYsRUFBRUwsRUFBRXhCLEdBQUdzQyxLQUFLcUYsTUFBTW5HLEVBQUVjLEtBQUtvRyxRQUFRMUksRUFBRSxTQUFTSyxFQUFFbUIsRUFBRXhCLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU93QixFQUFFc0csR0FBR3pILEVBQUVtQixFQUFFc0csR0FBR3RHLEVBQUVzRyxHQUFHRCxJQUFJYyxRQUFRbkgsR0FBRyxHQUFHLEtBQUssSUFBSSxJQUFJeUYsRUFBRWpILEVBQUV3QixFQUFFcUcsSUFBSWxCLE9BQU8zRyxJQUFJLEdBQUcsT0FBT2lILEVBQUV6RixFQUFFcUcsSUFBSTdILEtBQUssTUFBTWlILEVBQUVlLElBQUksT0FBT2YsRUFBRWUsSUFBSSxNQUFNLG1CQUFtQnhHLEVBQUVrRyxLQUFLckgsRUFBRW1CLEdBQUcsS0FBSyxTQUFTb0gsRUFBRXBILEdBQUcsSUFBSXhCLEVBQUVpSCxFQUFFLEdBQUcsT0FBT3pGLEVBQUVBLEVBQUVzRyxLQUFLLE1BQU10RyxFQUFFMEcsSUFBSSxDQUFDLElBQUkxRyxFQUFFd0csSUFBSXhHLEVBQUUwRyxJQUFJVyxLQUFLLEtBQUs3SSxFQUFFLEVBQUVBLEVBQUV3QixFQUFFcUcsSUFBSWxCLE9BQU8zRyxJQUFJLEdBQUcsT0FBT2lILEVBQUV6RixFQUFFcUcsSUFBSTdILEtBQUssTUFBTWlILEVBQUVlLElBQUksQ0FBQ3hHLEVBQUV3RyxJQUFJeEcsRUFBRTBHLElBQUlXLEtBQUs1QixFQUFFZSxJQUFJLE1BQU0sT0FBT1ksRUFBRXBILElBQUksU0FBU3NILEVBQUU5SSxLQUFLQSxFQUFFaUksTUFBTWpJLEVBQUVpSSxLQUFJLElBQUtoQixFQUFFSyxLQUFLdEgsS0FBSytJLEVBQUVDLE9BQU8vSCxJQUFJTyxFQUFFeUgsc0JBQXNCaEksRUFBRU8sRUFBRXlILG9CQUFvQmxKLEdBQUdnSixHQUFHLFNBQVNBLElBQUksSUFBSSxJQUFJdkgsRUFBRXVILEVBQUVDLElBQUkvQixFQUFFTixRQUFRbkYsRUFBRXlGLEVBQUVpQyxNQUFLLFNBQVMxSCxFQUFFeEIsR0FBRyxPQUFPd0IsRUFBRTZHLElBQUlOLElBQUkvSCxFQUFFcUksSUFBSU4sT0FBTWQsRUFBRSxHQUFHekYsRUFBRTJILE1BQUssU0FBUzNILEdBQUcsSUFBSXhCLEVBQUVpSCxFQUFFbEgsRUFBRWtCLEVBQUVULEVBQUVLLEVBQUVXLEVBQUV5RyxNQUFNekgsR0FBR1MsR0FBR2pCLEVBQUV3QixHQUFHNkcsS0FBS0wsS0FBS25ILEVBQUViLEVBQUVvSixPQUFPbkMsRUFBRSxJQUFJbEgsRUFBRUssRUFBRSxHQUFHYSxJQUFJb0gsSUFBSXBILEVBQUVvSCxJQUFJLEVBQUVnQixFQUFFeEksRUFBRUksRUFBRWxCLEVBQUVDLEVBQUVzSixTQUFJLElBQVN6SSxFQUFFMEksZ0JBQWdCLE1BQU10SSxFQUFFa0gsSUFBSSxDQUFDM0gsR0FBRyxLQUFLeUcsRUFBRSxNQUFNekcsRUFBRUgsRUFBRVksR0FBR1QsRUFBRVMsRUFBRWtILEtBQUtxQixFQUFFdkMsRUFBRWhHLEdBQUdBLEVBQUUrRyxLQUFLeEgsR0FBR29JLEVBQUUzSCxRQUFPLFNBQVNkLEVBQUVxQixFQUFFeEIsRUFBRWlILEVBQUVsSCxFQUFFa0IsRUFBRVQsRUFBRTBHLEVBQUU5RyxFQUFFMEIsRUFBRXVGLEdBQUcsSUFBSWtCLEVBQUUxRyxFQUFFK0csRUFBRUUsRUFBRUMsRUFBRTVJLEVBQUVzSixFQUFFQyxFQUFFM0osR0FBR0EsRUFBRThILEtBQUsxRSxFQUFFNkIsRUFBRTBFLEVBQUUvQyxPQUFPLElBQUlNLEVBQUVZLElBQUksR0FBR1UsRUFBRSxFQUFFQSxFQUFFdkksRUFBRTJHLE9BQU80QixJQUFJLEdBQUcsT0FBT08sRUFBRTdCLEVBQUVZLElBQUlVLEdBQUcsT0FBT08sRUFBRTlJLEVBQUV1SSxLQUFLLGtCQUFrQk8sRUFBRSxLQUFLLGlCQUFpQkEsR0FBRyxpQkFBaUJBLEdBQUcsaUJBQWlCQSxFQUFFckIsRUFBRSxLQUFLcUIsRUFBRSxLQUFLLEtBQUtBLEdBQUdhLE1BQU1DLFFBQVFkLEdBQUdyQixFQUFFZ0IsRUFBRSxDQUFDbEIsU0FBU3VCLEdBQUcsS0FBSyxLQUFLLE1BQU1BLEVBQUVmLElBQUksRUFBRU4sRUFBRXFCLEVBQUVwQixLQUFLb0IsRUFBRW5CLE1BQU1tQixFQUFFeEgsSUFBSSxLQUFLd0gsRUFBRVQsS0FBS1MsR0FBRyxDQUFDLEdBQUdBLEVBQUVoQixHQUFHYixFQUFFNkIsRUFBRWYsSUFBSWQsRUFBRWMsSUFBSSxFQUFFLFFBQVFhLEVBQUVjLEVBQUVuQixLQUFLSyxHQUFHRSxFQUFFeEgsS0FBS3NILEVBQUV0SCxLQUFLd0gsRUFBRXBCLE9BQU9rQixFQUFFbEIsS0FBS2dDLEVBQUVuQixRQUFHLE9BQVksSUFBSTFHLEVBQUUsRUFBRUEsRUFBRW1ELEVBQUVuRCxJQUFJLENBQUMsSUFBSStHLEVBQUVjLEVBQUU3SCxLQUFLaUgsRUFBRXhILEtBQUtzSCxFQUFFdEgsS0FBS3dILEVBQUVwQixPQUFPa0IsRUFBRWxCLEtBQUssQ0FBQ2dDLEVBQUU3SCxRQUFHLEVBQU8sTUFBTStHLEVBQUUsS0FBS1MsRUFBRTdILEVBQUVzSCxFQUFFRixFQUFFQSxHQUFHL0gsRUFBRUksRUFBRVQsRUFBRTBHLEVBQUU5RyxFQUFFMEIsRUFBRXVGLEdBQUcwQixFQUFFRCxFQUFFZCxLQUFLbkcsRUFBRWlILEVBQUVsQixNQUFNZ0IsRUFBRWhCLEtBQUsvRixJQUFJNEgsSUFBSUEsRUFBRSxJQUFJYixFQUFFaEIsS0FBSzZCLEVBQUVuQyxLQUFLc0IsRUFBRWhCLElBQUksS0FBS2tCLEdBQUdXLEVBQUVuQyxLQUFLekYsRUFBRWlILEVBQUVaLEtBQUthLEVBQUVELElBQUksTUFBTUMsR0FBRyxNQUFNNUksSUFBSUEsRUFBRTRJLEdBQUcsbUJBQW1CRCxFQUFFcEIsTUFBTSxNQUFNb0IsRUFBRWpCLEtBQUtpQixFQUFFakIsTUFBTWUsRUFBRWYsSUFBSWlCLEVBQUViLElBQUluRyxFQUFFK0gsRUFBRWYsRUFBRWhILEVBQUVOLEdBQUdNLEVBQUVnSSxFQUFFdEksRUFBRXNILEVBQUVGLEVBQUVjLEVBQUVYLEVBQUVqSCxHQUFHdUYsR0FBRyxXQUFXSixFQUFFUyxLQUFLLG1CQUFtQlQsRUFBRVMsT0FBT1QsRUFBRWdCLElBQUluRyxHQUFHTixFQUFFUixNQUFNLElBQUljLEdBQUc4RyxFQUFFWixLQUFLbEcsR0FBR0EsRUFBRXFGLFlBQVkzRixJQUFJTSxFQUFFekIsRUFBRXVJLElBQUksSUFBSTNCLEVBQUVlLElBQUk3SCxFQUFFb0ksRUFBRXZELEVBQUV1RCxLQUFLLE1BQU1tQixFQUFFbkIsS0FBSyxtQkFBbUJ0QixFQUFFUyxNQUFNLE1BQU1nQyxFQUFFbkIsR0FBR1AsS0FBSzBCLEVBQUVuQixHQUFHUCxLQUFLZixFQUFFZ0IsTUFBTWhCLEVBQUVnQixJQUFJNUgsRUFBRU4sRUFBRXdJLEVBQUUsSUFBSXdCLEVBQUVMLEVBQUVuQixHQUFHbUIsRUFBRW5CLEtBQUssR0FBR2tCLEVBQUUsSUFBSWxCLEVBQUUsRUFBRUEsRUFBRWtCLEVBQUU5QyxPQUFPNEIsSUFBSXlCLEVBQUVQLEVBQUVsQixHQUFHa0IsSUFBSWxCLEdBQUdrQixJQUFJbEIsSUFBSSxTQUFTc0IsRUFBRXJJLEVBQUV4QixFQUFFaUgsR0FBRyxJQUFJbEgsRUFBRWtCLEVBQUUsSUFBSWxCLEVBQUUsRUFBRUEsRUFBRXlCLEVBQUVxRyxJQUFJbEIsT0FBTzVHLEtBQUtrQixFQUFFTyxFQUFFcUcsSUFBSTlILE1BQU1rQixFQUFFNkcsR0FBR3RHLEVBQUV4QixFQUFFLG1CQUFtQmlCLEVBQUV5RyxLQUFLbUMsRUFBRTVJLEVBQUVqQixFQUFFaUgsR0FBRzZDLEVBQUU3QyxFQUFFaEcsRUFBRUEsRUFBRU8sRUFBRXFHLElBQUk1RyxFQUFFK0csSUFBSWhJLElBQUksT0FBT0EsRUFBRSxTQUFTeUosRUFBRWpJLEVBQUV4QixHQUFHLE9BQU9BLEVBQUVBLEdBQUcsR0FBRyxNQUFNd0IsR0FBRyxrQkFBa0JBLElBQUltSSxNQUFNQyxRQUFRcEksR0FBR0EsRUFBRTJILE1BQUssU0FBUzNILEdBQUdpSSxFQUFFakksRUFBRXhCLE1BQUtBLEVBQUVzSCxLQUFLOUYsSUFBSXhCLEVBQUUsU0FBUzhKLEVBQUV0SSxFQUFFeEIsRUFBRWlILEVBQUVsSCxFQUFFa0IsRUFBRVQsR0FBRyxJQUFJSyxFQUFFc0MsRUFBRStELEVBQUUsUUFBRyxJQUFTbEgsRUFBRWlJLElBQUlwSCxFQUFFYixFQUFFaUksSUFBSWpJLEVBQUVpSSxTQUFJLE9BQVksR0FBRyxNQUFNaEIsR0FBR2hHLEdBQUdULEdBQUcsTUFBTVMsRUFBRWtHLFdBQVczRixFQUFFLEdBQUcsTUFBTWhCLEdBQUdBLEVBQUUyRyxhQUFhM0YsRUFBRUEsRUFBRXlJLFlBQVloSixHQUFHSixFQUFFLFNBQVMsQ0FBQyxJQUFJc0MsRUFBRTNDLEVBQUUwRyxFQUFFLEdBQUcvRCxFQUFFQSxFQUFFK0csY0FBY2hELEVBQUVuSCxFQUFFNEcsT0FBT08sR0FBRyxFQUFFLEdBQUcvRCxHQUFHbEMsRUFBRSxNQUFNTyxFQUFFQSxFQUFFMkksYUFBYWxKLEVBQUVULEdBQUdLLEVBQUVMLEVBQUUsWUFBTyxJQUFTSyxFQUFFQSxFQUFFSSxFQUFFaUosWUFBdU8sU0FBU2xGLEVBQUV4RCxFQUFFeEIsRUFBRWlILEdBQUcsTUFBTWpILEVBQUUsR0FBR3dCLEVBQUU0SSxZQUFZcEssRUFBRWlILEdBQUd6RixFQUFFeEIsR0FBRyxNQUFNaUgsRUFBRSxHQUFHLGlCQUFpQkEsR0FBR0MsRUFBRW1ELEtBQUtySyxHQUFHaUgsRUFBRUEsRUFBRSxLQUFLLFNBQVNxRCxFQUFFOUksRUFBRXhCLEVBQUVpSCxFQUFFbEgsRUFBRWtCLEdBQUcsSUFBSVQsRUFBRWdCLEVBQUUsR0FBRyxVQUFVeEIsRUFBRSxHQUFHLGlCQUFpQmlILEVBQUV6RixFQUFFK0ksTUFBTUMsUUFBUXZELE1BQU0sQ0FBQyxHQUFHLGlCQUFpQmxILElBQUl5QixFQUFFK0ksTUFBTUMsUUFBUXpLLEVBQUUsSUFBSUEsRUFBRSxJQUFJQyxLQUFLRCxFQUFFa0gsR0FBR2pILEtBQUtpSCxHQUFHakMsRUFBRXhELEVBQUUrSSxNQUFNdkssRUFBRSxJQUFJLEdBQUdpSCxFQUFFLElBQUlqSCxLQUFLaUgsRUFBRWxILEdBQUdrSCxFQUFFakgsS0FBS0QsRUFBRUMsSUFBSWdGLEVBQUV4RCxFQUFFK0ksTUFBTXZLLEVBQUVpSCxFQUFFakgsU0FBUyxHQUFHLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLEdBQUdRLEVBQUVSLEtBQUtBLEVBQUVBLEVBQUV5SyxRQUFRLFdBQVcsS0FBS3pLLEVBQUVBLEVBQUUwSyxnQkFBZ0JsSixFQUFFeEIsRUFBRTBLLGNBQWMxRCxNQUFNLEdBQUdoSCxFQUFFZ0gsTUFBTSxHQUFHeEYsRUFBRXhCLElBQUl3QixFQUFFeEIsRUFBRSxJQUFJd0IsRUFBRXhCLEVBQUVBLEVBQUVRLEdBQUd5RyxFQUFFQSxFQUFFbEgsR0FBR3lCLEVBQUVtSixpQkFBaUIzSyxFQUFFUSxFQUFFb0ssRUFBRUMsRUFBRXJLLEdBQUdnQixFQUFFc0osb0JBQW9COUssRUFBRVEsRUFBRW9LLEVBQUVDLEVBQUVySyxRQUFRLEdBQUcsNEJBQTRCUixFQUFFLENBQUMsR0FBR2lCLEVBQUVqQixFQUFFQSxFQUFFeUssUUFBUSxhQUFhLEtBQUtBLFFBQVEsU0FBUyxVQUFVLEdBQUcsU0FBU3pLLEdBQUcsU0FBU0EsR0FBRyxTQUFTQSxHQUFHLGFBQWFBLEdBQUcsYUFBYUEsR0FBR0EsS0FBS3dCLEVBQUUsSUFBSUEsRUFBRXhCLEdBQUcsTUFBTWlILEVBQUUsR0FBR0EsRUFBRSxNQUFNekYsRUFBRSxNQUFNQSxJQUFJLG1CQUFtQnlGLElBQUksTUFBTUEsS0FBSSxJQUFLQSxHQUFHLE1BQU1qSCxFQUFFLElBQUksTUFBTUEsRUFBRSxJQUFJd0IsRUFBRXVKLGFBQWEvSyxFQUFFaUgsR0FBR3pGLEVBQUV3SixnQkFBZ0JoTCxLQUFLLFNBQVM2SyxFQUFFN0ssR0FBR3NDLEtBQUt0QyxFQUFFQSxFQUFFMEgsTUFBSyxHQUFJbEcsRUFBRXlKLE1BQU16SixFQUFFeUosTUFBTWpMLEdBQUdBLEdBQUcsU0FBUzRLLEVBQUU1SyxHQUFHc0MsS0FBS3RDLEVBQUVBLEVBQUUwSCxNQUFLLEdBQUlsRyxFQUFFeUosTUFBTXpKLEVBQUV5SixNQUFNakwsR0FBR0EsR0FBRyxTQUFTcUosRUFBRXJKLEVBQUVpSCxFQUFFbEgsRUFBRWtCLEVBQUVULEVBQUVLLEVBQUVzQyxFQUFFK0QsRUFBRXBGLEdBQUcsSUFBSXVGLEVBQUVJLEVBQUVjLEVBQUVsSSxFQUFFdUksRUFBRUUsRUFBRUMsRUFBRWMsRUFBRUosRUFBRUssRUFBRUosRUFBRTFFLEVBQUVpQyxFQUFFUyxLQUFLLFFBQUcsSUFBU1QsRUFBRW1CLFlBQVksT0FBTyxLQUFLLE1BQU1ySSxFQUFFb0ksTUFBTXJHLEVBQUUvQixFQUFFb0ksSUFBSWpCLEVBQUVELEVBQUVlLElBQUlqSSxFQUFFaUksSUFBSWYsRUFBRWtCLElBQUksS0FBS3RILEVBQUUsQ0FBQ3FHLEtBQUtHLEVBQUU3RixFQUFFdUcsTUFBTVYsRUFBRUosR0FBRyxJQUFJekYsRUFBRSxHQUFHLG1CQUFtQndELEVBQUUsQ0FBQyxHQUFHNkUsRUFBRTVDLEVBQUVVLE1BQU04QixHQUFHcEMsRUFBRXJDLEVBQUVrRyxjQUFjakssRUFBRW9HLEVBQUVhLEtBQUs0QixFQUFFekMsRUFBRW9DLEVBQUVBLEVBQUU5QixNQUFNM0csTUFBTXFHLEVBQUVTLEdBQUc3RyxFQUFFbEIsRUFBRW1JLElBQUlhLEdBQUd0QixFQUFFUixFQUFFaUIsSUFBSW5JLEVBQUVtSSxLQUFLSixHQUFHTCxFQUFFMEQsS0FBSyxjQUFjbkcsR0FBR0EsRUFBRXJELFVBQVV5SixPQUFPbkUsRUFBRWlCLElBQUlULEVBQUUsSUFBSXpDLEVBQUU2RSxFQUFFQyxJQUFJN0MsRUFBRWlCLElBQUlULEVBQUUsSUFBSTVGLEVBQUVnSSxFQUFFQyxHQUFHckMsRUFBRVcsWUFBWXBELEVBQUV5QyxFQUFFMkQsT0FBT0MsR0FBRzVCLEdBQUdBLEVBQUU2QixJQUFJN0QsR0FBR0EsRUFBRUUsTUFBTWtDLEVBQUVwQyxFQUFFeEIsUUFBUXdCLEVBQUV4QixNQUFNLElBQUl3QixFQUFFaUIsUUFBUW9CLEVBQUVyQyxFQUFFNkIsSUFBSXJJLEVBQUVzSCxFQUFFZCxFQUFFUSxLQUFJLEVBQUdSLEVBQUVVLElBQUksSUFBSSxNQUFNVixFQUFFOEQsTUFBTTlELEVBQUU4RCxJQUFJOUQsRUFBRXhCLE9BQU8sTUFBTWpCLEVBQUV3RywyQkFBMkIvRCxFQUFFOEQsS0FBSzlELEVBQUV4QixRQUFRd0IsRUFBRThELElBQUluTCxFQUFFLEdBQUdxSCxFQUFFOEQsTUFBTW5MLEVBQUVxSCxFQUFFOEQsSUFBSXZHLEVBQUV3Ryx5QkFBeUIzQixFQUFFcEMsRUFBRThELE9BQU9sTCxFQUFFb0gsRUFBRUUsTUFBTWlCLEVBQUVuQixFQUFFeEIsTUFBTXNDLEVBQUUsTUFBTXZELEVBQUV3RywwQkFBMEIsTUFBTS9ELEVBQUVnRSxvQkFBb0JoRSxFQUFFZ0UscUJBQXFCLE1BQU1oRSxFQUFFaUUsbUJBQW1CakUsRUFBRVUsSUFBSWIsS0FBS0csRUFBRWlFLHVCQUF1QixDQUFDLEdBQUcsTUFBTTFHLEVBQUV3RywwQkFBMEIzQixJQUFJeEosR0FBRyxNQUFNb0gsRUFBRWtFLDJCQUEyQmxFLEVBQUVrRSwwQkFBMEI5QixFQUFFQyxJQUFJckMsRUFBRU8sS0FBSyxNQUFNUCxFQUFFbUUsd0JBQXVCLElBQUtuRSxFQUFFbUUsc0JBQXNCL0IsRUFBRXBDLEVBQUU4RCxJQUFJekIsSUFBSTdDLEVBQUVvQixNQUFNdEksRUFBRXNJLElBQUksQ0FBQ1osRUFBRUUsTUFBTWtDLEVBQUVwQyxFQUFFeEIsTUFBTXdCLEVBQUU4RCxJQUFJdEUsRUFBRW9CLE1BQU10SSxFQUFFc0ksTUFBTVosRUFBRVEsS0FBSSxHQUFJUixFQUFFWSxJQUFJcEIsRUFBRUEsRUFBRWUsSUFBSWpJLEVBQUVpSSxJQUFJZixFQUFFWSxJQUFJOUgsRUFBRThILElBQUlaLEVBQUVZLElBQUlnRSxTQUFRLFNBQVNySyxHQUFHQSxJQUFJQSxFQUFFc0csR0FBR2IsTUFBS1EsRUFBRVUsSUFBSXhCLFFBQVF4RCxFQUFFbUUsS0FBS0csR0FBRyxNQUFNakcsRUFBRSxNQUFNaUcsRUFBRXFFLHFCQUFxQnJFLEVBQUVxRSxvQkFBb0JqQyxFQUFFcEMsRUFBRThELElBQUl6QixHQUFHLE1BQU1yQyxFQUFFc0Usb0JBQW9CdEUsRUFBRVUsSUFBSWIsTUFBSyxXQUFXRyxFQUFFc0UsbUJBQW1CMUwsRUFBRXVJLEVBQUVFLE1BQUtyQixFQUFFaUIsUUFBUW9CLEVBQUVyQyxFQUFFRSxNQUFNa0MsRUFBRXBDLEVBQUV4QixNQUFNd0IsRUFBRThELEtBQUtsRSxFQUFFN0YsRUFBRXdILE1BQU0zQixFQUFFSixHQUFHUSxFQUFFUSxLQUFJLEVBQUdSLEVBQUVZLElBQUlwQixFQUFFUSxFQUFFMkIsSUFBSXBKLEVBQUVxSCxFQUFFSSxFQUFFMkQsT0FBTzNELEVBQUVFLE1BQU1GLEVBQUV4QixNQUFNd0IsRUFBRWlCLFNBQVNqQixFQUFFeEIsTUFBTXdCLEVBQUU4RCxJQUFJLE1BQU05RCxFQUFFdUUsa0JBQWtCL0ssRUFBRWIsRUFBRUEsRUFBRSxHQUFHYSxHQUFHd0csRUFBRXVFLG9CQUFvQnpELEdBQUcsTUFBTWQsRUFBRXdFLDBCQUEwQm5ELEVBQUVyQixFQUFFd0Usd0JBQXdCNUwsRUFBRXVJLElBQUljLEVBQUUsTUFBTXJDLEdBQUdBLEVBQUVLLE9BQU9lLEdBQUcsTUFBTXBCLEVBQUUvRixJQUFJK0YsRUFBRU0sTUFBTUosU0FBU0YsRUFBRWxILEVBQUVILEVBQUUySixNQUFNQyxRQUFRRixHQUFHQSxFQUFFLENBQUNBLEdBQUd6QyxFQUFFbEgsRUFBRWtCLEVBQUVULEVBQUVLLEVBQUVzQyxFQUFFK0QsRUFBRXBGLEdBQUcyRixFQUFFb0IsS0FBSzVCLEVBQUVlLElBQUlmLEVBQUVrQixJQUFJLEtBQUtWLEVBQUVVLElBQUl4QixRQUFReEQsRUFBRW1FLEtBQUtHLEdBQUdzQixJQUFJdEIsRUFBRTBELElBQUkxRCxFQUFFSyxHQUFHLE1BQU1MLEVBQUVPLEtBQUksT0FBUSxNQUFNbkgsR0FBR29HLEVBQUVvQixNQUFNdEksRUFBRXNJLEtBQUtwQixFQUFFWSxJQUFJOUgsRUFBRThILElBQUlaLEVBQUVlLElBQUlqSSxFQUFFaUksS0FBS2YsRUFBRWUsSUFBSWtFLEVBQUVuTSxFQUFFaUksSUFBSWYsRUFBRWxILEVBQUVrQixFQUFFVCxFQUFFSyxFQUFFc0MsRUFBRXJCLElBQUl1RixFQUFFN0YsRUFBRTJLLFNBQVM5RSxFQUFFSixHQUFHLE1BQU1qSCxHQUFHaUgsRUFBRW9CLElBQUksTUFBTXZHLEdBQUcsTUFBTWpCLEtBQUtvRyxFQUFFZSxJQUFJZCxFQUFFRCxFQUFFa0IsTUFBTXJHLEVBQUVqQixFQUFFQSxFQUFFOEgsUUFBUXpCLElBQUksTUFBTTFGLEVBQUV3RyxJQUFJaEksRUFBRWlILEVBQUVsSCxJQUFJLFNBQVN5SixFQUFFeEosRUFBRWlILEdBQUd6RixFQUFFMEcsS0FBSzFHLEVBQUUwRyxJQUFJakIsRUFBRWpILEdBQUdBLEVBQUVtSixNQUFLLFNBQVNsQyxHQUFHLElBQUlqSCxFQUFFaUgsRUFBRWtCLElBQUlsQixFQUFFa0IsSUFBSSxHQUFHbkksRUFBRW1KLE1BQUssU0FBUzNILEdBQUdBLEVBQUV0QixLQUFLK0csTUFBSyxNQUFNakgsR0FBR3dCLEVBQUV3RyxJQUFJaEksRUFBRWlILEVBQUVvQixTQUFRLFNBQVM2RCxFQUFFMUssRUFBRXhCLEVBQUVpSCxFQUFFbEgsRUFBRWtCLEVBQUVULEVBQUUwRyxFQUFFOUcsR0FBRyxJQUFJaUgsRUFBRUksRUFBRWMsRUFBRUUsRUFBRTVHLEVBQUVvRixFQUFFVSxNQUFNdEgsRUFBRUwsRUFBRTJILE1BQU1pQixFQUFFNUksRUFBRTBILEtBQUtvQixFQUFFLEVBQUUsR0FBRyxRQUFRRixJQUFJM0gsR0FBRSxHQUFJLE1BQU1ULEVBQUUsS0FBS3NJLEVBQUV0SSxFQUFFbUcsT0FBT21DLElBQUksSUFBSXpCLEVBQUU3RyxFQUFFc0ksTUFBTXpCLElBQUk3RixJQUFJb0gsRUFBRXZCLEVBQUUrRSxXQUFXeEQsRUFBRSxHQUFHdkIsRUFBRWdGLFdBQVcsQ0FBQzdLLEVBQUU2RixFQUFFN0csRUFBRXNJLEdBQUcsS0FBSyxNQUFNLEdBQUcsTUFBTXRILEVBQUUsQ0FBQyxHQUFHLE9BQU9vSCxFQUFFLE9BQU8wRCxTQUFTQyxlQUFlbE0sR0FBR21CLEVBQUVQLEVBQUVxTCxTQUFTRSxnQkFBZ0IsNkJBQTZCNUQsR0FBRzBELFNBQVNHLGNBQWM3RCxFQUFFdkksRUFBRXFNLElBQUlyTSxHQUFHRyxFQUFFLEtBQUtKLEdBQUUsRUFBRyxHQUFHLE9BQU93SSxFQUFFL0csSUFBSXhCLEdBQUdELEdBQUdvQixFQUFFbUwsT0FBT3RNLElBQUltQixFQUFFbUwsS0FBS3RNLE9BQU8sQ0FBQyxHQUFHRyxFQUFFQSxHQUFHMkMsRUFBRTZELE1BQU05RyxLQUFLc0IsRUFBRW9MLFlBQVluRixHQUFHNUYsRUFBRW9GLEVBQUVVLE9BQU85RyxHQUFHZ00sd0JBQXdCdEUsRUFBRWxJLEVBQUV3TSx5QkFBeUJ6TSxFQUFFLENBQUMsR0FBRyxNQUFNSSxFQUFFLElBQUlxQixFQUFFLEdBQUc0RyxFQUFFLEVBQUVBLEVBQUVqSCxFQUFFc0wsV0FBV25HLE9BQU84QixJQUFJNUcsRUFBRUwsRUFBRXNMLFdBQVdyRSxHQUFHbkksTUFBTWtCLEVBQUVzTCxXQUFXckUsR0FBR3pILE9BQU91SCxHQUFHZCxLQUFLYyxJQUFJZCxHQUFHYyxFQUFFd0UsUUFBUXRGLEVBQUVzRixRQUFReEUsRUFBRXdFLFNBQVN2TCxFQUFFd0wsYUFBYXhMLEVBQUV3TCxVQUFVekUsR0FBR0EsRUFBRXdFLFFBQVEsS0FBSyxHQUFoNUgsU0FBV3ZMLEVBQUV4QixFQUFFaUgsRUFBRWxILEVBQUVrQixHQUFHLElBQUlULEVBQUUsSUFBSUEsS0FBS3lHLEVBQUUsYUFBYXpHLEdBQUcsUUFBUUEsR0FBR0EsS0FBS1IsR0FBR3NLLEVBQUU5SSxFQUFFaEIsRUFBRSxLQUFLeUcsRUFBRXpHLEdBQUdULEdBQUcsSUFBSVMsS0FBS1IsRUFBRWlCLEdBQUcsbUJBQW1CakIsRUFBRVEsSUFBSSxhQUFhQSxHQUFHLFFBQVFBLEdBQUcsVUFBVUEsR0FBRyxZQUFZQSxHQUFHeUcsRUFBRXpHLEtBQUtSLEVBQUVRLElBQUk4SixFQUFFOUksRUFBRWhCLEVBQUVSLEVBQUVRLEdBQUd5RyxFQUFFekcsR0FBR1QsR0FBMnJIMkosQ0FBRWxJLEVBQUVuQixFQUFFd0IsRUFBRVosRUFBRWIsR0FBR21JLEVBQUV2SSxFQUFFNkgsSUFBSSxRQUFRLEdBQUdpQixFQUFFOUksRUFBRTJILE1BQU1KLFNBQVNwSCxFQUFFcUIsRUFBRW1JLE1BQU1DLFFBQVFkLEdBQUdBLEVBQUUsQ0FBQ0EsR0FBRzlJLEVBQUVpSCxFQUFFbEgsRUFBRWtCLEdBQUcsa0JBQWtCMkgsRUFBRXBJLEVBQUUwRyxFQUFFMUYsRUFBRXlMLFdBQVc3TSxHQUFHLE1BQU1JLEVBQUUsSUFBSXNJLEVBQUV0SSxFQUFFbUcsT0FBT21DLEtBQUssTUFBTXRJLEVBQUVzSSxJQUFJaEgsRUFBRXRCLEVBQUVzSSxJQUFJMUksSUFBSSxVQUFVQyxRQUFHLEtBQVV5SSxFQUFFekksRUFBRVcsU0FBUzhILElBQUl0SCxFQUFFUixPQUFPLGFBQWE0SCxJQUFJRSxJQUFJd0IsRUFBRTlJLEVBQUUsUUFBUXNILEVBQUVqSCxFQUFFYixPQUFNLEdBQUksWUFBWVgsUUFBRyxLQUFVeUksRUFBRXpJLEVBQUU2TSxVQUFVcEUsSUFBSXRILEVBQUUwTCxTQUFTNUMsRUFBRTlJLEVBQUUsVUFBVXNILEVBQUVqSCxFQUFFcUwsU0FBUSxJQUFLLE9BQU8xTCxFQUFFLFNBQVN3SSxFQUFFaEssRUFBRWlILEVBQUVsSCxHQUFHLElBQUksbUJBQW1CQyxFQUFFQSxFQUFFaUgsR0FBR2pILEVBQUV3SSxRQUFRdkIsRUFBRSxNQUFNakgsR0FBR3dCLEVBQUV3RyxJQUFJaEksRUFBRUQsSUFBSSxTQUFTZ0ssRUFBRS9KLEVBQUVpSCxFQUFFbEgsR0FBRyxJQUFJa0IsRUFBRVQsRUFBRUssRUFBRSxHQUFHVyxFQUFFMkwsU0FBUzNMLEVBQUUyTCxRQUFRbk4sSUFBSWlCLEVBQUVqQixFQUFFNEgsT0FBTzNHLEVBQUV1SCxTQUFTdkgsRUFBRXVILFVBQVV4SSxFQUFFZ0ksS0FBS2dDLEVBQUUvSSxFQUFFLEtBQUtnRyxJQUFJbEgsR0FBRyxtQkFBbUJDLEVBQUUwSCxPQUFPM0gsRUFBRSxPQUFPUyxFQUFFUixFQUFFZ0ksTUFBTWhJLEVBQUVnSSxJQUFJaEksRUFBRWlJLFNBQUksRUFBTyxPQUFPaEgsRUFBRWpCLEVBQUVrSSxLQUFLLENBQUMsR0FBR2pILEVBQUVtTSxxQkFBcUIsSUFBSW5NLEVBQUVtTSx1QkFBdUIsTUFBTXBOLEdBQUd3QixFQUFFd0csSUFBSWhJLEVBQUVpSCxHQUFHaEcsRUFBRTRILEtBQUs1SCxFQUFFbUksSUFBSSxLQUFLLEdBQUduSSxFQUFFakIsRUFBRTZILElBQUksSUFBSWhILEVBQUUsRUFBRUEsRUFBRUksRUFBRTBGLE9BQU85RixJQUFJSSxFQUFFSixJQUFJa0osRUFBRTlJLEVBQUVKLEdBQUdvRyxFQUFFbEgsR0FBRyxNQUFNUyxHQUFHc0IsRUFBRXRCLEdBQUcsU0FBUzZLLEVBQUU3SixFQUFFeEIsRUFBRWlILEdBQUcsT0FBTzNFLEtBQUs4RixZQUFZNUcsRUFBRXlGLEdBQUcsU0FBU29HLEVBQUVyTixFQUFFaUgsRUFBRWxILEdBQUcsSUFBSWtCLEVBQUVULEVBQUUwRyxFQUFFMUYsRUFBRXNHLElBQUl0RyxFQUFFc0csR0FBRzlILEVBQUVpSCxHQUFHekcsR0FBR1MsRUFBRSxtQkFBbUJsQixHQUFHLEtBQUtBLEdBQUdBLEVBQUU4SCxLQUFLWixFQUFFWSxJQUFJWCxFQUFFLEdBQUdtQyxFQUFFcEMsRUFBRWpILElBQUlpQixHQUFHbEIsR0FBR2tILEdBQUdZLElBQUlSLEVBQUVvQixFQUFFLEtBQUssQ0FBQ3pJLElBQUlRLEdBQUdLLEVBQUVBLE9BQUUsSUFBU29HLEVBQUVzQyxpQkFBaUJ0SSxHQUFHbEIsRUFBRSxDQUFDQSxHQUFHUyxFQUFFLEtBQUt5RyxFQUFFZ0csV0FBVzlKLEVBQUU2RCxNQUFNOUcsS0FBSytHLEVBQUUyRixZQUFZLEtBQUsxRixHQUFHakcsR0FBR2xCLEVBQUVBLEVBQUVTLEVBQUVBLEVBQUV3SCxJQUFJZixFQUFFZ0csV0FBV2hNLEdBQUd1SSxFQUFFdEMsRUFBRWxILEdBQUcsU0FBUytFLEVBQUV2RCxFQUFFeEIsR0FBR3FOLEVBQUU3TCxFQUFFeEIsRUFBRStFLEdBQUcsU0FBU3VJLEVBQUU5TCxFQUFFeEIsRUFBRWlILEdBQUcsSUFBSWxILEVBQUVrQixFQUFFVCxFQUFFSyxFQUFFNkYsVUFBVXZELEVBQUUvQyxFQUFFLEdBQUdvQixFQUFFbUcsT0FBTyxJQUFJbkgsS0FBS1IsRUFBRSxPQUFPUSxFQUFFVCxFQUFFQyxFQUFFUSxHQUFHLE9BQU9BLEVBQUVTLEVBQUVqQixFQUFFUSxHQUFHMkMsRUFBRTNDLEdBQUdSLEVBQUVRLEdBQUcsR0FBR2tHLFVBQVVDLE9BQU8sRUFBRSxJQUFJTSxFQUFFLENBQUNBLEdBQUd6RyxFQUFFLEVBQUVBLEVBQUVrRyxVQUFVQyxPQUFPbkcsSUFBSXlHLEVBQUVLLEtBQUt6RyxFQUFFTCxJQUFJLE9BQU8sTUFBTXlHLElBQUk5RCxFQUFFb0UsU0FBU04sR0FBR1EsRUFBRWpHLEVBQUVrRyxLQUFLdkUsRUFBRXBELEdBQUd5QixFQUFFRixJQUFJTCxHQUFHTyxFQUFFb0csSUFBSSxNQUFNLFNBQVMyRixFQUFFL0wsRUFBRXhCLEdBQUcsSUFBSWlILEVBQUUsQ0FBQ2lCLElBQUlsSSxFQUFFLE9BQU9RLElBQUlzSCxHQUFHdEcsRUFBRWdNLFNBQVMsU0FBU2hNLEVBQUV4QixHQUFHLE9BQU93QixFQUFFK0YsU0FBU3ZILElBQUl5TixTQUFTLFNBQVNqTSxHQUFHLElBQUl5RixFQUFFbEgsRUFBRSxPQUFPdUMsS0FBSzBKLGtCQUFrQi9FLEVBQUUsSUFBSWxILEVBQUUsSUFBSUMsR0FBR3NDLEtBQUtBLEtBQUswSixnQkFBZ0IsV0FBVyxPQUFPak0sR0FBR3VDLEtBQUtzSixzQkFBc0IsU0FBU3BLLEdBQUdjLEtBQUtxRixNQUFNM0csUUFBUVEsRUFBRVIsT0FBT2lHLEVBQUVrQyxLQUFLTCxJQUFJeEcsS0FBS2dKLElBQUksU0FBUzlKLEdBQUd5RixFQUFFSyxLQUFLOUYsR0FBRyxJQUFJeEIsRUFBRXdCLEVBQUU0TCxxQkFBcUI1TCxFQUFFNEwscUJBQXFCLFdBQVduRyxFQUFFeUcsT0FBT3pHLEVBQUUwQixRQUFRbkgsR0FBRyxHQUFHeEIsR0FBR0EsRUFBRUUsS0FBS3NCLE1BQU1BLEVBQUUrRixXQUFXLE9BQU9OLEVBQUV3RyxTQUFTM0YsR0FBR2IsRUFBRXVHLFNBQVN0QyxZQUFZakUsRUFBRXpGLEVBQUUsQ0FBQ3dHLElBQUksU0FBU3hHLEVBQUV4QixHQUFHLElBQUksSUFBSWlILEVBQUVsSCxFQUFFa0IsRUFBRWpCLEVBQUVBLEVBQUU4SCxJQUFJLElBQUliLEVBQUVqSCxFQUFFa0ksT0FBT2pCLEVBQUVhLEdBQUcsSUFBSSxJQUFJL0gsRUFBRWtILEVBQUVtQixjQUFjLE1BQU1ySSxFQUFFNE4sMkJBQTJCMUcsRUFBRTJHLFNBQVM3TixFQUFFNE4seUJBQXlCbk0sSUFBSVAsRUFBRWdHLEVBQUVnQixLQUFLLE1BQU1oQixFQUFFNEcsb0JBQW9CNUcsRUFBRTRHLGtCQUFrQnJNLEdBQUdQLEVBQUVnRyxFQUFFZ0IsS0FBS2hILEVBQUUsT0FBT2dHLEVBQUVrRSxJQUFJbEUsRUFBRSxNQUFNakgsR0FBR3dCLEVBQUV4QixFQUFFLE1BQU13QixHQUFHNkcsSUFBSSxHQUFHckksRUFBRSxTQUFTd0IsR0FBRyxPQUFPLE1BQU1BLFFBQUcsSUFBU0EsRUFBRTRHLGFBQWF2RyxFQUFFRixVQUFVaU0sU0FBUyxTQUFTcE0sRUFBRXhCLEdBQUcsSUFBSWlILEVBQUVBLEVBQUUsTUFBTTNFLEtBQUtpSixLQUFLakosS0FBS2lKLE1BQU1qSixLQUFLMkQsTUFBTTNELEtBQUtpSixJQUFJakosS0FBS2lKLElBQUluTCxFQUFFLEdBQUdrQyxLQUFLMkQsT0FBTyxtQkFBbUJ6RSxJQUFJQSxFQUFFQSxFQUFFcEIsRUFBRSxHQUFHNkcsR0FBRzNFLEtBQUtxRixRQUFRbkcsR0FBR3BCLEVBQUU2RyxFQUFFekYsR0FBRyxNQUFNQSxHQUFHYyxLQUFLK0YsTUFBTXJJLEdBQUdzQyxLQUFLNkYsSUFBSWIsS0FBS3RILEdBQUc4SSxFQUFFeEcsUUFBUVQsRUFBRUYsVUFBVW1NLFlBQVksU0FBU3RNLEdBQUdjLEtBQUsrRixNQUFNL0YsS0FBSzBGLEtBQUksRUFBR3hHLEdBQUdjLEtBQUs2RixJQUFJYixLQUFLOUYsR0FBR3NILEVBQUV4RyxRQUFRVCxFQUFFRixVQUFVeUosT0FBTzNDLEVBQUV4QixFQUFFLEdBQUdsSCxFQUFFLG1CQUFtQmdPLFFBQVFBLFFBQVFwTSxVQUFVcU0sS0FBS3pNLEtBQUt3TSxRQUFRRSxXQUFXQyxXQUFXbkYsRUFBRUMsSUFBSSxFQUFFeEksRUFBRSxHLGNDQXJvVFYsRUFBT0QsUUFBVSxTQUFVc08sRUFBUW5OLEdBQ2pDLE1BQU8sQ0FDTEwsYUFBdUIsRUFBVHdOLEdBQ2RDLGVBQXlCLEVBQVRELEdBQ2hCRSxXQUFxQixFQUFURixHQUNabk4sTUFBT0EsSyxnQkNMWCxJQVVJc04sRUFBSzFOLEVBQUs2QixFQVZWOEwsRUFBa0IsRUFBUSxLQUMxQmxNLEVBQVMsRUFBUSxHQUNqQmtDLEVBQVcsRUFBUSxHQUNuQm5CLEVBQThCLEVBQVEsR0FDdENvTCxFQUFZLEVBQVEsR0FDcEJoTSxFQUFTLEVBQVEsSUFDakJpTSxFQUFZLEVBQVEsSUFDcEJDLEVBQWEsRUFBUSxJQUVyQkMsRUFBVXRNLEVBQU9zTSxRQWdCckIsR0FBSUosRUFBaUIsQ0FDbkIsSUFBSUssRUFBUXBNLEVBQU95RCxRQUFVekQsRUFBT3lELE1BQVEsSUFBSTBJLEdBQzVDRSxFQUFRRCxFQUFNaE8sSUFDZGtPLEVBQVFGLEVBQU1uTSxJQUNkc00sRUFBUUgsRUFBTU4sSUFDbEJBLEVBQU0sU0FBVXZNLEVBQUlpTixHQUdsQixPQUZBQSxFQUFTQyxPQUFTbE4sRUFDbEJnTixFQUFNN08sS0FBSzBPLEVBQU83TSxFQUFJaU4sR0FDZkEsR0FFVHBPLEVBQU0sU0FBVW1CLEdBQ2QsT0FBTzhNLEVBQU0zTyxLQUFLME8sRUFBTzdNLElBQU8sSUFFbENVLEVBQU0sU0FBVVYsR0FDZCxPQUFPK00sRUFBTTVPLEtBQUswTyxFQUFPN00sUUFFdEIsQ0FDTCxJQUFJbU4sRUFBUVQsRUFBVSxTQUN0QkMsRUFBV1EsSUFBUyxFQUNwQlosRUFBTSxTQUFVdk0sRUFBSWlOLEdBR2xCLE9BRkFBLEVBQVNDLE9BQVNsTixFQUNsQnFCLEVBQTRCckIsRUFBSW1OLEVBQU9GLEdBQ2hDQSxHQUVUcE8sRUFBTSxTQUFVbUIsR0FDZCxPQUFPeU0sRUFBVXpNLEVBQUltTixHQUFTbk4sRUFBR21OLEdBQVMsSUFFNUN6TSxFQUFNLFNBQVVWLEdBQ2QsT0FBT3lNLEVBQVV6TSxFQUFJbU4sSUFJekJwUCxFQUFPRCxRQUFVLENBQ2Z5TyxJQUFLQSxFQUNMMU4sSUFBS0EsRUFDTDZCLElBQUtBLEVBQ0xxRCxRQWpEWSxTQUFVL0QsR0FDdEIsT0FBT1UsRUFBSVYsR0FBTW5CLEVBQUltQixHQUFNdU0sRUFBSXZNLEVBQUksS0FpRG5Db04sVUE5Q2MsU0FBVUMsR0FDeEIsT0FBTyxTQUFVck4sR0FDZixJQUFJa0UsRUFDSixJQUFLMUIsRUFBU3hDLEtBQVFrRSxFQUFRckYsRUFBSW1CLElBQUsyRixPQUFTMEgsRUFDOUMsTUFBTTVLLFVBQVUsMEJBQTRCNEssRUFBTyxhQUNuRCxPQUFPbkosTSxjQ3JCYm5HLEVBQU9ELFFBQVUsSSxpQkNBakIsSUFBSTBFLEVBQVcsRUFBUSxHQU12QnpFLEVBQU9ELFFBQVUsU0FBVXdQLEVBQU9DLEdBQ2hDLElBQUsvSyxFQUFTOEssR0FBUSxPQUFPQSxFQUM3QixJQUFJRSxFQUFJQyxFQUNSLEdBQUlGLEdBQW9ELG1CQUF4QkMsRUFBS0YsRUFBTXRJLFlBQTRCeEMsRUFBU2lMLEVBQU1ELEVBQUdyUCxLQUFLbVAsSUFBUyxPQUFPRyxFQUM5RyxHQUFtQyxtQkFBdkJELEVBQUtGLEVBQU1JLFdBQTJCbEwsRUFBU2lMLEVBQU1ELEVBQUdyUCxLQUFLbVAsSUFBUyxPQUFPRyxFQUN6RixJQUFLRixHQUFvRCxtQkFBeEJDLEVBQUtGLEVBQU10SSxZQUE0QnhDLEVBQVNpTCxFQUFNRCxFQUFHclAsS0FBS21QLElBQVMsT0FBT0csRUFDL0csTUFBTWhMLFVBQVUsNkMsZ0JDWmxCLElBQUloQyxFQUFTLEVBQVEsSUFDakJFLEVBQU0sRUFBUSxJQUVkZ04sRUFBT2xOLEVBQU8sUUFFbEIxQyxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixPQUFPb08sRUFBS3BPLEtBQVNvTyxFQUFLcE8sR0FBT29CLEVBQUlwQixNLGNDTnZDeEIsRUFBT0QsUUFBVSxJLGNDQWpCLElBQUk4UCxFQUFPM04sS0FBSzJOLEtBQ1pDLEVBQVE1TixLQUFLNE4sTUFJakI5UCxFQUFPRCxRQUFVLFNBQVU0RixHQUN6QixPQUFPb0ssTUFBTXBLLEdBQVlBLEdBQVksR0FBS0EsRUFBVyxFQUFJbUssRUFBUUQsR0FBTWxLLEssZ0JDTnpFLElBQUlxSyxFQUFVLEVBQVEsSUFDbEJ6TixFQUFTLEVBQVEsR0FFckJ2QyxFQUFPRCxRQUFxQyxXQUEzQmlRLEVBQVF6TixFQUFPME4sVSxnQkNIaEMsSUFtRElDLEVBbkRBcEwsRUFBVyxFQUFRLEdBQ25CcUwsRUFBbUIsRUFBUSxLQUMzQkMsRUFBYyxFQUFRLElBQ3RCeEIsRUFBYSxFQUFRLElBQ3JCeUIsRUFBTyxFQUFRLElBQ2ZDLEVBQXdCLEVBQVEsSUFDaEMzQixFQUFZLEVBQVEsSUFNcEI0QixFQUFXNUIsRUFBVSxZQUVyQjZCLEVBQW1CLGFBRW5CQyxFQUFZLFNBQVVDLEdBQ3hCLE1BQU9DLFdBQW1CRCxFQVJuQixjQTJDTEUsRUFBa0IsV0FDcEIsSUFFRVYsRUFBa0IxRCxTQUFTcUUsUUFBVSxJQUFJQyxjQUFjLFlBQ3ZELE1BQU8zTixJQTFCb0IsSUFJekI0TixFQUZBQyxFQXlCSkosRUFBa0JWLEVBcENZLFNBQVVBLEdBQ3hDQSxFQUFnQmUsTUFBTVIsRUFBVSxLQUNoQ1AsRUFBZ0JnQixRQUNoQixJQUFJQyxFQUFPakIsRUFBZ0JrQixhQUFhelEsT0FFeEMsT0FEQXVQLEVBQWtCLEtBQ1hpQixFQStCNkJFLENBQTBCbkIsS0F6QjFEYyxFQUFTVixFQUFzQixXQUc1QjdGLE1BQU02RyxRQUFVLE9BQ3ZCakIsRUFBS2xHLFlBQVk2RyxHQUVqQkEsRUFBT08sSUFBTTVNLE9BTEosZ0JBTVRvTSxFQUFpQkMsRUFBT1EsY0FBY2hGLFVBQ3ZCaUYsT0FDZlYsRUFBZUUsTUFBTVIsRUFBVSxzQkFDL0JNLEVBQWVHLFFBQ1JILEVBQWVXLEdBZ0J0QixJQURBLElBQUk3SyxFQUFTdUosRUFBWXZKLE9BQ2xCQSxZQUFpQitKLEVBQXlCLFVBQUVSLEVBQVl2SixJQUMvRCxPQUFPK0osS0FHVGhDLEVBQVcyQixJQUFZLEVBSXZCdlEsRUFBT0QsUUFBVVksT0FBT1ksUUFBVSxTQUFnQjBELEVBQUcwTSxHQUNuRCxJQUFJQyxFQVFKLE9BUFUsT0FBTjNNLEdBQ0Z1TCxFQUEwQixVQUFJMUwsRUFBU0csR0FDdkMyTSxFQUFTLElBQUlwQixFQUNiQSxFQUEwQixVQUFJLEtBRTlCb0IsRUFBT3JCLEdBQVl0TCxHQUNkMk0sRUFBU2hCLFNBQ01yTSxJQUFmb04sRUFBMkJDLEVBQVN6QixFQUFpQnlCLEVBQVFELEssZ0JDNUV0RSxJQUFJL1EsRUFBaUIsRUFBUSxHQUF1Q3lDLEVBQ2hFVixFQUFNLEVBQVEsR0FHZGtQLEVBRmtCLEVBQVEsRUFFVkMsQ0FBZ0IsZUFFcEM5UixFQUFPRCxRQUFVLFNBQVVrQyxFQUFJOFAsRUFBSzVOLEdBQzlCbEMsSUFBT1UsRUFBSVYsRUFBS2tDLEVBQVNsQyxFQUFLQSxFQUFHSixVQUFXZ1EsSUFDOUNqUixFQUFlcUIsRUFBSTRQLEVBQWUsQ0FBRXZELGNBQWMsRUFBTXBOLE1BQU82USxNLGdCQ1JuRSxJQUFJQyxFQUFVLEVBQVEsSUFDbEJsRCxFQUFRLEVBQVEsS0FFbkI5TyxFQUFPRCxRQUFVLFNBQVV5QixFQUFLTixHQUMvQixPQUFPNE4sRUFBTXROLEtBQVNzTixFQUFNdE4sUUFBaUIrQyxJQUFWckQsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJc0csS0FBSyxDQUN0QnlLLFFBQVMsU0FDVDdRLEtBQU00USxFQUFVLE9BQVMsU0FDekJFLFVBQVcsMEMsZ0JDUmIsSUFBSTFMLEVBQVksRUFBUSxJQUd4QnhHLEVBQU9ELFFBQVUsU0FBVTBQLEVBQUkwQyxFQUFNdEwsR0FFbkMsR0FEQUwsRUFBVWlKLFFBQ0dsTCxJQUFUNE4sRUFBb0IsT0FBTzFDLEVBQy9CLE9BQVE1SSxHQUNOLEtBQUssRUFBRyxPQUFPLFdBQ2IsT0FBTzRJLEVBQUdyUCxLQUFLK1IsSUFFakIsS0FBSyxFQUFHLE9BQU8sU0FBVTVLLEdBQ3ZCLE9BQU9rSSxFQUFHclAsS0FBSytSLEVBQU01SyxJQUV2QixLQUFLLEVBQUcsT0FBTyxTQUFVQSxFQUFHMEIsR0FDMUIsT0FBT3dHLEVBQUdyUCxLQUFLK1IsRUFBTTVLLEVBQUcwQixJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVMUIsRUFBRzBCLEVBQUczSSxHQUM3QixPQUFPbVAsRUFBR3JQLEtBQUsrUixFQUFNNUssRUFBRzBCLEVBQUczSSxJQUcvQixPQUFPLFdBQ0wsT0FBT21QLEVBQUcyQyxNQUFNRCxFQUFNdkwsYyxnQkNyQjFCLElBQUluRixFQUFPLEVBQVEsSUFDZjhELEVBQWdCLEVBQVEsSUFDeEI4TSxFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxJQUNuQkMsRUFBcUIsRUFBUSxJQUU3Qi9LLEVBQU8sR0FBR0EsS0FHVmdMLEVBQWUsU0FBVWxELEdBQzNCLElBQUltRCxFQUFpQixHQUFSbkQsRUFDVG9ELEVBQW9CLEdBQVJwRCxFQUNacUQsRUFBa0IsR0FBUnJELEVBQ1ZzRCxFQUFtQixHQUFSdEQsRUFDWHVELEVBQXdCLEdBQVJ2RCxFQUNoQndELEVBQXdCLEdBQVJ4RCxFQUNoQnlELEVBQW1CLEdBQVJ6RCxHQUFhdUQsRUFDNUIsT0FBTyxTQUFVRyxFQUFPQyxFQUFZZCxFQUFNZSxHQVN4QyxJQVJBLElBT0loUyxFQUFPMFEsRUFQUDNNLEVBQUlvTixFQUFTVyxHQUNiMVEsRUFBT2lELEVBQWNOLEdBQ3JCa08sRUFBZ0IxUixFQUFLd1IsRUFBWWQsRUFBTSxHQUN2Q3RMLEVBQVN5TCxFQUFTaFEsRUFBS3VFLFFBQ3ZCdU0sRUFBUSxFQUNSN1IsRUFBUzJSLEdBQWtCWCxFQUMzQjFPLEVBQVM0TyxFQUFTbFIsRUFBT3lSLEVBQU9uTSxHQUFVNkwsR0FBYUksRUFBZ0J2UixFQUFPeVIsRUFBTyxRQUFLek8sRUFFeEZzQyxFQUFTdU0sRUFBT0EsSUFBUyxJQUFJTCxHQUFZSyxLQUFTOVEsS0FFdERzUCxFQUFTdUIsRUFEVGpTLEVBQVFvQixFQUFLOFEsR0FDaUJBLEVBQU9uTyxHQUNqQ3FLLEdBQ0YsR0FBSW1ELEVBQVE1TyxFQUFPdVAsR0FBU3hCLE9BQ3ZCLEdBQUlBLEVBQVEsT0FBUXRDLEdBQ3ZCLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHLE9BQU9wTyxFQUNmLEtBQUssRUFBRyxPQUFPa1MsRUFDZixLQUFLLEVBQUc1TCxFQUFLcEgsS0FBS3lELEVBQVEzQyxRQUNyQixPQUFRb08sR0FDYixLQUFLLEVBQUcsT0FBTyxFQUNmLEtBQUssRUFBRzlILEVBQUtwSCxLQUFLeUQsRUFBUTNDLEdBSWhDLE9BQU8yUixHQUFpQixFQUFJRixHQUFXQyxFQUFXQSxFQUFXL08sSUFJakU3RCxFQUFPRCxRQUFVLENBR2ZnTSxRQUFTeUcsRUFBYSxHQUd0QmEsSUFBS2IsRUFBYSxHQUdsQmMsT0FBUWQsRUFBYSxHQUdyQm5KLEtBQU1tSixFQUFhLEdBR25CZSxNQUFPZixFQUFhLEdBR3BCZ0IsS0FBTWhCLEVBQWEsR0FHbkJpQixVQUFXakIsRUFBYSxHQUd4QmtCLFVBQVdsQixFQUFhLEssZ0JDdEUxQixJQUFJcE4sRUFBUSxFQUFRLEdBQ2hCNEssRUFBVSxFQUFRLElBRWxCOUosRUFBUSxHQUFHQSxNQUdmbEcsRUFBT0QsUUFBVXFGLEdBQU0sV0FHckIsT0FBUXpFLE9BQU8sS0FBS2dULHFCQUFxQixNQUN0QyxTQUFVMVIsR0FDYixNQUFzQixVQUFmK04sRUFBUS9OLEdBQWtCaUUsRUFBTTlGLEtBQUs2QixFQUFJLElBQU10QixPQUFPc0IsSUFDM0R0QixRLGdCQ1pKLElBTUlpVCxFQUFPM0IsRUFOUDFQLEVBQVMsRUFBUSxHQUNqQnNSLEVBQVksRUFBUSxJQUVwQjVELEVBQVUxTixFQUFPME4sUUFDakI2RCxFQUFXN0QsR0FBV0EsRUFBUTZELFNBQzlCQyxFQUFLRCxHQUFZQSxFQUFTQyxHQUcxQkEsRUFFRjlCLEdBREEyQixFQUFRRyxFQUFHN04sTUFBTSxNQUNELEdBQUswTixFQUFNLEdBQ2xCQyxNQUNURCxFQUFRQyxFQUFVRCxNQUFNLGlCQUNWQSxFQUFNLElBQU0sTUFDeEJBLEVBQVFDLEVBQVVELE1BQU0sb0JBQ2IzQixFQUFVMkIsRUFBTSxJQUkvQjVULEVBQU9ELFFBQVVrUyxJQUFZQSxHLGdCQ25CN0IsSUFBSWpDLEVBQVUsRUFBUSxJQUt0QmhRLEVBQU9ELFFBQVU4SixNQUFNQyxTQUFXLFNBQWlCa0ssR0FDakQsTUFBdUIsU0FBaEJoRSxFQUFRZ0UsSyxnQkNOakIsSUFBSUMsRUFBcUIsRUFBUSxJQUM3QjdELEVBQWMsRUFBUSxJQUsxQnBRLEVBQU9ELFFBQVVZLE9BQU9pUCxNQUFRLFNBQWMzSyxHQUM1QyxPQUFPZ1AsRUFBbUJoUCxFQUFHbUwsSyxpQkNQL0IsSUFBSTdOLEVBQVMsRUFBUSxHQUNqQmtDLEVBQVcsRUFBUSxHQUVuQitILEVBQVdqSyxFQUFPaUssU0FFbEIwSCxFQUFTelAsRUFBUytILElBQWEvSCxFQUFTK0gsRUFBU0csZUFFckQzTSxFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixPQUFPaVMsRUFBUzFILEVBQVNHLGNBQWMxSyxHQUFNLEssZ0JDUi9DLElBQUlNLEVBQVMsRUFBUSxHQUNqQmUsRUFBOEIsRUFBUSxHQUUxQ3RELEVBQU9ELFFBQVUsU0FBVXlCLEVBQUtOLEdBQzlCLElBQ0VvQyxFQUE0QmYsRUFBUWYsRUFBS04sR0FDekMsTUFBT2lDLEdBQ1BaLEVBQU9mLEdBQU9OLEVBQ2QsT0FBT0EsSSxnQkNSWCxJQUFJNE4sRUFBUSxFQUFRLElBRWhCcUYsRUFBbUIxUixTQUFTd0UsU0FHRSxtQkFBdkI2SCxFQUFNbEosZ0JBQ2ZrSixFQUFNbEosY0FBZ0IsU0FBVTNELEdBQzlCLE9BQU9rUyxFQUFpQi9ULEtBQUs2QixLQUlqQ2pDLEVBQU9ELFFBQVUrTyxFQUFNbEosZSxnQkNYdkIsSUFBSXJELEVBQVMsRUFBUSxHQUNqQmlCLEVBQVksRUFBUSxJQUdwQnNMLEVBQVF2TSxFQURDLHVCQUNpQmlCLEVBRGpCLHFCQUNtQyxJQUVoRHhELEVBQU9ELFFBQVUrTyxHLGNDTmpCLElBQUlzRixFQUFLLEVBQ0xDLEVBQVVuUyxLQUFLb1MsU0FFbkJ0VSxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixNQUFPLFVBQVltRCxZQUFlSixJQUFSL0MsRUFBb0IsR0FBS0EsR0FBTyxRQUFVNFMsRUFBS0MsR0FBU3BOLFNBQVMsTSxnQkNKN0YsSUFBSWdOLEVBQXFCLEVBQVEsSUFHN0JyRixFQUZjLEVBQVEsSUFFRzJGLE9BQU8sU0FBVSxhQUs5Q3hVLEVBQVFzRCxFQUFJMUMsT0FBTzZULHFCQUF1QixTQUE2QnZQLEdBQ3JFLE9BQU9nUCxFQUFtQmhQLEVBQUcySixLLGNDUi9CNU8sRUFBT0QsUUFBVSxDQUNmLGNBQ0EsaUJBQ0EsZ0JBQ0EsdUJBQ0EsaUJBQ0EsV0FDQSxZLGdCQ1JGLElBQUkwVSxFQUFVLEVBQVEsSUFDbEJDLEVBQWEsRUFBUSxJQUNyQnRQLEVBQVEsRUFBUSxHQUdwQnBGLEVBQU9ELFVBQVlZLE9BQU9nVSx3QkFBMEJ2UCxHQUFNLFdBRXhELE9BQVFwRSxPQUFPd0QsT0FHWmlRLEVBQXlCLEtBQWZDLEVBQW9CQSxFQUFhLElBQU1BLEVBQWEsUSxnQkNWbkUsSUFBSUUsRUFBYSxFQUFRLElBRXpCNVUsRUFBT0QsUUFBVTZVLEVBQVcsWUFBYSxjQUFnQixJLGdCQ0Z6RCxJQUFJeFAsRUFBUSxFQUFRLEdBQ2hCME0sRUFBa0IsRUFBUSxHQUMxQjRDLEVBQWEsRUFBUSxJQUVyQkcsRUFBVS9DLEVBQWdCLFdBRTlCOVIsRUFBT0QsUUFBVSxTQUFVK1UsR0FJekIsT0FBT0osR0FBYyxLQUFPdFAsR0FBTSxXQUNoQyxJQUFJMlAsRUFBUSxHQUtaLE9BSmtCQSxFQUFNek0sWUFBYyxJQUMxQnVNLEdBQVcsV0FDckIsTUFBTyxDQUFFRyxJQUFLLElBRTJCLElBQXBDRCxFQUFNRCxHQUFhRyxTQUFTRCxTLGdCQ2hCdkMsSUFBSXJTLEVBQU0sRUFBUSxHQUNkMFAsRUFBVyxFQUFRLElBQ25CMUQsRUFBWSxFQUFRLElBQ3BCdUcsRUFBMkIsRUFBUSxJQUVuQzNFLEVBQVc1QixFQUFVLFlBQ3JCd0csRUFBa0J4VSxPQUFPa0IsVUFLN0I3QixFQUFPRCxRQUFVbVYsRUFBMkJ2VSxPQUFPeVUsZUFBaUIsU0FBVW5RLEdBRTVFLE9BREFBLEVBQUlvTixFQUFTcE4sR0FDVHRDLEVBQUlzQyxFQUFHc0wsR0FBa0J0TCxFQUFFc0wsR0FDSCxtQkFBakJ0TCxFQUFFcUQsYUFBNkJyRCxhQUFhQSxFQUFFcUQsWUFDaERyRCxFQUFFcUQsWUFBWXpHLFVBQ2RvRCxhQUFhdEUsT0FBU3dVLEVBQWtCLE8sZ0JDaEJuRCxJQUdJNUssRUFBTyxHQUVYQSxFQUxzQixFQUFRLEVBRVZ1SCxDQUFnQixnQkFHZCxJQUV0QjlSLEVBQU9ELFFBQTJCLGVBQWpCNEUsT0FBTzRGLEksY0NQeEJ2SyxFQUFPRCxRQUFVc0MsT0FBT2dULHFCLDZCQ0N4QixJQUFJdFEsRUFBYyxFQUFRLElBQ3RCTSxFQUF1QixFQUFRLEdBQy9CQyxFQUEyQixFQUFRLElBRXZDdEYsRUFBT0QsUUFBVSxTQUFVNEIsRUFBUUgsRUFBS04sR0FDdEMsSUFBSW9VLEVBQWN2USxFQUFZdkQsR0FDMUI4VCxLQUFlM1QsRUFBUTBELEVBQXFCaEMsRUFBRTFCLEVBQVEyVCxFQUFhaFEsRUFBeUIsRUFBR3BFLElBQzlGUyxFQUFPMlQsR0FBZXBVLEksNkJDUDdCLElBQUk2RixFQUFrQixFQUFRLElBQzFCd08sRUFBbUIsRUFBUSxLQUMzQkMsRUFBWSxFQUFRLElBQ3BCM1AsRUFBc0IsRUFBUSxJQUM5QjRQLEVBQWlCLEVBQVEsSUFHekJDLEVBQW1CN1AsRUFBb0IySSxJQUN2QzFJLEVBQW1CRCxFQUFvQndKLFVBRnRCLGtCQWNyQnJQLEVBQU9ELFFBQVUwVixFQUFlNUwsTUFBTyxTQUFTLFNBQVU4TCxFQUFVQyxHQUNsRUYsRUFBaUJsVCxLQUFNLENBQ3JCb0YsS0FoQmlCLGlCQWlCakIvRCxPQUFRa0QsRUFBZ0I0TyxHQUN4QnZDLE1BQU8sRUFDUHdDLEtBQU1BLE9BSVAsV0FDRCxJQUFJelAsRUFBUUwsRUFBaUJ0RCxNQUN6QnFCLEVBQVNzQyxFQUFNdEMsT0FDZitSLEVBQU96UCxFQUFNeVAsS0FDYnhDLEVBQVFqTixFQUFNaU4sUUFDbEIsT0FBS3ZQLEdBQVV1UCxHQUFTdlAsRUFBT2dELFFBQzdCVixFQUFNdEMsWUFBU1UsRUFDUixDQUFFckQsV0FBT3FELEVBQVdzUixNQUFNLElBRXZCLFFBQVJELEVBQXVCLENBQUUxVSxNQUFPa1MsRUFBT3lDLE1BQU0sR0FDckMsVUFBUkQsRUFBeUIsQ0FBRTFVLE1BQU8yQyxFQUFPdVAsR0FBUXlDLE1BQU0sR0FDcEQsQ0FBRTNVLE1BQU8sQ0FBQ2tTLEVBQU92UCxFQUFPdVAsSUFBU3lDLE1BQU0sS0FDN0MsVUFLSEwsRUFBVU0sVUFBWU4sRUFBVTNMLE1BR2hDMEwsRUFBaUIsUUFDakJBLEVBQWlCLFVBQ2pCQSxFQUFpQixZLDhCQ25EakIsSUFBSVEsRUFBd0IsR0FBR3BDLHFCQUUzQnZRLEVBQTJCekMsT0FBT3lDLHlCQUdsQzRTLEVBQWM1UyxJQUE2QjJTLEVBQXNCM1YsS0FBSyxDQUFFNlYsRUFBRyxHQUFLLEdBSXBGbFcsRUFBUXNELEVBQUkyUyxFQUFjLFNBQThCRSxHQUN0RCxJQUFJbFMsRUFBYVosRUFBeUJaLEtBQU0wVCxHQUNoRCxRQUFTbFMsR0FBY0EsRUFBV25ELFlBQ2hDa1YsRyxjQ1pKaFcsRUFBUXNELEVBQUkxQyxPQUFPZ1UsdUIsZ0JDRG5CLElBQUl3QixFQUF3QixFQUFRLElBQ2hDNVMsRUFBVyxFQUFRLElBQ25CMEQsRUFBVyxFQUFRLEtBSWxCa1AsR0FDSDVTLEVBQVM1QyxPQUFPa0IsVUFBVyxXQUFZb0YsRUFBVSxDQUFFYixRQUFRLEssb0JDUDdELElBQUkyRCxFQUdKQSxFQUFJLFdBQ0gsT0FBT3ZILEtBREosR0FJSixJQUVDdUgsRUFBSUEsR0FBSyxJQUFJdEgsU0FBUyxjQUFiLEdBQ1IsTUFBTzJFLEdBRWMsaUJBQVgvRSxTQUFxQjBILEVBQUkxSCxRQU9yQ3JDLEVBQU9ELFFBQVVnSyxHLGdCQ25CakIsSUFBSW5GLEVBQWMsRUFBUSxHQUN0QlEsRUFBUSxFQUFRLEdBQ2hCdUgsRUFBZ0IsRUFBUSxJQUc1QjNNLEVBQU9ELFNBQVc2RSxJQUFnQlEsR0FBTSxXQUV0QyxPQUVRLEdBRkR6RSxPQUFPQyxlQUFlK0wsRUFBYyxPQUFRLElBQUssQ0FDdEQ3TCxJQUFLLFdBQWMsT0FBTyxLQUN6QnlHLE0sZ0JDVEwsSUFBSTVFLEVBQU0sRUFBUSxHQUNkeVQsRUFBVSxFQUFRLElBQ2xCQyxFQUFpQyxFQUFRLElBQ3pDaFIsRUFBdUIsRUFBUSxHQUVuQ3JGLEVBQU9ELFFBQVUsU0FBVThELEVBQVFELEdBSWpDLElBSEEsSUFBSWdNLEVBQU93RyxFQUFReFMsR0FDZmhELEVBQWlCeUUsRUFBcUJoQyxFQUN0Q0QsRUFBMkJpVCxFQUErQmhULEVBQ3JEcEQsRUFBSSxFQUFHQSxFQUFJMlAsRUFBSy9JLE9BQVE1RyxJQUFLLENBQ3BDLElBQUl1QixFQUFNb08sRUFBSzNQLEdBQ1YwQyxFQUFJa0IsRUFBUXJDLElBQU1aLEVBQWVpRCxFQUFRckMsRUFBSzRCLEVBQXlCUSxFQUFRcEMsTyxnQkNYeEYsSUFBSWUsRUFBUyxFQUFRLEdBRXJCdkMsRUFBT0QsUUFBVXdDLEcsZ0JDRmpCLElBQUlJLEVBQU0sRUFBUSxHQUNkb0UsRUFBa0IsRUFBUSxJQUMxQjhCLEVBQVUsRUFBUSxLQUErQkEsUUFDakQrRixFQUFhLEVBQVEsSUFFekI1TyxFQUFPRCxRQUFVLFNBQVU0QixFQUFRMlUsR0FDakMsSUFHSTlVLEVBSEF5RCxFQUFJOEIsRUFBZ0JwRixHQUNwQjFCLEVBQUksRUFDSjJSLEVBQVMsR0FFYixJQUFLcFEsS0FBT3lELEdBQUl0QyxFQUFJaU0sRUFBWXBOLElBQVFtQixFQUFJc0MsRUFBR3pELElBQVFvUSxFQUFPcEssS0FBS2hHLEdBRW5FLEtBQU84VSxFQUFNelAsT0FBUzVHLEdBQU8wQyxFQUFJc0MsRUFBR3pELEVBQU04VSxFQUFNclcsU0FDN0M0SSxFQUFRK0ksRUFBUXBRLElBQVFvUSxFQUFPcEssS0FBS2hHLElBRXZDLE9BQU9vUSxJLGdCQ2ZULElBQUluTSxFQUFZLEVBQVEsSUFFcEI4USxFQUFNclUsS0FBS3FVLElBQ1g3USxFQUFNeEQsS0FBS3dELElBS2YxRixFQUFPRCxRQUFVLFNBQVVxVCxFQUFPdk0sR0FDaEMsSUFBSTJQLEVBQVUvUSxFQUFVMk4sR0FDeEIsT0FBT29ELEVBQVUsRUFBSUQsRUFBSUMsRUFBVTNQLEVBQVEsR0FBS25CLEVBQUk4USxFQUFTM1AsSyxnQkNWL0QsSUFBSXpCLEVBQVEsRUFBUSxHQUVoQnFSLEVBQWMsa0JBRWQvUyxFQUFXLFNBQVVnVCxFQUFTQyxHQUNoQyxJQUFJelYsRUFBUTJMLEVBQUsrSixFQUFVRixJQUMzQixPQUFPeFYsR0FBUzJWLEdBQ1ozVixHQUFTNFYsSUFDVyxtQkFBYkgsRUFBMEJ2UixFQUFNdVIsS0FDckNBLElBR0pDLEVBQVlsVCxFQUFTa1QsVUFBWSxTQUFVRyxHQUM3QyxPQUFPcFMsT0FBT29TLEdBQVFwTSxRQUFROEwsRUFBYSxLQUFLN0wsZUFHOUNpQyxFQUFPbkosRUFBU21KLEtBQU8sR0FDdkJpSyxFQUFTcFQsRUFBU29ULE9BQVMsSUFDM0JELEVBQVduVCxFQUFTbVQsU0FBVyxJQUVuQzdXLEVBQU9ELFFBQVUyRCxHLGdCQ25CakIsSUFBSWIsRUFBZ0IsRUFBUSxJQUU1QjdDLEVBQU9ELFFBQVU4QyxJQUNYN0IsT0FBT3dELE1BQ2tCLGlCQUFuQnhELE9BQU9nVyxVLGdCQ0xuQixJQUFJcEMsRUFBYSxFQUFRLElBRXpCNVUsRUFBT0QsUUFBVTZVLEVBQVcsV0FBWSxvQixnQkNGeEMsSUFBSXhQLEVBQVEsRUFBUSxHQUVwQnBGLEVBQU9ELFNBQVdxRixHQUFNLFdBQ3RCLFNBQVNzTSxLQUdULE9BRkFBLEVBQUU3UCxVQUFVeUcsWUFBYyxLQUVuQjNILE9BQU95VSxlQUFlLElBQUkxRCxLQUFTQSxFQUFFN1AsYyxnQkNOOUMsSUFBSXNVLEVBQXdCLEVBQVEsSUFDaENjLEVBQWEsRUFBUSxJQUdyQnBGLEVBRmtCLEVBQVEsRUFFVkMsQ0FBZ0IsZUFFaENvRixFQUF1RSxhQUFuREQsRUFBVyxXQUFjLE9BQU9yUSxVQUFyQixJQVVuQzVHLEVBQU9ELFFBQVVvVyxFQUF3QmMsRUFBYSxTQUFVaFYsR0FDOUQsSUFBSWdELEVBQUdrUyxFQUFLdkYsRUFDWixZQUFjck4sSUFBUHRDLEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTSxpQkFBaERrVixFQVhELFNBQVVsVixFQUFJVCxHQUN6QixJQUNFLE9BQU9TLEVBQUdULEdBQ1YsTUFBTzJCLEtBUVNpVSxDQUFPblMsRUFBSXRFLE9BQU9zQixHQUFLNFAsSUFBOEJzRixFQUVuRUQsRUFBb0JELEVBQVdoUyxHQUVILFdBQTNCMk0sRUFBU3FGLEVBQVdoUyxLQUFzQyxtQkFBWkEsRUFBRW9TLE9BQXVCLFlBQWN6RixJLDZCQ3ZCNUYsSUFpREkwRixFQUFVQyxFQUFzQkMsRUFBZ0JDLEVBakRoRDFNLEVBQUksRUFBUSxHQUNaaUgsRUFBVSxFQUFRLElBQ2xCelAsRUFBUyxFQUFRLEdBQ2pCcVMsRUFBYSxFQUFRLElBQ3JCOEMsRUFBZ0IsRUFBUSxLQUN4Qm5VLEVBQVcsRUFBUSxJQUNuQm9VLEVBQWMsRUFBUSxLQUN0QkMsRUFBaUIsRUFBUSxJQUN6QkMsRUFBYSxFQUFRLEtBQ3JCcFQsRUFBVyxFQUFRLEdBQ25CK0IsRUFBWSxFQUFRLElBQ3BCc1IsRUFBYSxFQUFRLEtBQ3JCbFMsRUFBZ0IsRUFBUSxJQUN4Qm1TLEVBQVUsRUFBUSxLQUNsQkMsRUFBOEIsRUFBUSxJQUN0Q0MsRUFBcUIsRUFBUSxJQUM3QkMsRUFBTyxFQUFRLElBQXFCMUosSUFDcEMySixFQUFZLEVBQVEsS0FDcEJDLEVBQWlCLEVBQVEsS0FDekJDLEVBQW1CLEVBQVEsS0FDM0JDLEVBQTZCLEVBQVEsSUFDckNDLEVBQVUsRUFBUSxLQUNsQjFTLEVBQXNCLEVBQVEsSUFDOUJuQyxFQUFXLEVBQVEsSUFDbkJvTyxFQUFrQixFQUFRLEdBQzFCMkMsRUFBVSxFQUFRLElBQ2xCQyxFQUFhLEVBQVEsSUFFckJHLEVBQVUvQyxFQUFnQixXQUMxQjBHLEVBQVUsVUFDVjFTLEVBQW1CRCxFQUFvQi9FLElBQ3ZDNFUsRUFBbUI3UCxFQUFvQjJJLElBQ3ZDaUssRUFBMEI1UyxFQUFvQndKLFVBQVVtSixHQUN4REUsRUFBcUJoQixFQUNyQmhULEVBQVluQyxFQUFPbUMsVUFDbkI4SCxFQUFXakssRUFBT2lLLFNBQ2xCeUQsRUFBVTFOLEVBQU8wTixRQUNqQjBJLEVBQVMvRCxFQUFXLFNBQ3BCZ0UsRUFBdUJOLEVBQTJCalYsRUFDbER3VixFQUE4QkQsRUFDOUJFLEtBQW9CdE0sR0FBWUEsRUFBU3VNLGFBQWV4VyxFQUFPeVcsZUFDL0RDLEVBQXlELG1CQUF6QkMsc0JBVWhDQyxFQUFTelYsRUFBUzhVLEdBQVMsV0FFN0IsS0FENkI1UyxFQUFjOFMsS0FBd0IvVCxPQUFPK1QsSUFDN0MsQ0FJM0IsR0FBbUIsS0FBZmhFLEVBQW1CLE9BQU8sRUFFOUIsSUFBS0QsSUFBWXdFLEVBQXdCLE9BQU8sRUFHbEQsR0FBSWpILElBQVkwRyxFQUFtQjdXLFVBQW1CLFFBQUcsT0FBTyxFQUloRSxHQUFJNlMsR0FBYyxJQUFNLGNBQWNuSyxLQUFLbU8sR0FBcUIsT0FBTyxFQUV2RSxJQUFJVSxFQUFVVixFQUFtQnZLLFFBQVEsR0FDckNrTCxFQUFjLFNBQVVuVyxHQUMxQkEsR0FBSyxlQUE2QixnQkFJcEMsT0FGa0JrVyxFQUFROVEsWUFBYyxJQUM1QnVNLEdBQVd3RSxJQUNkRCxFQUFRbEwsTUFBSyx5QkFBd0NtTCxNQUc1REMsRUFBc0JILElBQVduQixHQUE0QixTQUFVdUIsR0FDekViLEVBQW1CYyxJQUFJRCxHQUFpQixPQUFFLGtCQUl4Q0UsRUFBYSxTQUFVeFgsR0FDekIsSUFBSWlNLEVBQ0osU0FBT3pKLEVBQVN4QyxJQUFrQyxtQkFBbkJpTSxFQUFPak0sRUFBR2lNLFFBQXNCQSxHQUc3RHdMLEVBQVMsU0FBVXZULEVBQU93VCxHQUM1QixJQUFJeFQsRUFBTXlULFNBQVYsQ0FDQXpULEVBQU15VCxVQUFXLEVBQ2pCLElBQUlDLEVBQVExVCxFQUFNMlQsVUFDbEIzQixHQUFVLFdBS1IsSUFKQSxJQUFJalgsRUFBUWlGLEVBQU1qRixNQUNkNlksRUFoRFEsR0FnREg1VCxFQUFNQSxNQUNYaU4sRUFBUSxFQUVMeUcsRUFBTWhULE9BQVN1TSxHQUFPLENBQzNCLElBS0l4QixFQUFRMUQsRUFBTThMLEVBTGRDLEVBQVdKLEVBQU16RyxLQUNqQjhHLEVBQVVILEVBQUtFLEVBQVNGLEdBQUtFLEVBQVNFLEtBQ3RDaE0sRUFBVThMLEVBQVM5TCxRQUNuQmlNLEVBQVNILEVBQVNHLE9BQ2xCdkosRUFBU29KLEVBQVNwSixPQUV0QixJQUNNcUosR0FDR0gsSUF6REMsSUEwREE1VCxFQUFNa1UsV0FBeUJDLEdBQWtCblUsR0FDckRBLEVBQU1rVSxVQTVESixJQThEWSxJQUFaSCxFQUFrQnRJLEVBQVMxUSxHQUV6QjJQLEdBQVFBLEVBQU8wSixRQUNuQjNJLEVBQVNzSSxFQUFRaFosR0FDYjJQLElBQ0ZBLEVBQU8ySixPQUNQUixHQUFTLElBR1RwSSxJQUFXcUksRUFBU2IsUUFDdEJnQixFQUFPMVYsRUFBVSx5QkFDUndKLEVBQU91TCxFQUFXN0gsSUFDM0IxRCxFQUFLOU4sS0FBS3dSLEVBQVF6RCxFQUFTaU0sR0FDdEJqTSxFQUFReUQsSUFDVndJLEVBQU9sWixHQUNkLE1BQU9pQyxHQUNIME4sSUFBV21KLEdBQVFuSixFQUFPMkosT0FDOUJKLEVBQU9qWCxJQUdYZ0QsRUFBTTJULFVBQVksR0FDbEIzVCxFQUFNeVQsVUFBVyxFQUNiRCxJQUFheFQsRUFBTWtVLFdBQVdJLEVBQVl0VSxRQUk5QzZTLEVBQWdCLFNBQVV4WSxFQUFNNFksRUFBU3NCLEdBQzNDLElBQUl2UCxFQUFPK08sRUFDUHBCLElBQ0YzTixFQUFRcUIsRUFBU3VNLFlBQVksVUFDdkJLLFFBQVVBLEVBQ2hCak8sRUFBTXVQLE9BQVNBLEVBQ2Z2UCxFQUFNd1AsVUFBVW5hLEdBQU0sR0FBTyxHQUM3QitCLEVBQU95VyxjQUFjN04sSUFDaEJBLEVBQVEsQ0FBRWlPLFFBQVNBLEVBQVNzQixPQUFRQSxJQUN0Q3pCLElBQTJCaUIsRUFBVTNYLEVBQU8sS0FBTy9CLElBQVEwWixFQUFRL08sR0F0R2hELHVCQXVHZjNLLEdBQThCNlgsRUFBaUIsOEJBQStCcUMsSUFHckZELEVBQWMsU0FBVXRVLEdBQzFCK1IsRUFBSzlYLEtBQUttQyxHQUFRLFdBQ2hCLElBR0lxUCxFQUhBd0gsRUFBVWpULEVBQU1nSixPQUNoQmpPLEVBQVFpRixFQUFNakYsTUFHbEIsR0FGbUIwWixHQUFZelUsS0FHN0J5TCxFQUFTMkcsR0FBUSxXQUNYOUQsRUFDRnhFLEVBQVE0SyxLQUFLLHFCQUFzQjNaLEVBQU9rWSxHQUNyQ0osRUFwSFcscUJBb0h3QkksRUFBU2xZLE1BR3JEaUYsRUFBTWtVLFVBQVk1RixHQUFXbUcsR0FBWXpVLEdBakgvQixFQURGLEVBbUhKeUwsRUFBT3pPLE9BQU8sTUFBTXlPLEVBQU8xUSxVQUtqQzBaLEdBQWMsU0FBVXpVLEdBQzFCLE9BekhZLElBeUhMQSxFQUFNa1UsWUFBMEJsVSxFQUFNMlUsUUFHM0NSLEdBQW9CLFNBQVVuVSxHQUNoQytSLEVBQUs5WCxLQUFLbUMsR0FBUSxXQUNoQixJQUFJNlcsRUFBVWpULEVBQU1nSixPQUNoQnNGLEVBQ0Z4RSxFQUFRNEssS0FBSyxtQkFBb0J6QixHQUM1QkosRUFySWEsbUJBcUlvQkksRUFBU2pULEVBQU1qRixXQUl2RE8sR0FBTyxTQUFVZ08sRUFBSXRKLEVBQU80VSxHQUM5QixPQUFPLFNBQVU3WixHQUNmdU8sRUFBR3RKLEVBQU9qRixFQUFPNlosS0FJakJDLEdBQWlCLFNBQVU3VSxFQUFPakYsRUFBTzZaLEdBQ3ZDNVUsRUFBTTBQLE9BQ1YxUCxFQUFNMFAsTUFBTyxFQUNUa0YsSUFBUTVVLEVBQVE0VSxHQUNwQjVVLEVBQU1qRixNQUFRQSxFQUNkaUYsRUFBTUEsTUFqSk8sRUFrSmJ1VCxFQUFPdlQsR0FBTyxLQUdaOFUsR0FBa0IsU0FBVTlVLEVBQU9qRixFQUFPNlosR0FDNUMsSUFBSTVVLEVBQU0wUCxLQUFWLENBQ0ExUCxFQUFNMFAsTUFBTyxFQUNUa0YsSUFBUTVVLEVBQVE0VSxHQUNwQixJQUNFLEdBQUk1VSxFQUFNZ0osU0FBV2pPLEVBQU8sTUFBTXdELEVBQVUsb0NBQzVDLElBQUl3SixFQUFPdUwsRUFBV3ZZLEdBQ2xCZ04sRUFDRmlLLEdBQVUsV0FDUixJQUFJK0MsRUFBVSxDQUFFckYsTUFBTSxHQUN0QixJQUNFM0gsRUFBSzlOLEtBQUtjLEVBQ1JPLEdBQUt3WixHQUFpQkMsRUFBUy9VLEdBQy9CMUUsR0FBS3VaLEdBQWdCRSxFQUFTL1UsSUFFaEMsTUFBT2hELEdBQ1A2WCxHQUFlRSxFQUFTL1gsRUFBT2dELFFBSW5DQSxFQUFNakYsTUFBUUEsRUFDZGlGLEVBQU1BLE1BM0tJLEVBNEtWdVQsRUFBT3ZULEdBQU8sSUFFaEIsTUFBT2hELEdBQ1A2WCxHQUFlLENBQUVuRixNQUFNLEdBQVMxUyxFQUFPZ0QsTUFLdkNnVCxJQUVGVCxFQUFxQixTQUFpQnlDLEdBQ3BDckQsRUFBV3RWLEtBQU1rVyxFQUFvQkYsR0FDckNoUyxFQUFVMlUsR0FDVjdELEVBQVNsWCxLQUFLb0MsTUFDZCxJQUFJMkQsRUFBUUwsRUFBaUJ0RCxNQUM3QixJQUNFMlksRUFBUzFaLEdBQUt3WixHQUFpQjlVLEdBQVExRSxHQUFLdVosR0FBZ0I3VSxJQUM1RCxNQUFPaEQsR0FDUDZYLEdBQWU3VSxFQUFPaEQsTUFJMUJtVSxFQUFXLFNBQWlCNkQsR0FDMUJ6RixFQUFpQmxULEtBQU0sQ0FDckJvRixLQUFNNFEsRUFDTjNDLE1BQU0sRUFDTitELFVBQVUsRUFDVmtCLFFBQVEsRUFDUmhCLFVBQVcsR0FDWE8sV0FBVyxFQUNYbFUsTUEzTVEsRUE0TVJqRixXQUFPcUQsTUFHRjFDLFVBQVk4VixFQUFZZSxFQUFtQjdXLFVBQVcsQ0FHN0RxTSxLQUFNLFNBQWNrTixFQUFhQyxHQUMvQixJQUFJbFYsRUFBUXNTLEVBQXdCalcsTUFDaEN5WCxFQUFXckIsRUFBcUJYLEVBQW1CelYsS0FBTWtXLElBTzdELE9BTkF1QixFQUFTRixHQUEyQixtQkFBZnFCLEdBQTRCQSxFQUNqRG5CLEVBQVNFLEtBQTRCLG1CQUFka0IsR0FBNEJBLEVBQ25EcEIsRUFBU3BKLE9BQVM0RCxFQUFVeEUsRUFBUVksWUFBU3RNLEVBQzdDNEIsRUFBTTJVLFFBQVMsRUFDZjNVLEVBQU0yVCxVQUFVdFMsS0FBS3lTLEdBek5iLEdBME5KOVQsRUFBTUEsT0FBa0J1VCxFQUFPdlQsR0FBTyxHQUNuQzhULEVBQVNiLFNBSWxCLE1BQVMsU0FBVWlDLEdBQ2pCLE9BQU83WSxLQUFLMEwsVUFBSzNKLEVBQVc4VyxNQUdoQzlELEVBQXVCLFdBQ3JCLElBQUk2QixFQUFVLElBQUk5QixFQUNkblIsRUFBUUwsRUFBaUJzVCxHQUM3QjVXLEtBQUs0VyxRQUFVQSxFQUNmNVcsS0FBSzJMLFFBQVUxTSxHQUFLd1osR0FBaUI5VSxHQUNyQzNELEtBQUs0WCxPQUFTM1ksR0FBS3VaLEdBQWdCN1UsSUFFckNtUyxFQUEyQmpWLEVBQUl1VixFQUF1QixTQUFVcE8sR0FDOUQsT0FBT0EsSUFBTWtPLEdBQXNCbE8sSUFBTWdOLEVBQ3JDLElBQUlELEVBQXFCL00sR0FDekJxTyxFQUE0QnJPLElBRzdCd0gsR0FBbUMsbUJBQWpCMEYsSUFDckJELEVBQWFDLEVBQWM3VixVQUFVcU0sS0FHckMzSyxFQUFTbVUsRUFBYzdWLFVBQVcsUUFBUSxTQUFjdVosRUFBYUMsR0FDbkUsSUFBSWxKLEVBQU8zUCxLQUNYLE9BQU8sSUFBSWtXLEdBQW1CLFNBQVV2SyxFQUFTaU0sR0FDL0MzQyxFQUFXclgsS0FBSytSLEVBQU1oRSxFQUFTaU0sTUFDOUJsTSxLQUFLa04sRUFBYUMsS0FFcEIsQ0FBRWpWLFFBQVEsSUFHUSxtQkFBVnVTLEdBQXNCNU4sRUFBRSxDQUFFeEksUUFBUSxFQUFNMUIsWUFBWSxFQUFNeUQsUUFBUSxHQUFRLENBRW5GZ1gsTUFBTyxTQUFlL0wsR0FDcEIsT0FBTzZJLEVBQWVNLEVBQW9CQyxFQUFPdkcsTUFBTTdQLEVBQVFxRSxpQkFNdkVtRSxFQUFFLENBQUV4SSxRQUFRLEVBQU1nWixNQUFNLEVBQU1qWCxPQUFRNlUsR0FBVSxDQUM5Q2xMLFFBQVN5SyxJQUdYZCxFQUFlYyxFQUFvQkYsR0FBUyxHQUFPLEdBQ25EWCxFQUFXVyxHQUVYaEIsRUFBaUI1QyxFQUFXNEQsR0FHNUJ6TixFQUFFLENBQUVsSCxPQUFRMlUsRUFBU3BVLE1BQU0sRUFBTUUsT0FBUTZVLEdBQVUsQ0FHakRpQixPQUFRLFNBQWdCclosR0FDdEIsSUFBSXlhLEVBQWE1QyxFQUFxQnBXLE1BRXRDLE9BREFnWixFQUFXcEIsT0FBT2hhLFVBQUttRSxFQUFXeEQsR0FDM0J5YSxFQUFXcEMsV0FJdEJyTyxFQUFFLENBQUVsSCxPQUFRMlUsRUFBU3BVLE1BQU0sRUFBTUUsT0FBUTBOLEdBQVdtSCxHQUFVLENBRzVEaEwsUUFBUyxTQUFpQm5FLEdBQ3hCLE9BQU9vTyxFQUFlcEcsR0FBV3hQLE9BQVNnVixFQUFpQmtCLEVBQXFCbFcsS0FBTXdILE1BSTFGZSxFQUFFLENBQUVsSCxPQUFRMlUsRUFBU3BVLE1BQU0sRUFBTUUsT0FBUWdWLEdBQXVCLENBRzlERSxJQUFLLFNBQWFELEdBQ2hCLElBQUkvTyxFQUFJaEksS0FDSmdaLEVBQWE1QyxFQUFxQnBPLEdBQ2xDMkQsRUFBVXFOLEVBQVdyTixRQUNyQmlNLEVBQVNvQixFQUFXcEIsT0FDcEJ4SSxFQUFTMkcsR0FBUSxXQUNuQixJQUFJa0QsRUFBa0JqVixFQUFVZ0UsRUFBRTJELFNBQzlCdU4sRUFBUyxHQUNUQyxFQUFVLEVBQ1ZDLEVBQVksRUFDaEI3RCxFQUFRd0IsR0FBVSxTQUFVSCxHQUMxQixJQUFJaEcsRUFBUXVJLElBQ1JFLEdBQWdCLEVBQ3BCSCxFQUFPbFUsVUFBS2pELEdBQ1pxWCxJQUNBSCxFQUFnQnJiLEtBQUtvSyxFQUFHNE8sR0FBU2xMLE1BQUssU0FBVWhOLEdBQzFDMmEsSUFDSkEsR0FBZ0IsRUFDaEJILEVBQU90SSxHQUFTbFMsSUFDZDBhLEdBQWF6TixFQUFRdU4sTUFDdEJ0QixRQUVId0IsR0FBYXpOLEVBQVF1TixNQUd6QixPQURJOUosRUFBT3pPLE9BQU9pWCxFQUFPeEksRUFBTzFRLE9BQ3pCc2EsRUFBV3BDLFNBSXBCMEMsS0FBTSxTQUFjdkMsR0FDbEIsSUFBSS9PLEVBQUloSSxLQUNKZ1osRUFBYTVDLEVBQXFCcE8sR0FDbEM0UCxFQUFTb0IsRUFBV3BCLE9BQ3BCeEksRUFBUzJHLEdBQVEsV0FDbkIsSUFBSWtELEVBQWtCalYsRUFBVWdFLEVBQUUyRCxTQUNsQzRKLEVBQVF3QixHQUFVLFNBQVVILEdBQzFCcUMsRUFBZ0JyYixLQUFLb0ssRUFBRzRPLEdBQVNsTCxLQUFLc04sRUFBV3JOLFFBQVNpTSxTQUk5RCxPQURJeEksRUFBT3pPLE9BQU9pWCxFQUFPeEksRUFBTzFRLE9BQ3pCc2EsRUFBV3BDLFksZ0JDMVh0QixJQWlCSTJDLEVBQU9DLEVBQVNDLEVBakJoQjFaLEVBQVMsRUFBUSxHQUNqQjZDLEVBQVEsRUFBUSxHQUNoQjNELEVBQU8sRUFBUSxJQUNmNE8sRUFBTyxFQUFRLElBQ2YxRCxFQUFnQixFQUFRLElBQ3hCdVAsRUFBUyxFQUFRLElBQ2pCekgsRUFBVSxFQUFRLElBRWxCMEgsRUFBVzVaLEVBQU80WixTQUNsQjNOLEVBQU1qTSxFQUFPNlosYUFDYkMsRUFBUTlaLEVBQU8rWixlQUNmck0sRUFBVTFOLEVBQU8wTixRQUNqQnNNLEVBQWlCaGEsRUFBT2dhLGVBQ3hCQyxFQUFXamEsRUFBT2lhLFNBQ2xCYixFQUFVLEVBQ1ZjLEVBQVEsR0FJUkMsRUFBTSxTQUFVdEksR0FFbEIsR0FBSXFJLEVBQU0zYSxlQUFlc1MsR0FBSyxDQUM1QixJQUFJM0UsRUFBS2dOLEVBQU1ySSxVQUNScUksRUFBTXJJLEdBQ2IzRSxNQUlBa04sRUFBUyxTQUFVdkksR0FDckIsT0FBTyxXQUNMc0ksRUFBSXRJLEtBSUp3SSxFQUFXLFNBQVV6UixHQUN2QnVSLEVBQUl2UixFQUFNMEIsT0FHUmdRLEVBQU8sU0FBVXpJLEdBRW5CN1IsRUFBT3VhLFlBQVkxSSxFQUFLLEdBQUkrSCxFQUFTWSxTQUFXLEtBQU9aLEVBQVNhLE9BSTdEeE8sR0FBUTZOLElBQ1g3TixFQUFNLFNBQXNCaUIsR0FHMUIsSUFGQSxJQUFJd04sRUFBTyxHQUNQaGQsRUFBSSxFQUNEMkcsVUFBVUMsT0FBUzVHLEdBQUdnZCxFQUFLelYsS0FBS1osVUFBVTNHLE1BTWpELE9BTEF3YyxJQUFRZCxHQUFXLFlBRUgsbUJBQU5sTSxFQUFtQkEsRUFBS2hOLFNBQVNnTixJQUFLMkMsV0FBTTdOLEVBQVcwWSxJQUVqRWxCLEVBQU1KLEdBQ0NBLEdBRVRVLEVBQVEsU0FBd0JqSSxVQUN2QnFJLEVBQU1ySSxJQUdYSyxFQUNGc0gsRUFBUSxTQUFVM0gsR0FDaEJuRSxFQUFRaU4sU0FBU1AsRUFBT3ZJLEtBR2pCb0ksR0FBWUEsRUFBU1csSUFDOUJwQixFQUFRLFNBQVUzSCxHQUNoQm9JLEVBQVNXLElBQUlSLEVBQU92SSxLQUlibUksSUFBbUJMLEdBRTVCRCxHQURBRCxFQUFVLElBQUlPLEdBQ0NhLE1BQ2ZwQixFQUFRcUIsTUFBTUMsVUFBWVYsRUFDMUJiLEVBQVF0YSxFQUFLd2EsRUFBS2EsWUFBYWIsRUFBTSxJQUlyQzFaLEVBQU9zSSxrQkFDZSxtQkFBZmlTLGNBQ052YSxFQUFPZ2IsZUFDUnBCLEdBQWtDLFVBQXRCQSxFQUFTWSxXQUNwQjNYLEVBQU15WCxJQUVQZCxFQUFRYyxFQUNSdGEsRUFBT3NJLGlCQUFpQixVQUFXK1IsR0FBVSxJQUc3Q2IsRUF6RXFCLHVCQXdFVXBQLEVBQWMsVUFDckMsU0FBVXlILEdBQ2hCL0QsRUFBS2xHLFlBQVl3QyxFQUFjLFdBQTZCLG1CQUFJLFdBQzlEMEQsRUFBSy9JLFlBQVk5RSxNQUNqQmthLEVBQUl0SSxLQUtBLFNBQVVBLEdBQ2hCaEcsV0FBV3VPLEVBQU92SSxHQUFLLEtBSzdCcFUsRUFBT0QsUUFBVSxDQUNmeU8sSUFBS0EsRUFDTDZOLE1BQU9BLEksZ0JDekdULElBQUl4SSxFQUFZLEVBQVEsSUFFeEI3VCxFQUFPRCxRQUFVLHFDQUFxQ3dLLEtBQUtzSixJLDZCQ0QzRCxJQUFJck4sRUFBWSxFQUFRLElBRXBCZ1gsRUFBb0IsU0FBVWhULEdBQ2hDLElBQUkyRCxFQUFTaU0sRUFDYjVYLEtBQUs0VyxRQUFVLElBQUk1TyxHQUFFLFNBQVVpVCxFQUFXQyxHQUN4QyxRQUFnQm5aLElBQVo0SixRQUFvQzVKLElBQVg2VixFQUFzQixNQUFNMVYsVUFBVSwyQkFDbkV5SixFQUFVc1AsRUFDVnJELEVBQVNzRCxLQUVYbGIsS0FBSzJMLFFBQVUzSCxFQUFVMkgsR0FDekIzTCxLQUFLNFgsT0FBUzVULEVBQVU0VCxJQUkxQnBhLEVBQU9ELFFBQVFzRCxFQUFJLFNBQVVtSCxHQUMzQixPQUFPLElBQUlnVCxFQUFrQmhULEssZ0JDaEIvQixJQUFJc0gsRUFBa0IsRUFBUSxHQUU5Qi9SLEVBQVFzRCxFQUFJeU8sRyxnQkNGWixJQUFJdkwsRUFBTyxFQUFRLElBQ2Y1RCxFQUFNLEVBQVEsR0FDZGdiLEVBQStCLEVBQVEsSUFDdkMvYyxFQUFpQixFQUFRLEdBQXVDeUMsRUFFcEVyRCxFQUFPRCxRQUFVLFNBQVU2ZCxHQUN6QixJQUFJNWMsRUFBU3VGLEVBQUt2RixTQUFXdUYsRUFBS3ZGLE9BQVMsSUFDdEMyQixFQUFJM0IsRUFBUTRjLElBQU9oZCxFQUFlSSxFQUFRNGMsRUFBTSxDQUNuRDFjLE1BQU95YyxFQUE2QnRhLEVBQUV1YSxPLDZCQ1AxQyxJQUFJN1MsRUFBSSxFQUFRLEdBQ1o4UyxFQUE0QixFQUFRLEtBQ3BDekksRUFBaUIsRUFBUSxJQUN6QjBJLEVBQWlCLEVBQVEsS0FDekJsRyxFQUFpQixFQUFRLElBQ3pCdFUsRUFBOEIsRUFBUSxHQUN0Q0MsRUFBVyxFQUFRLElBQ25CdU8sRUFBa0IsRUFBUSxHQUMxQkUsRUFBVSxFQUFRLElBQ2xCd0QsRUFBWSxFQUFRLElBQ3BCdUksRUFBZ0IsRUFBUSxJQUV4QkMsRUFBb0JELEVBQWNDLGtCQUNsQ0MsRUFBeUJGLEVBQWNFLHVCQUN2Q0MsRUFBV3BNLEVBQWdCLFlBSzNCcU0sRUFBYSxXQUFjLE9BQU8zYixNQUV0Q3hDLEVBQU9ELFFBQVUsU0FBVXFlLEVBQVVSLEVBQU1TLEVBQXFCQyxFQUFNQyxFQUFTQyxFQUFRckYsR0FDckYwRSxFQUEwQlEsRUFBcUJULEVBQU1VLEdBRXJELElBa0JJRyxFQUEwQkMsRUFBU0MsRUFsQm5DQyxFQUFxQixTQUFVQyxHQUNqQyxHQUFJQSxJQUFTTixHQUFXTyxFQUFpQixPQUFPQSxFQUNoRCxJQUFLYixHQUEwQlksS0FBUUUsRUFBbUIsT0FBT0EsRUFBa0JGLEdBQ25GLE9BQVFBLEdBQ04sSUFiSyxPQWNMLElBYk8sU0FjUCxJQWJRLFVBYU0sT0FBTyxXQUFxQixPQUFPLElBQUlSLEVBQW9CN2IsS0FBTXFjLElBQy9FLE9BQU8sV0FBYyxPQUFPLElBQUlSLEVBQW9CN2IsUUFHcERxUCxFQUFnQitMLEVBQU8sWUFDdkJvQixHQUF3QixFQUN4QkQsRUFBb0JYLEVBQVN2YyxVQUM3Qm9kLEVBQWlCRixFQUFrQmIsSUFDbENhLEVBQWtCLGVBQ2xCUixHQUFXUSxFQUFrQlIsR0FDOUJPLEdBQW1CYixHQUEwQmdCLEdBQWtCTCxFQUFtQkwsR0FDbEZXLEVBQTRCLFNBQVJ0QixHQUFrQm1CLEVBQWtCSSxTQUE0QkYsRUFpQ3hGLEdBN0JJQyxJQUNGVCxFQUEyQnJKLEVBQWU4SixFQUFrQjllLEtBQUssSUFBSWdlLElBQ2pFSixJQUFzQnJkLE9BQU9rQixXQUFhNGMsRUFBeUJILE9BQ2hFdE0sR0FBV29ELEVBQWVxSixLQUE4QlQsSUFDdkRGLEVBQ0ZBLEVBQWVXLEVBQTBCVCxHQUNhLG1CQUF0Q1MsRUFBeUJQLElBQ3pDNWEsRUFBNEJtYixFQUEwQlAsRUFBVUMsSUFJcEV2RyxFQUFlNkcsRUFBMEI1TSxHQUFlLEdBQU0sR0FDMURHLElBQVN3RCxFQUFVM0QsR0FBaUJzTSxLQXpDakMsVUE4Q1BJLEdBQXFCVSxHQTlDZCxXQThDZ0NBLEVBQWV6ZSxPQUN4RHdlLEdBQXdCLEVBQ3hCRixFQUFrQixXQUFvQixPQUFPRyxFQUFlN2UsS0FBS29DLFFBSTdEd1AsSUFBV21ILEdBQVc0RixFQUFrQmIsS0FBY1ksR0FDMUR4YixFQUE0QnliLEVBQW1CYixFQUFVWSxHQUUzRHRKLEVBQVVvSSxHQUFRa0IsRUFHZFAsRUFNRixHQUxBRyxFQUFVLENBQ1JoRCxPQUFRa0QsRUE1REQsVUE2RFBoUCxLQUFNNE8sRUFBU00sRUFBa0JGLEVBOUQ1QixRQStETE8sUUFBU1AsRUE3REQsWUErRE56RixFQUFRLElBQUt3RixLQUFPRCxHQUNsQlQsSUFBMEJlLEdBQTJCTCxLQUFPSSxHQUM5RHhiLEVBQVN3YixFQUFtQkosRUFBS0QsRUFBUUMsU0FFdEM1VCxFQUFFLENBQUVsSCxPQUFRK1osRUFBTXdCLE9BQU8sRUFBTTlhLE9BQVEyWixHQUEwQmUsR0FBeUJOLEdBR25HLE9BQU9BLEksNkJDdkZULElBY0lWLEVBQW1CcUIsRUFBbUNDLEVBZHREbGEsRUFBUSxFQUFRLEdBQ2hCZ1EsRUFBaUIsRUFBUSxJQUN6QjlSLEVBQThCLEVBQVEsR0FDdENYLEVBQU0sRUFBUSxHQUNkbVAsRUFBa0IsRUFBUSxHQUMxQkUsRUFBVSxFQUFRLElBRWxCa00sRUFBV3BNLEVBQWdCLFlBQzNCbU0sR0FBeUIsRUFTekIsR0FBR3JPLE9BR0MsU0FGTjBQLEVBQWdCLEdBQUcxUCxTQUlqQnlQLEVBQW9DakssRUFBZUEsRUFBZWtLLE9BQ3hCM2UsT0FBT2tCLFlBQVdtYyxFQUFvQnFCLEdBSGxEcEIsR0FBeUIsR0FPM0QsSUFBSXNCLEVBQThDaGIsTUFBckJ5WixHQUFrQzVZLEdBQU0sV0FDbkUsSUFBSW1GLEVBQU8sR0FFWCxPQUFPeVQsRUFBa0JFLEdBQVU5ZCxLQUFLbUssS0FBVUEsS0FHaERnVixJQUF3QnZCLEVBQW9CLElBRzFDaE0sSUFBV3VOLEdBQTRCNWMsRUFBSXFiLEVBQW1CRSxJQUNsRTVhLEVBQTRCMGEsRUFBbUJFLEdBM0JoQyxXQUFjLE9BQU8xYixRQThCdEN4QyxFQUFPRCxRQUFVLENBQ2ZpZSxrQkFBbUJBLEVBQ25CQyx1QkFBd0JBLEksaUJDM0MxQixJQUFJeFksRUFBWSxFQUFRLElBQ3BCRCxFQUF5QixFQUFRLElBR2pDZ04sRUFBZSxTQUFVZ04sR0FDM0IsT0FBTyxTQUFVeE0sRUFBT3lNLEdBQ3RCLElBR0lDLEVBQU9DLEVBSFBuUyxFQUFJN0ksT0FBT2EsRUFBdUJ3TixJQUNsQzRNLEVBQVduYSxFQUFVZ2EsR0FDckJJLEVBQU9yUyxFQUFFM0csT0FFYixPQUFJK1ksRUFBVyxHQUFLQSxHQUFZQyxFQUFhTCxFQUFvQixRQUFLamIsR0FDdEVtYixFQUFRbFMsRUFBRXNTLFdBQVdGLElBQ04sT0FBVUYsRUFBUSxPQUFVRSxFQUFXLElBQU1DLElBQ3RERixFQUFTblMsRUFBRXNTLFdBQVdGLEVBQVcsSUFBTSxPQUFVRCxFQUFTLE1BQzFESCxFQUFvQmhTLEVBQUV1UyxPQUFPSCxHQUFZRixFQUN6Q0YsRUFBb0JoUyxFQUFFdEcsTUFBTTBZLEVBQVVBLEVBQVcsR0FBK0JELEVBQVMsT0FBbENELEVBQVEsT0FBVSxJQUEwQixRQUk3RzFmLEVBQU9ELFFBQVUsQ0FHZmlnQixPQUFReE4sR0FBYSxHQUdyQnVOLE9BQVF2TixHQUFhLEssZ0JDekJ2QixJQUFJVixFQUFrQixFQUFRLEdBQzFCMEQsRUFBWSxFQUFRLElBRXBCMEksRUFBV3BNLEVBQWdCLFlBQzNCbU8sRUFBaUJwVyxNQUFNaEksVUFHM0I3QixFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixZQUFjc0MsSUFBUHRDLElBQXFCdVQsRUFBVTNMLFFBQVU1SCxHQUFNZ2UsRUFBZS9CLEtBQWNqYyxLLGdCQ1JyRixJQUFJK04sRUFBVSxFQUFRLElBQ2xCd0YsRUFBWSxFQUFRLElBR3BCMEksRUFGa0IsRUFBUSxFQUVmcE0sQ0FBZ0IsWUFFL0I5UixFQUFPRCxRQUFVLFNBQVVrQyxHQUN6QixHQUFVc0MsTUFBTnRDLEVBQWlCLE9BQU9BLEVBQUdpYyxJQUMxQmpjLEVBQUcsZUFDSHVULEVBQVV4RixFQUFRL04sTSxnQkNUekIsSUFBSTZDLEVBQVcsRUFBUSxHQUV2QjlFLEVBQU9ELFFBQVUsU0FBVWlYLEdBQ3pCLElBQUlrSixFQUFlbEosRUFBaUIsT0FDcEMsUUFBcUJ6UyxJQUFqQjJiLEVBQ0YsT0FBT3BiLEVBQVNvYixFQUFhOWYsS0FBSzRXLElBQVc5VixRLGdCQ0xqRCxJQUVJZ2QsRUFGa0IsRUFBUSxFQUVmcE0sQ0FBZ0IsWUFDM0JxTyxHQUFlLEVBRW5CLElBQ0UsSUFBSUMsRUFBUyxFQUNUQyxFQUFxQixDQUN2Qi9CLEtBQU0sV0FDSixNQUFPLENBQUV6SSxPQUFRdUssTUFFbkIsT0FBVSxXQUNSRCxHQUFlLElBR25CRSxFQUFtQm5DLEdBQVksV0FDN0IsT0FBTzFiLE1BR1RxSCxNQUFNeVcsS0FBS0QsR0FBb0IsV0FBYyxNQUFNLEtBQ25ELE1BQU9sZCxJQUVUbkQsRUFBT0QsUUFBVSxTQUFVbUQsRUFBTXFkLEdBQy9CLElBQUtBLElBQWlCSixFQUFjLE9BQU8sRUFDM0MsSUFBSUssR0FBb0IsRUFDeEIsSUFDRSxJQUFJN2UsRUFBUyxHQUNiQSxFQUFPdWMsR0FBWSxXQUNqQixNQUFPLENBQ0xJLEtBQU0sV0FDSixNQUFPLENBQUV6SSxLQUFNMkssR0FBb0IsTUFJekN0ZCxFQUFLdkIsR0FDTCxNQUFPd0IsSUFDVCxPQUFPcWQsSSxnQkNwQ1QsSUFBSTFiLEVBQVcsRUFBUSxHQUNuQjBCLEVBQVksRUFBUSxJQUdwQnFPLEVBRmtCLEVBQVEsRUFFaEIvQyxDQUFnQixXQUk5QjlSLEVBQU9ELFFBQVUsU0FBVWtGLEVBQUd3YixHQUM1QixJQUNJalQsRUFEQWhELEVBQUkxRixFQUFTRyxHQUFHcUQsWUFFcEIsWUFBYS9ELElBQU5pRyxHQUFpRGpHLE9BQTdCaUosRUFBSTFJLEVBQVMwRixHQUFHcUssSUFBeUI0TCxFQUFxQmphLEVBQVVnSCxLLDZCQ1ZyRyxJQUFJekMsRUFBSSxFQUFRLEdBQ1p4SSxFQUFTLEVBQVEsR0FDakJxUyxFQUFhLEVBQVEsSUFDckI1QyxFQUFVLEVBQVEsSUFDbEJwTixFQUFjLEVBQVEsR0FDdEIvQixFQUFnQixFQUFRLElBQ3hCQyxFQUFvQixFQUFRLElBQzVCc0MsRUFBUSxFQUFRLEdBQ2hCekMsRUFBTSxFQUFRLEdBQ2RtSCxFQUFVLEVBQVEsSUFDbEJyRixFQUFXLEVBQVEsR0FDbkJLLEVBQVcsRUFBUSxHQUNuQnVOLEVBQVcsRUFBUSxJQUNuQnRMLEVBQWtCLEVBQVEsSUFDMUJoQyxFQUFjLEVBQVEsSUFDdEJPLEVBQTJCLEVBQVEsSUFDbkNvYixFQUFxQixFQUFRLElBQzdCQyxFQUFhLEVBQVEsSUFDckJDLEVBQTRCLEVBQVEsSUFDcENDLEVBQThCLEVBQVEsS0FDdENDLEVBQThCLEVBQVEsSUFDdEN6SyxFQUFpQyxFQUFRLElBQ3pDaFIsRUFBdUIsRUFBUSxHQUMvQnlCLEVBQTZCLEVBQVEsSUFDckN4RCxFQUE4QixFQUFRLEdBQ3RDQyxFQUFXLEVBQVEsSUFDbkJiLEVBQVMsRUFBUSxJQUNqQmlNLEVBQVksRUFBUSxJQUNwQkMsRUFBYSxFQUFRLElBQ3JCaE0sRUFBTSxFQUFRLElBQ2RrUCxFQUFrQixFQUFRLEdBQzFCNkwsRUFBK0IsRUFBUSxJQUN2Q29ELEVBQXdCLEVBQVEsSUFDaENuSixFQUFpQixFQUFRLElBQ3pCL1IsRUFBc0IsRUFBUSxJQUM5Qm1iLEVBQVcsRUFBUSxJQUFnQ2pWLFFBRW5Ea1YsRUFBU3RTLEVBQVUsVUFHbkJ1UyxFQUFlcFAsRUFBZ0IsZUFDL0I0RCxFQUFtQjdQLEVBQW9CMkksSUFDdkMxSSxFQUFtQkQsRUFBb0J3SixVQUo5QixVQUtUOEYsRUFBa0J4VSxPQUFnQixVQUNsQ3dnQixFQUFVNWUsRUFBT3ZCLE9BQ2pCb2dCLEVBQWF4TSxFQUFXLE9BQVEsYUFDaEN5TSxFQUFpQ2hMLEVBQStCaFQsRUFDaEVpZSxFQUF1QmpjLEVBQXFCaEMsRUFDNUNrZSxFQUE0QlYsRUFBNEJ4ZCxFQUN4RG1lLEVBQTZCMWEsRUFBMkJ6RCxFQUN4RG9lLEVBQWEvZSxFQUFPLFdBQ3BCZ2YsRUFBeUJoZixFQUFPLGNBQ2hDaWYsRUFBeUJqZixFQUFPLDZCQUNoQ2tmLEVBQXlCbGYsRUFBTyw2QkFDaENLLEdBQXdCTCxFQUFPLE9BQy9CbWYsR0FBVXRmLEVBQU9zZixRQUVqQkMsSUFBY0QsS0FBWUEsR0FBaUIsWUFBTUEsR0FBaUIsVUFBRUUsVUFHcEVDLEdBQXNCcGQsR0FBZVEsR0FBTSxXQUM3QyxPQUVTLEdBRkZzYixFQUFtQlksRUFBcUIsR0FBSSxJQUFLLENBQ3REeGdCLElBQUssV0FBYyxPQUFPd2dCLEVBQXFCOWUsS0FBTSxJQUFLLENBQUV0QixNQUFPLElBQUtxRyxNQUN0RUEsS0FDRCxTQUFVdEMsRUFBR0MsRUFBR0MsR0FDbkIsSUFBSThjLEVBQTRCWixFQUErQmxNLEVBQWlCalEsR0FDNUUrYyxVQUFrQzlNLEVBQWdCalEsR0FDdERvYyxFQUFxQnJjLEVBQUdDLEVBQUdDLEdBQ3ZCOGMsR0FBNkJoZCxJQUFNa1EsR0FDckNtTSxFQUFxQm5NLEVBQWlCalEsRUFBRytjLElBRXpDWCxFQUVBL0YsR0FBTyxTQUFVcEUsRUFBSytLLEdBQ3hCLElBQUlDLEVBQVNWLEVBQVd0SyxHQUFPdUosRUFBbUJTLEVBQWlCLFdBT25FLE9BTkF6TCxFQUFpQnlNLEVBQVEsQ0FDdkJ2YSxLQXRDUyxTQXVDVHVQLElBQUtBLEVBQ0wrSyxZQUFhQSxJQUVWdGQsSUFBYXVkLEVBQU9ELFlBQWNBLEdBQ2hDQyxHQUdMQyxHQUFXdGYsRUFBb0IsU0FBVWIsR0FDM0MsTUFBb0IsaUJBQU5BLEdBQ1osU0FBVUEsR0FDWixPQUFPdEIsT0FBT3NCLGFBQWVrZixHQUczQm5jLEdBQWtCLFNBQXdCQyxFQUFHQyxFQUFHQyxHQUM5Q0YsSUFBTWtRLEdBQWlCblEsR0FBZ0IwYyxFQUF3QnhjLEVBQUdDLEdBQ3RFTCxFQUFTRyxHQUNULElBQUl6RCxFQUFNdUQsRUFBWUcsR0FBRyxHQUV6QixPQURBSixFQUFTSyxHQUNMeEMsRUFBSThlLEVBQVlqZ0IsSUFDYjJELEVBQVd0RSxZQUlWOEIsRUFBSXNDLEVBQUdnYyxJQUFXaGMsRUFBRWdjLEdBQVF6ZixLQUFNeUQsRUFBRWdjLEdBQVF6ZixJQUFPLEdBQ3ZEMkQsRUFBYXViLEVBQW1CdmIsRUFBWSxDQUFFdEUsV0FBWXlFLEVBQXlCLEdBQUcsT0FKakYzQyxFQUFJc0MsRUFBR2djLElBQVNLLEVBQXFCcmMsRUFBR2djLEVBQVEzYixFQUF5QixFQUFHLEtBQ2pGTCxFQUFFZ2MsR0FBUXpmLElBQU8sR0FJVndnQixHQUFvQi9jLEVBQUd6RCxFQUFLMkQsSUFDOUJtYyxFQUFxQnJjLEVBQUd6RCxFQUFLMkQsSUFHcENrZCxHQUFvQixTQUEwQnBkLEVBQUcwTSxHQUNuRDdNLEVBQVNHLEdBQ1QsSUFBSXFkLEVBQWF2YixFQUFnQjRLLEdBQzdCL0IsRUFBTytRLEVBQVcyQixHQUFZL04sT0FBT2dPLEdBQXVCRCxJQUloRSxPQUhBdEIsRUFBU3BSLEdBQU0sU0FBVXBPLEdBQ2xCb0QsSUFBZW1SLEdBQXNCM1YsS0FBS2tpQixFQUFZOWdCLElBQU13RCxHQUFnQkMsRUFBR3pELEVBQUs4Z0IsRUFBVzlnQixPQUUvRnlELEdBT0w4USxHQUF3QixTQUE4QkcsR0FDeEQsSUFBSWhSLEVBQUlILEVBQVltUixHQUFHLEdBQ25CclYsRUFBYTJnQixFQUEyQnBoQixLQUFLb0MsS0FBTTBDLEdBQ3ZELFFBQUkxQyxPQUFTMlMsR0FBbUJ4UyxFQUFJOGUsRUFBWXZjLEtBQU92QyxFQUFJK2UsRUFBd0J4YyxRQUM1RXJFLElBQWU4QixFQUFJSCxLQUFNMEMsS0FBT3ZDLEVBQUk4ZSxFQUFZdmMsSUFBTXZDLEVBQUlILEtBQU15ZSxJQUFXemUsS0FBS3llLEdBQVEvYixLQUFLckUsSUFHbEdtRyxHQUE0QixTQUFrQy9CLEVBQUdDLEdBQ25FLElBQUlqRCxFQUFLOEUsRUFBZ0I5QixHQUNyQnpELEVBQU11RCxFQUFZRyxHQUFHLEdBQ3pCLEdBQUlqRCxJQUFPa1QsSUFBbUJ4UyxFQUFJOGUsRUFBWWpnQixJQUFTbUIsRUFBSStlLEVBQXdCbGdCLEdBQW5GLENBQ0EsSUFBSXdDLEVBQWFxZCxFQUErQnBmLEVBQUlULEdBSXBELE9BSEl3QyxJQUFjckIsRUFBSThlLEVBQVlqZ0IsSUFBVW1CLEVBQUlWLEVBQUlnZixJQUFXaGYsRUFBR2dmLEdBQVF6ZixLQUN4RXdDLEVBQVduRCxZQUFhLEdBRW5CbUQsSUFHTHdlLEdBQXVCLFNBQTZCdmQsR0FDdEQsSUFBSXFSLEVBQVFpTCxFQUEwQnhhLEVBQWdCOUIsSUFDbEQyTSxFQUFTLEdBSWIsT0FIQW9QLEVBQVMxSyxHQUFPLFNBQVU5VSxHQUNuQm1CLEVBQUk4ZSxFQUFZamdCLElBQVNtQixFQUFJaU0sRUFBWXBOLElBQU1vUSxFQUFPcEssS0FBS2hHLE1BRTNEb1EsR0FHTDJRLEdBQXlCLFNBQStCdGQsR0FDMUQsSUFBSXdkLEVBQXNCeGQsSUFBTWtRLEVBQzVCbUIsRUFBUWlMLEVBQTBCa0IsRUFBc0JmLEVBQXlCM2EsRUFBZ0I5QixJQUNqRzJNLEVBQVMsR0FNYixPQUxBb1AsRUFBUzFLLEdBQU8sU0FBVTlVLElBQ3BCbUIsRUFBSThlLEVBQVlqZ0IsSUFBVWloQixJQUF1QjlmLEVBQUl3UyxFQUFpQjNULElBQ3hFb1EsRUFBT3BLLEtBQUtpYSxFQUFXamdCLE9BR3BCb1EsSUFLSi9PLElBY0hVLEdBYkE0ZCxFQUFVLFdBQ1IsR0FBSTNlLGdCQUFnQjJlLEVBQVMsTUFBTXpjLFVBQVUsK0JBQzdDLElBQUl3ZCxFQUFldGIsVUFBVUMsYUFBMkJ0QyxJQUFqQnFDLFVBQVUsR0FBK0JqQyxPQUFPaUMsVUFBVSxTQUE3QnJDLEVBQ2hFNFMsRUFBTXZVLEVBQUlzZixHQUNWUSxFQUFTLFNBQVV4aEIsR0FDakJzQixPQUFTMlMsR0FBaUJ1TixFQUFPdGlCLEtBQUtzaEIsRUFBd0J4Z0IsR0FDOUR5QixFQUFJSCxLQUFNeWUsSUFBV3RlLEVBQUlILEtBQUt5ZSxHQUFTOUosS0FBTTNVLEtBQUt5ZSxHQUFROUosSUFBTyxHQUNyRTZLLEdBQW9CeGYsS0FBTTJVLEVBQUs3UixFQUF5QixFQUFHcEUsS0FHN0QsT0FESTBELEdBQWVrZCxJQUFZRSxHQUFvQjdNLEVBQWlCZ0MsRUFBSyxDQUFFN0ksY0FBYyxFQUFNRSxJQUFLa1UsSUFDN0ZuSCxHQUFLcEUsRUFBSytLLEtBR08sVUFBRyxZQUFZLFdBQ3ZDLE9BQU9wYyxFQUFpQnRELE1BQU0yVSxPQUdoQzVULEVBQVM0ZCxFQUFTLGlCQUFpQixTQUFVZSxHQUMzQyxPQUFPM0csR0FBSzNZLEVBQUlzZixHQUFjQSxNQUdoQ3BiLEVBQTJCekQsRUFBSTBTLEdBQy9CMVEsRUFBcUJoQyxFQUFJMkIsR0FDekJxUixFQUErQmhULEVBQUkyRCxHQUNuQzRaLEVBQTBCdmQsRUFBSXdkLEVBQTRCeGQsRUFBSW1mLEdBQzlEMUIsRUFBNEJ6ZCxFQUFJa2YsR0FFaEM1RSxFQUE2QnRhLEVBQUksU0FBVTdDLEdBQ3pDLE9BQU8rYSxHQUFLekosRUFBZ0J0UixHQUFPQSxJQUdqQ29FLElBRUYwYyxFQUFxQkgsRUFBaUIsVUFBRyxjQUFlLENBQ3REN1MsY0FBYyxFQUNkeE4sSUFBSyxXQUNILE9BQU9nRixFQUFpQnRELE1BQU0wZixlQUc3QmxRLEdBQ0h6TyxFQUFTNFIsRUFBaUIsdUJBQXdCWSxHQUF1QixDQUFFM1AsUUFBUSxNQUt6RjJFLEVBQUUsQ0FBRXhJLFFBQVEsRUFBTWdaLE1BQU0sRUFBTWpYLFFBQVN6QixFQUFlMkIsTUFBTzNCLEdBQWlCLENBQzVFN0IsT0FBUW1nQixJQUdWSCxFQUFTTCxFQUFXNWQsS0FBd0IsU0FBVXZDLEdBQ3BEdWdCLEVBQXNCdmdCLE1BR3hCdUssRUFBRSxDQUFFbEgsT0FqTFMsU0FpTE9PLE1BQU0sRUFBTUUsUUFBU3pCLEdBQWlCLENBR3hELElBQU8sU0FBVXJCLEdBQ2YsSUFBSXVWLEVBQVNwUyxPQUFPbkQsR0FDcEIsR0FBSW1CLEVBQUlnZixFQUF3QjVLLEdBQVMsT0FBTzRLLEVBQXVCNUssR0FDdkUsSUFBSW9MLEVBQVNoQixFQUFRcEssR0FHckIsT0FGQTRLLEVBQXVCNUssR0FBVW9MLEVBQ2pDUCxFQUF1Qk8sR0FBVXBMLEVBQzFCb0wsR0FJVFEsT0FBUSxTQUFnQkMsR0FDdEIsSUFBS1IsR0FBU1EsR0FBTSxNQUFNbGUsVUFBVWtlLEVBQU0sb0JBQzFDLEdBQUlqZ0IsRUFBSWlmLEVBQXdCZ0IsR0FBTSxPQUFPaEIsRUFBdUJnQixJQUV0RUMsVUFBVyxXQUFjZixJQUFhLEdBQ3RDZ0IsVUFBVyxXQUFjaEIsSUFBYSxLQUd4Qy9XLEVBQUUsQ0FBRWxILE9BQVEsU0FBVU8sTUFBTSxFQUFNRSxRQUFTekIsRUFBZTJCLE1BQU9JLEdBQWUsQ0FHOUVyRCxPQTNIWSxTQUFnQjBELEVBQUcwTSxHQUMvQixZQUFzQnBOLElBQWZvTixFQUEyQitPLEVBQW1CemIsR0FBS29kLEdBQWtCM0IsRUFBbUJ6YixHQUFJME0sSUE2SG5HL1EsZUFBZ0JvRSxHQUdoQm1MLGlCQUFrQmtTLEdBR2xCamYseUJBQTBCNEQsS0FHNUIrRCxFQUFFLENBQUVsSCxPQUFRLFNBQVVPLE1BQU0sRUFBTUUsUUFBU3pCLEdBQWlCLENBRzFEMlIsb0JBQXFCZ08sR0FHckI3TixzQkFBdUI0TixLQUt6QnhYLEVBQUUsQ0FBRWxILE9BQVEsU0FBVU8sTUFBTSxFQUFNRSxPQUFRYyxHQUFNLFdBQWMwYixFQUE0QnpkLEVBQUUsT0FBVSxDQUNwR3NSLHNCQUF1QixTQUErQjFTLEdBQ3BELE9BQU82ZSxFQUE0QnpkLEVBQUVnUCxFQUFTcFEsT0FNOUNtZixJQVdGclcsRUFBRSxDQUFFbEgsT0FBUSxPQUFRTyxNQUFNLEVBQU1FLFFBVkh6QixHQUFpQnVDLEdBQU0sV0FDbEQsSUFBSStjLEVBQVNoQixJQUViLE1BQStCLFVBQXhCQyxFQUFXLENBQUNlLEtBRWUsTUFBN0JmLEVBQVcsQ0FBRTdaLEVBQUc0YSxLQUVjLE1BQTlCZixFQUFXemdCLE9BQU93aEIsUUFHd0MsQ0FFL0RZLFVBQVcsU0FBbUI5Z0IsRUFBSStnQixFQUFVQyxHQUkxQyxJQUhBLElBRUlDLEVBRkFqRyxFQUFPLENBQUNoYixHQUNSbVIsRUFBUSxFQUVMeE0sVUFBVUMsT0FBU3VNLEdBQU82SixFQUFLelYsS0FBS1osVUFBVXdNLE1BRXJELEdBREE4UCxFQUFZRixHQUNQdmUsRUFBU3VlLFNBQW9CemUsSUFBUHRDLEtBQW9CbWdCLEdBQVNuZ0IsR0FNeEQsT0FMSzZILEVBQVFrWixLQUFXQSxFQUFXLFNBQVV4aEIsRUFBS04sR0FFaEQsR0FEd0IsbUJBQWJnaUIsSUFBeUJoaUIsRUFBUWdpQixFQUFVOWlCLEtBQUtvQyxLQUFNaEIsRUFBS04sS0FDakVraEIsR0FBU2xoQixHQUFRLE9BQU9BLElBRS9CK2IsRUFBSyxHQUFLK0YsRUFDSDVCLEVBQVdoUCxNQUFNLEtBQU02SyxNQU8vQmtFLEVBQWlCLFVBQUVELElBQ3RCNWQsRUFBNEI2ZCxFQUFpQixVQUFHRCxFQUFjQyxFQUFpQixVQUFFeFIsU0FJbkZpSSxFQUFldUosRUE3UUYsVUErUWJ2UyxFQUFXcVMsSUFBVSxHLDZCQ25UckIsSUFBSWxXLEVBQUksRUFBUSxHQUNabkcsRUFBYyxFQUFRLEdBQ3RCckMsRUFBUyxFQUFRLEdBQ2pCSSxFQUFNLEVBQVEsR0FDZDhCLEVBQVcsRUFBUSxHQUNuQjdELEVBQWlCLEVBQVEsR0FBdUN5QyxFQUNoRUksRUFBNEIsRUFBUSxJQUVwQzBmLEVBQWU1Z0IsRUFBT3ZCLE9BRTFCLEdBQUk0RCxHQUFzQyxtQkFBaEJ1ZSxNQUFpQyxnQkFBaUJBLEVBQWF0aEIsaUJBRXhEMEMsSUFBL0I0ZSxJQUFlakIsYUFDZCxDQUNELElBQUlrQixFQUE4QixHQUU5QkMsRUFBZ0IsV0FDbEIsSUFBSW5CLEVBQWN0YixVQUFVQyxPQUFTLFFBQXNCdEMsSUFBakJxQyxVQUFVLFFBQW1CckMsRUFBWUksT0FBT2lDLFVBQVUsSUFDaEdnTCxFQUFTcFAsZ0JBQWdCNmdCLEVBQ3pCLElBQUlGLEVBQWFqQixRQUVEM2QsSUFBaEIyZCxFQUE0QmlCLElBQWlCQSxFQUFhakIsR0FFOUQsTUFEb0IsS0FBaEJBLElBQW9Ca0IsRUFBNEJ4UixJQUFVLEdBQ3ZEQSxHQUVUbk8sRUFBMEI0ZixFQUFlRixHQUN6QyxJQUFJRyxFQUFrQkQsRUFBY3hoQixVQUFZc2hCLEVBQWF0aEIsVUFDN0R5aEIsRUFBZ0JoYixZQUFjK2EsRUFFOUIsSUFBSUUsRUFBaUJELEVBQWdCcmMsU0FDakN1YyxFQUF5QyxnQkFBaEM3ZSxPQUFPd2UsRUFBYSxTQUM3Qk0sRUFBUyx3QkFDYjdpQixFQUFlMGlCLEVBQWlCLGNBQWUsQ0FDN0NoVixjQUFjLEVBQ2R4TixJQUFLLFdBQ0gsSUFBSXFoQixFQUFTMWQsRUFBU2pDLE1BQVFBLEtBQUttTixVQUFZbk4sS0FDM0N1VSxFQUFTd00sRUFBZW5qQixLQUFLK2hCLEdBQ2pDLEdBQUl4ZixFQUFJeWdCLEVBQTZCakIsR0FBUyxNQUFPLEdBQ3JELElBQUl1QixFQUFPRixFQUFTek0sRUFBTzdQLE1BQU0sR0FBSSxHQUFLNlAsRUFBT3BNLFFBQVE4WSxFQUFRLE1BQ2pFLE1BQWdCLEtBQVRDLE9BQWNuZixFQUFZbWYsS0FJckMzWSxFQUFFLENBQUV4SSxRQUFRLEVBQU0rQixRQUFRLEdBQVEsQ0FDaEN0RCxPQUFRcWlCLE0sZ0JDL0NnQixFQUFRLEdBSXBDdEMsQ0FBc0IsYSw2QkNIdEIsSUFBSWhCLEVBQVMsRUFBUSxJQUFpQ0EsT0FDbERsYSxFQUFzQixFQUFRLElBQzlCNFAsRUFBaUIsRUFBUSxJQUd6QkMsRUFBbUI3UCxFQUFvQjJJLElBQ3ZDMUksRUFBbUJELEVBQW9Cd0osVUFGckIsbUJBTXRCb0csRUFBZTlRLE9BQVEsVUFBVSxTQUFVZ1IsR0FDekNELEVBQWlCbFQsS0FBTSxDQUNyQm9GLEtBUmtCLGtCQVNsQm1QLE9BQVFwUyxPQUFPZ1IsR0FDZnZDLE1BQU8sT0FJUixXQUNELElBR0l1USxFQUhBeGQsRUFBUUwsRUFBaUJ0RCxNQUN6QnVVLEVBQVM1USxFQUFNNFEsT0FDZjNELEVBQVFqTixFQUFNaU4sTUFFbEIsT0FBSUEsR0FBUzJELEVBQU9sUSxPQUFlLENBQUUzRixXQUFPcUQsRUFBV3NSLE1BQU0sSUFDN0Q4TixFQUFRNUQsRUFBT2hKLEVBQVEzRCxHQUN2QmpOLEVBQU1pTixPQUFTdVEsRUFBTTljLE9BQ2QsQ0FBRTNGLE1BQU95aUIsRUFBTzlOLE1BQU0sUSxnQkMzQi9CLElBQUl0VCxFQUFTLEVBQVEsR0FDakJxaEIsRUFBZSxFQUFRLEtBQ3ZCQyxFQUF1QixFQUFRLElBQy9CdmdCLEVBQThCLEVBQVEsR0FDdEN3TyxFQUFrQixFQUFRLEdBRTFCb00sRUFBV3BNLEVBQWdCLFlBQzNCRCxFQUFnQkMsRUFBZ0IsZUFDaENnUyxFQUFjRCxFQUFxQm5JLE9BRXZDLElBQUssSUFBSXFJLEtBQW1CSCxFQUFjLENBQ3hDLElBQUlJLEVBQWF6aEIsRUFBT3doQixHQUNwQkUsRUFBc0JELEdBQWNBLEVBQVduaUIsVUFDbkQsR0FBSW9pQixFQUFxQixDQUV2QixHQUFJQSxFQUFvQi9GLEtBQWM0RixFQUFhLElBQ2pEeGdCLEVBQTRCMmdCLEVBQXFCL0YsRUFBVTRGLEdBQzNELE1BQU8zZ0IsR0FDUDhnQixFQUFvQi9GLEdBQVk0RixFQUtsQyxHQUhLRyxFQUFvQnBTLElBQ3ZCdk8sRUFBNEIyZ0IsRUFBcUJwUyxFQUFla1MsR0FFOURILEVBQWFHLEdBQWtCLElBQUssSUFBSWpQLEtBQWUrTyxFQUV6RCxHQUFJSSxFQUFvQm5QLEtBQWlCK08sRUFBcUIvTyxHQUFjLElBQzFFeFIsRUFBNEIyZ0IsRUFBcUJuUCxFQUFhK08sRUFBcUIvTyxJQUNuRixNQUFPM1IsR0FDUDhnQixFQUFvQm5QLEdBQWUrTyxFQUFxQi9PLE8saUJDNUJoRSxJQUFJRixFQUFhLEVBQVEsSUFDckJnTSxFQUE0QixFQUFRLElBQ3BDRSxFQUE4QixFQUFRLElBQ3RDaGMsRUFBVyxFQUFRLEdBR3ZCOUUsRUFBT0QsUUFBVTZVLEVBQVcsVUFBVyxZQUFjLFNBQWlCM1MsR0FDcEUsSUFBSTJOLEVBQU9nUixFQUEwQnZkLEVBQUV5QixFQUFTN0MsSUFDNUMwUyxFQUF3Qm1NLEVBQTRCemQsRUFDeEQsT0FBT3NSLEVBQXdCL0UsRUFBSzJFLE9BQU9JLEVBQXNCMVMsSUFBTzJOLEksaUJDVDFFLElBQUluTCxFQUFXLEVBQVEsR0FDbkJxRixFQUFVLEVBQVEsSUFHbEIrSyxFQUZrQixFQUFRLEVBRWhCL0MsQ0FBZ0IsV0FJOUI5UixFQUFPRCxRQUFVLFNBQVVta0IsRUFBZXJkLEdBQ3hDLElBQUkyRCxFQVNGLE9BUkVWLEVBQVFvYSxLQUdNLG1CQUZoQjFaLEVBQUkwWixFQUFjNWIsY0FFYWtDLElBQU1YLFFBQVNDLEVBQVFVLEVBQUUzSSxXQUMvQzRDLEVBQVMrRixJQUVOLFFBRFZBLEVBQUlBLEVBQUVxSyxNQUNVckssT0FBSWpHLEdBSCtDaUcsT0FBSWpHLEdBS2xFLFNBQVdBLElBQU5pRyxFQUFrQlgsTUFBUVcsR0FBYyxJQUFYM0QsRUFBZSxFQUFJQSxLLGdCQ2xCaEUsSUFBSWlMLEVBQWtCLEVBQVEsR0FDMUJ2USxFQUFTLEVBQVEsSUFDakI4RCxFQUF1QixFQUFRLEdBRS9COGUsRUFBY3JTLEVBQWdCLGVBQzlCbU8sRUFBaUJwVyxNQUFNaEksVUFJUTBDLE1BQS9CMGIsRUFBZWtFLElBQ2pCOWUsRUFBcUJoQyxFQUFFNGMsRUFBZ0JrRSxFQUFhLENBQ2xEN1YsY0FBYyxFQUNkcE4sTUFBT0ssRUFBTyxRQUtsQnZCLEVBQU9ELFFBQVUsU0FBVXlCLEdBQ3pCeWUsRUFBZWtFLEdBQWEzaUIsSUFBTyxJLGNDaEJyQ3hCLEVBQU9ELFFBQVUsQ0FDZnFrQixZQUFhLEVBQ2JDLG9CQUFxQixFQUNyQkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMscUJBQXNCLEVBQ3RCQyxTQUFVLEVBQ1ZDLGtCQUFtQixFQUNuQkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQkMsa0JBQW1CLEVBQ25CQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxTQUFVLEVBQ1ZDLGlCQUFrQixFQUNsQkMsT0FBUSxFQUNSQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsY0FBZSxFQUNmQyxlQUFnQixFQUNoQkMsYUFBYyxFQUNkQyxjQUFlLEVBQ2ZDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxlQUFnQixFQUNoQkMsaUJBQWtCLEVBQ2xCQyxjQUFlLEVBQ2ZDLFVBQVcsSSxxQkNqQ2IsSUFBSW5iLEVBQUksRUFBUSxHQUNaM0YsRUFBUSxFQUFRLEdBQ2hCaU4sRUFBVyxFQUFRLElBQ25COFQsRUFBdUIsRUFBUSxJQUMvQmpSLEVBQTJCLEVBQVEsSUFNdkNuSyxFQUFFLENBQUVsSCxPQUFRLFNBQVVPLE1BQU0sRUFBTUUsT0FKUmMsR0FBTSxXQUFjK2dCLEVBQXFCLE1BSUozaEIsTUFBTzBRLEdBQTRCLENBQ2hHRSxlQUFnQixTQUF3Qm5ULEdBQ3RDLE9BQU9ra0IsRUFBcUI5VCxFQUFTcFEsUSxnQkNaekMsSUFBSThJLEVBQUksRUFBUSxHQUNaNkosRUFBYSxFQUFRLElBQ3JCcE8sRUFBWSxFQUFRLElBQ3BCMUIsRUFBVyxFQUFRLEdBQ25CTCxFQUFXLEVBQVEsR0FDbkJsRCxFQUFTLEVBQVEsSUFDakJFLEVBQU8sRUFBUSxLQUNmMkQsRUFBUSxFQUFRLEdBRWhCZ2hCLEVBQWtCeFIsRUFBVyxVQUFXLGFBTXhDeVIsRUFBaUJqaEIsR0FBTSxXQUN6QixTQUFTc00sS0FDVCxRQUFTMFUsR0FBZ0IsY0FBNkIsR0FBSTFVLGFBQWNBLE1BRXRFNFUsR0FBWWxoQixHQUFNLFdBQ3BCZ2hCLEdBQWdCLGtCQUVkak4sRUFBU2tOLEdBQWtCQyxFQUUvQnZiLEVBQUUsQ0FBRWxILE9BQVEsVUFBV08sTUFBTSxFQUFNRSxPQUFRNlUsRUFBUTNVLEtBQU0yVSxHQUFVLENBQ2pFb04sVUFBVyxTQUFtQkMsRUFBUXZKLEdBQ3BDelcsRUFBVWdnQixHQUNWMWhCLEVBQVNtWSxHQUNULElBQUl3SixFQUFZN2YsVUFBVUMsT0FBUyxFQUFJMmYsRUFBU2hnQixFQUFVSSxVQUFVLElBQ3BFLEdBQUkwZixJQUFhRCxFQUFnQixPQUFPRCxFQUFnQkksRUFBUXZKLEVBQU13SixHQUN0RSxHQUFJRCxHQUFVQyxFQUFXLENBRXZCLE9BQVF4SixFQUFLcFcsUUFDWCxLQUFLLEVBQUcsT0FBTyxJQUFJMmYsRUFDbkIsS0FBSyxFQUFHLE9BQU8sSUFBSUEsRUFBT3ZKLEVBQUssSUFDL0IsS0FBSyxFQUFHLE9BQU8sSUFBSXVKLEVBQU92SixFQUFLLEdBQUlBLEVBQUssSUFDeEMsS0FBSyxFQUFHLE9BQU8sSUFBSXVKLEVBQU92SixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUNqRCxLQUFLLEVBQUcsT0FBTyxJQUFJdUosRUFBT3ZKLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFHNUQsSUFBSXlKLEVBQVEsQ0FBQyxNQUViLE9BREFBLEVBQU1sZixLQUFLNEssTUFBTXNVLEVBQU96SixHQUNqQixJQUFLeGIsRUFBSzJRLE1BQU1vVSxFQUFRRSxJQUdqQyxJQUFJdEgsRUFBUXFILEVBQVU1a0IsVUFDbEI4a0IsRUFBV3BsQixFQUFPa0QsRUFBUzJhLEdBQVNBLEVBQVF6ZSxPQUFPa0IsV0FDbkQrUCxFQUFTblAsU0FBUzJQLE1BQU1oUyxLQUFLb21CLEVBQVFHLEVBQVUxSixHQUNuRCxPQUFPeFksRUFBU21OLEdBQVVBLEVBQVMrVSxNLGdCQ2hEdkMsSUFBSTVmLEVBQWtCLEVBQVEsSUFDMUJ1TCxFQUFXLEVBQVEsSUFDbkJzVSxFQUFrQixFQUFRLElBRzFCcFUsRUFBZSxTQUFVcVUsR0FDM0IsT0FBTyxTQUFVN1QsRUFBTzhULEVBQUlDLEdBQzFCLElBR0k3bEIsRUFIQStELEVBQUk4QixFQUFnQmlNLEdBQ3BCbk0sRUFBU3lMLEVBQVNyTixFQUFFNEIsUUFDcEJ1TSxFQUFRd1QsRUFBZ0JHLEVBQVdsZ0IsR0FJdkMsR0FBSWdnQixHQUFlQyxHQUFNQSxHQUFJLEtBQU9qZ0IsRUFBU3VNLEdBRzNDLElBRkFsUyxFQUFRK0QsRUFBRW1PLE9BRUdsUyxFQUFPLE9BQU8sT0FFdEIsS0FBTTJGLEVBQVN1TSxFQUFPQSxJQUMzQixJQUFLeVQsR0FBZXpULEtBQVNuTyxJQUFNQSxFQUFFbU8sS0FBVzBULEVBQUksT0FBT0QsR0FBZXpULEdBQVMsRUFDbkYsT0FBUXlULElBQWdCLElBSTlCN21CLEVBQU9ELFFBQVUsQ0FHZmluQixTQUFVeFUsR0FBYSxHQUd2QjNKLFFBQVMySixHQUFhLEssa0JDOUJ4QixJQUFJalEsRUFBUyxFQUFRLEdBQ2pCcUQsRUFBZ0IsRUFBUSxJQUV4QmlKLEVBQVV0TSxFQUFPc00sUUFFckI3TyxFQUFPRCxRQUE2QixtQkFBWjhPLEdBQTBCLGNBQWN0RSxLQUFLM0UsRUFBY2lKLEssZ0JDTG5GLElBQUlqSyxFQUFjLEVBQVEsR0FDdEJTLEVBQXVCLEVBQVEsR0FDL0JQLEVBQVcsRUFBUSxHQUNuQjZiLEVBQWEsRUFBUSxJQUt6QjNnQixFQUFPRCxRQUFVNkUsRUFBY2pFLE9BQU93UCxpQkFBbUIsU0FBMEJsTCxFQUFHME0sR0FDcEY3TSxFQUFTRyxHQUtULElBSkEsSUFHSXpELEVBSEFvTyxFQUFPK1EsRUFBV2hQLEdBQ2xCOUssRUFBUytJLEVBQUsvSSxPQUNkdU0sRUFBUSxFQUVMdk0sRUFBU3VNLEdBQU8vTixFQUFxQmhDLEVBQUU0QixFQUFHekQsRUFBTW9PLEVBQUt3RCxLQUFVekIsRUFBV25RLElBQ2pGLE9BQU95RCxJLDZCQ2RULElBQUk4RixFQUFJLEVBQVEsR0FDWmtjLEVBQVUsRUFBUSxJQUFnQzNULE9BUXREdkksRUFBRSxDQUFFbEgsT0FBUSxRQUFTdWIsT0FBTyxFQUFNOWEsUUFQQyxFQUFRLEdBRWpCNGlCLENBQTZCLFdBS1csQ0FDaEU1VCxPQUFRLFNBQWdCTCxHQUN0QixPQUFPZ1UsRUFBUXprQixLQUFNeVEsRUFBWXJNLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLckMsTyw2QkNYM0UsSUFBSWlDLEVBQVksRUFBUSxJQUNwQi9CLEVBQVcsRUFBUSxHQUVuQnlDLEVBQVEsR0FBR0EsTUFDWGlnQixFQUFZLEdBRVpaLEVBQVksU0FBVS9iLEVBQUc0YyxFQUFZbkssR0FDdkMsS0FBTW1LLEtBQWNELEdBQVksQ0FDOUIsSUFBSyxJQUFJRSxFQUFPLEdBQUlwbkIsRUFBSSxFQUFHQSxFQUFJbW5CLEVBQVlubkIsSUFBS29uQixFQUFLcG5CLEdBQUssS0FBT0EsRUFBSSxJQUVyRWtuQixFQUFVQyxHQUFjM2tCLFNBQVMsTUFBTyxnQkFBa0I0a0IsRUFBSy9nQixLQUFLLEtBQU8sS0FDM0UsT0FBTzZnQixFQUFVQyxHQUFZNWMsRUFBR3lTLElBS3BDamQsRUFBT0QsUUFBVTBDLFNBQVNoQixNQUFRLFNBQWMwUSxHQUM5QyxJQUFJMUMsRUFBS2pKLEVBQVVoRSxNQUNmOGtCLEVBQVdwZ0IsRUFBTTlHLEtBQUt3RyxVQUFXLEdBQ2pDdU0sRUFBZ0IsV0FDbEIsSUFBSThKLEVBQU9xSyxFQUFTL1MsT0FBT3JOLEVBQU05RyxLQUFLd0csWUFDdEMsT0FBT3BFLGdCQUFnQjJRLEVBQWdCb1QsRUFBVTlXLEVBQUl3TixFQUFLcFcsT0FBUW9XLEdBQVF4TixFQUFHMkMsTUFBTUQsRUFBTThLLElBRzNGLE9BREl4WSxFQUFTZ0wsRUFBRzVOLGFBQVlzUixFQUFjdFIsVUFBWTROLEVBQUc1TixXQUNsRHNSLEksNkJDeEJULElBQUlnRCxFQUF3QixFQUFRLElBQ2hDbkcsRUFBVSxFQUFRLElBSXRCaFEsRUFBT0QsUUFBVW9XLEVBQXdCLEdBQUdsUCxTQUFXLFdBQ3JELE1BQU8sV0FBYStJLEVBQVF4TixNQUFRLE0sZ0JDUHRDLElBQUlELEVBQVMsRUFBUSxHQUVyQnZDLEVBQU9ELFFBQVV3QyxFQUFPMEwsUyxnQkNGeEIsSUFBSTFLLEVBQVcsRUFBUSxJQUV2QnZELEVBQU9ELFFBQVUsU0FBVThELEVBQVEwTixFQUFLNU4sR0FDdEMsSUFBSyxJQUFJbkMsS0FBTytQLEVBQUtoTyxFQUFTTSxFQUFRckMsRUFBSytQLEVBQUkvUCxHQUFNbUMsR0FDckQsT0FBT0UsSSw2QkNIVCxJQUFJK1EsRUFBYSxFQUFRLElBQ3JCdlAsRUFBdUIsRUFBUSxHQUMvQnlNLEVBQWtCLEVBQVEsR0FDMUJsTixFQUFjLEVBQVEsR0FFdEJpUSxFQUFVL0MsRUFBZ0IsV0FFOUI5UixFQUFPRCxRQUFVLFNBQVV3bkIsR0FDekIsSUFBSUMsRUFBYzVTLEVBQVcyUyxHQUN6QjNtQixFQUFpQnlFLEVBQXFCaEMsRUFFdEN1QixHQUFlNGlCLElBQWdCQSxFQUFZM1MsSUFDN0NqVSxFQUFlNG1CLEVBQWEzUyxFQUFTLENBQ25DdkcsY0FBYyxFQUNkeE4sSUFBSyxXQUFjLE9BQU8wQixVLGNDZmhDeEMsRUFBT0QsUUFBVSxTQUFVa0MsRUFBSXVsQixFQUFhaG5CLEdBQzFDLEtBQU15QixhQUFjdWxCLEdBQ2xCLE1BQU05aUIsVUFBVSxjQUFnQmxFLEVBQU9BLEVBQU8sSUFBTSxJQUFNLGNBQzFELE9BQU95QixJLGdCQ0hYLElBQUk2QyxFQUFXLEVBQVEsR0FDbkIyaUIsRUFBd0IsRUFBUSxJQUNoQ25WLEVBQVcsRUFBUSxJQUNuQjdRLEVBQU8sRUFBUSxJQUNmaW1CLEVBQW9CLEVBQVEsSUFDNUJDLEVBQWdCLEVBQVEsSUFFeEJDLEVBQVMsU0FBVUMsRUFBU2pXLEdBQzlCcFAsS0FBS3FsQixRQUFVQSxFQUNmcmxCLEtBQUtvUCxPQUFTQSxHQUdoQjVSLEVBQU9ELFFBQVUsU0FBVXdaLEVBQVV1TyxFQUFpQm5rQixHQUNwRCxJQUtJcVQsRUFBVStRLEVBQVEzVSxFQUFPdk0sRUFBUStLLEVBQVEwTSxFQUFNMEosRUFML0M3VixFQUFPeE8sR0FBV0EsRUFBUXdPLEtBQzFCOFYsS0FBZ0J0a0IsSUFBV0EsRUFBUXNrQixZQUNuQ0MsS0FBaUJ2a0IsSUFBV0EsRUFBUXVrQixhQUNwQ0MsS0FBaUJ4a0IsSUFBV0EsRUFBUXdrQixhQUNwQzFZLEVBQUtoTyxFQUFLcW1CLEVBQWlCM1YsRUFBTSxFQUFJOFYsRUFBYUUsR0FHbERDLEVBQU8sU0FBVUMsR0FFbkIsT0FESXJSLEdBQVUyUSxFQUFjM1EsR0FDckIsSUFBSTRRLEdBQU8sRUFBTVMsSUFHdEJDLEVBQVMsU0FBVXBuQixHQUNyQixPQUFJK21CLEdBQ0ZuakIsRUFBUzVELEdBQ0ZpbkIsRUFBYzFZLEVBQUd2TyxFQUFNLEdBQUlBLEVBQU0sR0FBSWtuQixHQUFRM1ksRUFBR3ZPLEVBQU0sR0FBSUEsRUFBTSxLQUNoRWluQixFQUFjMVksRUFBR3ZPLEVBQU9rbkIsR0FBUTNZLEVBQUd2TyxJQUc5QyxHQUFJZ25CLEVBQ0ZsUixFQUFXdUMsTUFDTixDQUVMLEdBQXFCLG1CQURyQndPLEVBQVNMLEVBQWtCbk8sSUFDTSxNQUFNN1UsVUFBVSwwQkFFakQsR0FBSStpQixFQUFzQk0sR0FBUyxDQUNqQyxJQUFLM1UsRUFBUSxFQUFHdk0sRUFBU3lMLEVBQVNpSCxFQUFTMVMsUUFBU0EsRUFBU3VNLEVBQU9BLElBRWxFLElBREF4QixFQUFTMFcsRUFBTy9PLEVBQVNuRyxNQUNYeEIsYUFBa0JnVyxFQUFRLE9BQU9oVyxFQUMvQyxPQUFPLElBQUlnVyxHQUFPLEdBRXRCNVEsRUFBVytRLEVBQU8zbkIsS0FBS21aLEdBSXpCLElBREErRSxFQUFPdEgsRUFBU3NILE9BQ1AwSixFQUFPMUosRUFBS2xlLEtBQUs0VyxJQUFXbkIsTUFBTSxDQUN6QyxJQUNFakUsRUFBUzBXLEVBQU9OLEVBQUs5bUIsT0FDckIsTUFBT2lDLEdBRVAsTUFEQXdrQixFQUFjM1EsR0FDUjdULEVBRVIsR0FBcUIsaUJBQVZ5TyxHQUFzQkEsR0FBVUEsYUFBa0JnVyxFQUFRLE9BQU9oVyxFQUM1RSxPQUFPLElBQUlnVyxHQUFPLEssZ0JDeER0QixJQWVJVyxFQUFPQyxFQUFNQyxFQUFNL08sRUFBUWdQLEVBQVFDLEVBQU12UCxFQUFTbEwsRUFmbEQzTCxFQUFTLEVBQVEsR0FDakJhLEVBQTJCLEVBQVEsSUFBbURDLEVBQ3RGdWxCLEVBQVksRUFBUSxJQUFxQnBhLElBQ3pDME4sRUFBUyxFQUFRLElBQ2pCMk0sRUFBa0IsRUFBUSxLQUMxQnBVLEVBQVUsRUFBUSxJQUVsQnFVLEVBQW1Cdm1CLEVBQU91bUIsa0JBQW9Cdm1CLEVBQU93bUIsdUJBQ3JEdmMsRUFBV2pLLEVBQU9pSyxTQUNsQnlELEVBQVUxTixFQUFPME4sUUFDakJoQyxFQUFVMUwsRUFBTzBMLFFBRWpCK2EsRUFBMkI1bEIsRUFBeUJiLEVBQVEsa0JBQzVEMG1CLEVBQWlCRCxHQUE0QkEsRUFBeUI5bkIsTUFLckUrbkIsSUFDSFYsRUFBUSxXQUNOLElBQUl6TixFQUFRckwsRUFFWixJQURJZ0YsSUFBWXFHLEVBQVM3SyxFQUFRWSxTQUFTaUssRUFBT04sT0FDMUNnTyxHQUFNLENBQ1gvWSxFQUFLK1ksRUFBSy9ZLEdBQ1YrWSxFQUFPQSxFQUFLbEssS0FDWixJQUNFN08sSUFDQSxNQUFPdE0sR0FHUCxNQUZJcWxCLEVBQU05TyxJQUNMK08sT0FBT2xrQixFQUNOcEIsR0FFUnNsQixPQUFPbGtCLEVBQ0x1VyxHQUFRQSxFQUFPUCxTQUtoQjJCLEdBQVd6SCxHQUFZb1UsSUFBbUJDLElBQW9CdGMsRUFReER5QixHQUFXQSxFQUFRRSxTQUU1QmlMLEVBQVVuTCxFQUFRRSxhQUFRNUosR0FDMUIySixFQUFPa0wsRUFBUWxMLEtBQ2Z3TCxFQUFTLFdBQ1B4TCxFQUFLOU4sS0FBS2daLEVBQVNtUCxLQUlyQjdPLEVBRFNqRixFQUNBLFdBQ1B4RSxFQUFRaU4sU0FBU3FMLElBU1YsV0FFUEssRUFBVXhvQixLQUFLbUMsRUFBUWdtQixLQTVCekJHLEdBQVMsRUFDVEMsRUFBT25jLEVBQVNDLGVBQWUsSUFDL0IsSUFBSXFjLEVBQWlCUCxHQUFPVyxRQUFRUCxFQUFNLENBQUVRLGVBQWUsSUFDM0R6UCxFQUFTLFdBQ1BpUCxFQUFLOWIsS0FBTzZiLEdBQVVBLEtBNkI1QjFvQixFQUFPRCxRQUFVa3BCLEdBQWtCLFNBQVV4WixHQUMzQyxJQUFJeUksRUFBTyxDQUFFekksR0FBSUEsRUFBSTZPLFVBQU0vWixHQUN2QmtrQixJQUFNQSxFQUFLbkssS0FBT3BHLEdBQ2pCc1EsSUFDSEEsRUFBT3RRLEVBQ1B3QixLQUNBK08sRUFBT3ZRLEksZ0JDOUVYLElBQUlyRSxFQUFZLEVBQVEsSUFFeEI3VCxFQUFPRCxRQUFVLHFCQUFxQndLLEtBQUtzSixJLGdCQ0YzQyxJQUFJL08sRUFBVyxFQUFRLEdBQ25CTCxFQUFXLEVBQVEsR0FDbkJtVSxFQUF1QixFQUFRLElBRW5DNVksRUFBT0QsUUFBVSxTQUFVeUssRUFBR1IsR0FFNUIsR0FEQWxGLEVBQVMwRixHQUNML0YsRUFBU3VGLElBQU1BLEVBQUUxQixjQUFnQmtDLEVBQUcsT0FBT1IsRUFDL0MsSUFBSW9mLEVBQW9CeFEsRUFBcUJ2VixFQUFFbUgsR0FHL0MsT0FEQTJELEVBRGNpYixFQUFrQmpiLFNBQ3hCbkUsR0FDRG9mLEVBQWtCaFEsVSxnQkNWM0IsSUFBSTdXLEVBQVMsRUFBUSxHQUVyQnZDLEVBQU9ELFFBQVUsU0FBVXdILEVBQUcwQixHQUM1QixJQUFJb2dCLEVBQVU5bUIsRUFBTzhtQixRQUNqQkEsR0FBV0EsRUFBUWxtQixRQUNBLElBQXJCeUQsVUFBVUMsT0FBZXdpQixFQUFRbG1CLE1BQU1vRSxHQUFLOGhCLEVBQVFsbUIsTUFBTW9FLEVBQUcwQixNLGNDTGpFakosRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsSUFDRSxNQUFPLENBQUVDLE9BQU8sRUFBT2pDLE1BQU9nQyxLQUM5QixNQUFPQyxHQUNQLE1BQU8sQ0FBRUEsT0FBTyxFQUFNakMsTUFBT2lDLE0sZ0JDSGpDLElBQUk0RCxFQUFrQixFQUFRLElBQzFCeWIsRUFBdUIsRUFBUSxJQUE4Q25mLEVBRTdFNEQsRUFBVyxHQUFHQSxTQUVkcWlCLEVBQStCLGlCQUFWam5CLFFBQXNCQSxRQUFVMUIsT0FBTzZULG9CQUM1RDdULE9BQU82VCxvQkFBb0JuUyxRQUFVLEdBV3pDckMsRUFBT0QsUUFBUXNELEVBQUksU0FBNkJwQixHQUM5QyxPQUFPcW5CLEdBQW9DLG1CQUFyQnJpQixFQUFTN0csS0FBSzZCLEdBVmpCLFNBQVVBLEdBQzdCLElBQ0UsT0FBT3VnQixFQUFxQnZnQixHQUM1QixNQUFPa0IsR0FDUCxPQUFPbW1CLEVBQVlwaUIsU0FPakJxaUIsQ0FBZXRuQixHQUNmdWdCLEVBQXFCemIsRUFBZ0I5RSxNLDZCQ3BCM0MsSUFBSStiLEVBQW9CLEVBQVEsSUFBK0JBLGtCQUMzRHpjLEVBQVMsRUFBUSxJQUNqQitELEVBQTJCLEVBQVEsSUFDbkNzUyxFQUFpQixFQUFRLElBQ3pCcEMsRUFBWSxFQUFRLElBRXBCMkksRUFBYSxXQUFjLE9BQU8zYixNQUV0Q3hDLEVBQU9ELFFBQVUsU0FBVXNlLEVBQXFCVCxFQUFNVSxHQUNwRCxJQUFJek0sRUFBZ0IrTCxFQUFPLFlBSTNCLE9BSEFTLEVBQW9CeGMsVUFBWU4sRUFBT3ljLEVBQW1CLENBQUVNLEtBQU1oWixFQUF5QixFQUFHZ1osS0FDOUYxRyxFQUFleUcsRUFBcUJ4TSxHQUFlLEdBQU8sR0FDMUQyRCxFQUFVM0QsR0FBaUJzTSxFQUNwQkUsSSxnQkNiVCxJQUFJdlosRUFBVyxFQUFRLEdBQ25CMGtCLEVBQXFCLEVBQVEsS0FNakN4cEIsRUFBT0QsUUFBVVksT0FBT21kLGlCQUFtQixhQUFlLEdBQUssV0FDN0QsSUFFSTRFLEVBRkErRyxHQUFpQixFQUNqQmxmLEVBQU8sR0FFWCxLQUVFbVksRUFBUy9oQixPQUFPeUMseUJBQXlCekMsT0FBT2tCLFVBQVcsYUFBYTJNLEtBQ2pFcE8sS0FBS21LLEVBQU0sSUFDbEJrZixFQUFpQmxmLGFBQWdCVixNQUNqQyxNQUFPMUcsSUFDVCxPQUFPLFNBQXdCOEIsRUFBR21hLEdBS2hDLE9BSkF0YSxFQUFTRyxHQUNUdWtCLEVBQW1CcEssR0FDZnFLLEVBQWdCL0csRUFBT3RpQixLQUFLNkUsRUFBR21hLEdBQzlCbmEsRUFBRXlrQixVQUFZdEssRUFDWm5hLEdBZm9ELFFBaUJ6RFYsSSxnQkN6Qk4sSUFBSUUsRUFBVyxFQUFRLEdBRXZCekUsRUFBT0QsUUFBVSxTQUFVa0MsR0FDekIsSUFBS3dDLEVBQVN4QyxJQUFjLE9BQVBBLEVBQ25CLE1BQU15QyxVQUFVLGFBQWVDLE9BQU8xQyxHQUFNLG1CQUM1QyxPQUFPQSxJLGdCQ0VYLElBQUkwbkIsRUFBVyxTQUFVNXBCLEdBQ3ZCLGFBRUEsSUFFSXdFLEVBRkFxbEIsRUFBS2pwQixPQUFPa0IsVUFDWmdvQixFQUFTRCxFQUFHOW5CLGVBRVpxZixFQUE0QixtQkFBWG5nQixPQUF3QkEsT0FBUyxHQUNsRDhvQixFQUFpQjNJLEVBQVFuSyxVQUFZLGFBQ3JDK1MsRUFBc0I1SSxFQUFRNkksZUFBaUIsa0JBQy9DQyxFQUFvQjlJLEVBQVFsZ0IsYUFBZSxnQkFFL0MsU0FBU2lwQixFQUFPQyxFQUFLM29CLEVBQUtOLEdBT3hCLE9BTkFQLE9BQU9DLGVBQWV1cEIsRUFBSzNvQixFQUFLLENBQzlCTixNQUFPQSxFQUNQTCxZQUFZLEVBQ1p5TixjQUFjLEVBQ2RDLFVBQVUsSUFFTDRiLEVBQUkzb0IsR0FFYixJQUVFMG9CLEVBQU8sR0FBSSxJQUNYLE1BQU9FLEdBQ1BGLEVBQVMsU0FBU0MsRUFBSzNvQixFQUFLTixHQUMxQixPQUFPaXBCLEVBQUkzb0IsR0FBT04sR0FJdEIsU0FBU3FhLEVBQUs4TyxFQUFTQyxFQUFTaG9CLEVBQU1pb0IsR0FFcEMsSUFBSUMsRUFBaUJGLEdBQVdBLEVBQVF6b0IscUJBQXFCNG9CLEVBQVlILEVBQVVHLEVBQy9FQyxFQUFZL3BCLE9BQU9ZLE9BQU9pcEIsRUFBZTNvQixXQUN6QytHLEVBQVUsSUFBSStoQixFQUFRSixHQUFlLElBTXpDLE9BRkFHLEVBQVVFLFFBc01aLFNBQTBCUCxFQUFTL25CLEVBQU1zRyxHQUN2QyxJQUFJekMsRUFBUTBrQixFQUVaLE9BQU8sU0FBZ0Jsa0IsRUFBUXFOLEdBQzdCLEdBQUk3TixJQUFVMmtCLEVBQ1osTUFBTSxJQUFJQyxNQUFNLGdDQUdsQixHQUFJNWtCLElBQVU2a0IsRUFBbUIsQ0FDL0IsR0FBZSxVQUFYcmtCLEVBQ0YsTUFBTXFOLEVBS1IsT0FBT2lYLElBTVQsSUFIQXJpQixFQUFRakMsT0FBU0EsRUFDakJpQyxFQUFRb0wsSUFBTUEsSUFFRCxDQUNYLElBQUlrWCxFQUFXdGlCLEVBQVFzaUIsU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCQyxFQUFvQkYsRUFBVXRpQixHQUNuRCxHQUFJdWlCLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CdmlCLEVBQVFqQyxPQUdWaUMsRUFBUTBpQixLQUFPMWlCLEVBQVEyaUIsTUFBUTNpQixFQUFRb0wsU0FFbEMsR0FBdUIsVUFBbkJwTCxFQUFRakMsT0FBb0IsQ0FDckMsR0FBSVIsSUFBVTBrQixFQUVaLE1BREExa0IsRUFBUTZrQixFQUNGcGlCLEVBQVFvTCxJQUdoQnBMLEVBQVE0aUIsa0JBQWtCNWlCLEVBQVFvTCxTQUVOLFdBQW5CcEwsRUFBUWpDLFFBQ2pCaUMsRUFBUTZpQixPQUFPLFNBQVU3aUIsRUFBUW9MLEtBR25DN04sRUFBUTJrQixFQUVSLElBQUlZLEVBQVNDLEVBQVN0QixFQUFTL25CLEVBQU1zRyxHQUNyQyxHQUFvQixXQUFoQjhpQixFQUFPOWpCLEtBQW1CLENBTzVCLEdBSkF6QixFQUFReUMsRUFBUWlOLEtBQ1ptVixFQUNBWSxFQUVBRixFQUFPMVgsTUFBUXFYLEVBQ2pCLFNBR0YsTUFBTyxDQUNMbnFCLE1BQU93cUIsRUFBTzFYLElBQ2Q2QixLQUFNak4sRUFBUWlOLE1BR1MsVUFBaEI2VixFQUFPOWpCLE9BQ2hCekIsRUFBUTZrQixFQUdScGlCLEVBQVFqQyxPQUFTLFFBQ2pCaUMsRUFBUW9MLElBQU0wWCxFQUFPMVgsT0E5UVA2WCxDQUFpQnhCLEVBQVMvbkIsRUFBTXNHLEdBRTdDOGhCLEVBY1QsU0FBU2lCLEVBQVNsYyxFQUFJMGEsRUFBS25XLEdBQ3pCLElBQ0UsTUFBTyxDQUFFcE0sS0FBTSxTQUFVb00sSUFBS3ZFLEVBQUdyUCxLQUFLK3BCLEVBQUtuVyxJQUMzQyxNQUFPb1csR0FDUCxNQUFPLENBQUV4aUIsS0FBTSxRQUFTb00sSUFBS29XLElBaEJqQ3JxQixFQUFRd2IsS0FBT0EsRUFvQmYsSUFBSXNQLEVBQXlCLGlCQUN6QmUsRUFBeUIsaUJBQ3pCZCxFQUFvQixZQUNwQkUsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNaLEtBQ1QsU0FBU3FCLEtBQ1QsU0FBU0MsS0FJVCxJQUFJL04sRUFBb0IsR0FDeEJBLEVBQWtCOEwsR0FBa0IsV0FDbEMsT0FBT3RuQixNQUdULElBQUl3cEIsRUFBV3JyQixPQUFPeVUsZUFDbEI2VyxFQUEwQkQsR0FBWUEsRUFBU0EsRUFBU3RRLEVBQU8sTUFDL0R1USxHQUNBQSxJQUE0QnJDLEdBQzVCQyxFQUFPenBCLEtBQUs2ckIsRUFBeUJuQyxLQUd2QzlMLEVBQW9CaU8sR0FHdEIsSUFBSUMsRUFBS0gsRUFBMkJscUIsVUFDbEM0b0IsRUFBVTVvQixVQUFZbEIsT0FBT1ksT0FBT3ljLEdBV3RDLFNBQVNtTyxFQUFzQnRxQixHQUM3QixDQUFDLE9BQVEsUUFBUyxVQUFVa0ssU0FBUSxTQUFTcEYsR0FDM0N1akIsRUFBT3JvQixFQUFXOEUsR0FBUSxTQUFTcU4sR0FDakMsT0FBT3hSLEtBQUtvb0IsUUFBUWprQixFQUFRcU4sU0FrQ2xDLFNBQVNvWSxFQUFjMUIsRUFBVzJCLEdBZ0NoQyxJQUFJQyxFQWdDSjlwQixLQUFLb29CLFFBOUJMLFNBQWlCamtCLEVBQVFxTixHQUN2QixTQUFTdVksSUFDUCxPQUFPLElBQUlGLEdBQVksU0FBU2xlLEVBQVNpTSxJQW5DN0MsU0FBU29TLEVBQU83bEIsRUFBUXFOLEVBQUs3RixFQUFTaU0sR0FDcEMsSUFBSXNSLEVBQVNDLEVBQVNqQixFQUFVL2pCLEdBQVMrakIsRUFBVzFXLEdBQ3BELEdBQW9CLFVBQWhCMFgsRUFBTzlqQixLQUVKLENBQ0wsSUFBSWdLLEVBQVM4WixFQUFPMVgsSUFDaEI5UyxFQUFRMFEsRUFBTzFRLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQMm9CLEVBQU96cEIsS0FBS2MsRUFBTyxXQUNkbXJCLEVBQVlsZSxRQUFRak4sRUFBTXVyQixTQUFTdmUsTUFBSyxTQUFTaE4sR0FDdERzckIsRUFBTyxPQUFRdHJCLEVBQU9pTixFQUFTaU0sTUFDOUIsU0FBU2dRLEdBQ1ZvQyxFQUFPLFFBQVNwQyxFQUFLamMsRUFBU2lNLE1BSTNCaVMsRUFBWWxlLFFBQVFqTixHQUFPZ04sTUFBSyxTQUFTd2UsR0FJOUM5YSxFQUFPMVEsTUFBUXdyQixFQUNmdmUsRUFBUXlELE1BQ1AsU0FBU3pPLEdBR1YsT0FBT3FwQixFQUFPLFFBQVNycEIsRUFBT2dMLEVBQVNpTSxNQXZCekNBLEVBQU9zUixFQUFPMVgsS0FpQ1p3WSxDQUFPN2xCLEVBQVFxTixFQUFLN0YsRUFBU2lNLE1BSWpDLE9BQU9rUyxFQWFMQSxFQUFrQkEsRUFBZ0JwZSxLQUNoQ3FlLEVBR0FBLEdBQ0VBLEtBa0hWLFNBQVNuQixFQUFvQkYsRUFBVXRpQixHQUNyQyxJQUFJakMsRUFBU3VrQixFQUFTbFUsU0FBU3BPLEVBQVFqQyxRQUN2QyxHQUFJQSxJQUFXcEMsRUFBVyxDQUt4QixHQUZBcUUsRUFBUXNpQixTQUFXLEtBRUksVUFBbkJ0aUIsRUFBUWpDLE9BQW9CLENBRTlCLEdBQUl1a0IsRUFBU2xVLFNBQWlCLFNBRzVCcE8sRUFBUWpDLE9BQVMsU0FDakJpQyxFQUFRb0wsSUFBTXpQLEVBQ2Q2bUIsRUFBb0JGLEVBQVV0aUIsR0FFUCxVQUFuQkEsRUFBUWpDLFFBR1YsT0FBTzBrQixFQUlYemlCLEVBQVFqQyxPQUFTLFFBQ2pCaUMsRUFBUW9MLElBQU0sSUFBSXRQLFVBQ2hCLGtEQUdKLE9BQU8ybUIsRUFHVCxJQUFJSyxFQUFTQyxFQUFTaGxCLEVBQVF1a0IsRUFBU2xVLFNBQVVwTyxFQUFRb0wsS0FFekQsR0FBb0IsVUFBaEIwWCxFQUFPOWpCLEtBSVQsT0FIQWdCLEVBQVFqQyxPQUFTLFFBQ2pCaUMsRUFBUW9MLElBQU0wWCxFQUFPMVgsSUFDckJwTCxFQUFRc2lCLFNBQVcsS0FDWkcsRUFHVCxJQUFJc0IsRUFBT2pCLEVBQU8xWCxJQUVsQixPQUFNMlksRUFPRkEsRUFBSzlXLE1BR1BqTixFQUFRc2lCLEVBQVMwQixZQUFjRCxFQUFLenJCLE1BR3BDMEgsRUFBUTBWLEtBQU80TSxFQUFTMkIsUUFRRCxXQUFuQmprQixFQUFRakMsU0FDVmlDLEVBQVFqQyxPQUFTLE9BQ2pCaUMsRUFBUW9MLElBQU16UCxHQVVsQnFFLEVBQVFzaUIsU0FBVyxLQUNaRyxHQU5Fc0IsR0EzQlAvakIsRUFBUWpDLE9BQVMsUUFDakJpQyxFQUFRb0wsSUFBTSxJQUFJdFAsVUFBVSxvQ0FDNUJrRSxFQUFRc2lCLFNBQVcsS0FDWkcsR0FvRFgsU0FBU3lCLEVBQWFDLEdBQ3BCLElBQUlDLEVBQVEsQ0FBRUMsT0FBUUYsRUFBSyxJQUV2QixLQUFLQSxJQUNQQyxFQUFNRSxTQUFXSCxFQUFLLElBR3BCLEtBQUtBLElBQ1BDLEVBQU1HLFdBQWFKLEVBQUssR0FDeEJDLEVBQU1JLFNBQVdMLEVBQUssSUFHeEJ2cUIsS0FBSzZxQixXQUFXN2xCLEtBQUt3bEIsR0FHdkIsU0FBU00sRUFBY04sR0FDckIsSUFBSXRCLEVBQVNzQixFQUFNTyxZQUFjLEdBQ2pDN0IsRUFBTzlqQixLQUFPLGdCQUNQOGpCLEVBQU8xWCxJQUNkZ1osRUFBTU8sV0FBYTdCLEVBR3JCLFNBQVNmLEVBQVFKLEdBSWYvbkIsS0FBSzZxQixXQUFhLENBQUMsQ0FBRUosT0FBUSxTQUM3QjFDLEVBQVl4ZSxRQUFRK2dCLEVBQWN0cUIsTUFDbENBLEtBQUtnckIsT0FBTSxHQThCYixTQUFTOVIsRUFBT25DLEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlrVSxFQUFpQmxVLEVBQVN1USxHQUM5QixHQUFJMkQsRUFDRixPQUFPQSxFQUFlcnRCLEtBQUttWixHQUc3QixHQUE2QixtQkFBbEJBLEVBQVMrRSxLQUNsQixPQUFPL0UsRUFHVCxJQUFLeEosTUFBTXdKLEVBQVMxUyxRQUFTLENBQzNCLElBQUk1RyxHQUFLLEVBQUdxZSxFQUFPLFNBQVNBLElBQzFCLE9BQVNyZSxFQUFJc1osRUFBUzFTLFFBQ3BCLEdBQUlnakIsRUFBT3pwQixLQUFLbVosRUFBVXRaLEdBR3hCLE9BRkFxZSxFQUFLcGQsTUFBUXFZLEVBQVN0WixHQUN0QnFlLEVBQUt6SSxNQUFPLEVBQ0x5SSxFQU9YLE9BSEFBLEVBQUtwZCxNQUFRcUQsRUFDYitaLEVBQUt6SSxNQUFPLEVBRUx5SSxHQUdULE9BQU9BLEVBQUtBLEtBQU9BLEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTTJNLEdBSWpCLFNBQVNBLElBQ1AsTUFBTyxDQUFFL3BCLE1BQU9xRCxFQUFXc1IsTUFBTSxHQStNbkMsT0E1bUJBaVcsRUFBa0JqcUIsVUFBWXFxQixFQUFHNWpCLFlBQWN5akIsRUFDL0NBLEVBQTJCempCLFlBQWN3akIsRUFDekNBLEVBQWtCNEIsWUFBY3hELEVBQzlCNkIsRUFDQTlCLEVBQ0EscUJBYUZscUIsRUFBUTR0QixvQkFBc0IsU0FBU0MsR0FDckMsSUFBSUMsRUFBeUIsbUJBQVhELEdBQXlCQSxFQUFPdGxCLFlBQ2xELFFBQU91bEIsSUFDSEEsSUFBUy9CLEdBRzJCLHVCQUFuQytCLEVBQUtILGFBQWVHLEVBQUtydEIsUUFJaENULEVBQVErdEIsS0FBTyxTQUFTRixHQVF0QixPQVBJanRCLE9BQU9tZCxlQUNUbmQsT0FBT21kLGVBQWU4UCxFQUFRN0IsSUFFOUI2QixFQUFPbEUsVUFBWXFDLEVBQ25CN0IsRUFBTzBELEVBQVEzRCxFQUFtQixzQkFFcEMyRCxFQUFPL3JCLFVBQVlsQixPQUFPWSxPQUFPMnFCLEdBQzFCMEIsR0FPVDd0QixFQUFRZ3VCLE1BQVEsU0FBUy9aLEdBQ3ZCLE1BQU8sQ0FBRXlZLFFBQVN6WSxJQXNFcEJtWSxFQUFzQkMsRUFBY3ZxQixXQUNwQ3VxQixFQUFjdnFCLFVBQVVrb0IsR0FBdUIsV0FDN0MsT0FBT3ZuQixNQUVUekMsRUFBUXFzQixjQUFnQkEsRUFLeEJyc0IsRUFBUWl1QixNQUFRLFNBQVMzRCxFQUFTQyxFQUFTaG9CLEVBQU1pb0IsRUFBYThCLFFBQ3hDLElBQWhCQSxJQUF3QkEsRUFBY3BlLFNBRTFDLElBQUlnZ0IsRUFBTyxJQUFJN0IsRUFDYjdRLEVBQUs4TyxFQUFTQyxFQUFTaG9CLEVBQU1pb0IsR0FDN0I4QixHQUdGLE9BQU90c0IsRUFBUTR0QixvQkFBb0JyRCxHQUMvQjJELEVBQ0FBLEVBQUszUCxPQUFPcFEsTUFBSyxTQUFTMEQsR0FDeEIsT0FBT0EsRUFBT2lFLEtBQU9qRSxFQUFPMVEsTUFBUStzQixFQUFLM1AsV0F1S2pENk4sRUFBc0JELEdBRXRCaEMsRUFBT2dDLEVBQUlqQyxFQUFtQixhQU85QmlDLEVBQUdwQyxHQUFrQixXQUNuQixPQUFPdG5CLE1BR1QwcEIsRUFBR2psQixTQUFXLFdBQ1osTUFBTyxzQkFrQ1RsSCxFQUFRNlAsS0FBTyxTQUFTak8sR0FDdEIsSUFBSWlPLEVBQU8sR0FDWCxJQUFLLElBQUlwTyxLQUFPRyxFQUNkaU8sRUFBS3BJLEtBQUtoRyxHQU1aLE9BSkFvTyxFQUFLc2UsVUFJRSxTQUFTNVAsSUFDZCxLQUFPMU8sRUFBSy9JLFFBQVEsQ0FDbEIsSUFBSXJGLEVBQU1vTyxFQUFLdWUsTUFDZixHQUFJM3NCLEtBQU9HLEVBR1QsT0FGQTJjLEVBQUtwZCxNQUFRTSxFQUNiOGMsRUFBS3pJLE1BQU8sRUFDTHlJLEVBUVgsT0FEQUEsRUFBS3pJLE1BQU8sRUFDTHlJLElBc0NYdmUsRUFBUTJiLE9BQVNBLEVBTWpCaVAsRUFBUTlvQixVQUFZLENBQ2xCeUcsWUFBYXFpQixFQUViNkMsTUFBTyxTQUFTWSxHQWNkLEdBYkE1ckIsS0FBSzZyQixLQUFPLEVBQ1o3ckIsS0FBSzhiLEtBQU8sRUFHWjliLEtBQUs4b0IsS0FBTzlvQixLQUFLK29CLE1BQVFobkIsRUFDekIvQixLQUFLcVQsTUFBTyxFQUNaclQsS0FBSzBvQixTQUFXLEtBRWhCMW9CLEtBQUttRSxPQUFTLE9BQ2RuRSxLQUFLd1IsSUFBTXpQLEVBRVgvQixLQUFLNnFCLFdBQVd0aEIsUUFBUXVoQixJQUVuQmMsRUFDSCxJQUFLLElBQUk1dEIsS0FBUWdDLEtBRVEsTUFBbkJoQyxFQUFLdWYsT0FBTyxJQUNaOEosRUFBT3pwQixLQUFLb0MsS0FBTWhDLEtBQ2pCdVAsT0FBT3ZQLEVBQUswRyxNQUFNLE1BQ3JCMUUsS0FBS2hDLEdBQVErRCxJQU1yQjZqQixLQUFNLFdBQ0o1bEIsS0FBS3FULE1BQU8sRUFFWixJQUNJeVksRUFEWTlyQixLQUFLNnFCLFdBQVcsR0FDTEUsV0FDM0IsR0FBd0IsVUFBcEJlLEVBQVcxbUIsS0FDYixNQUFNMG1CLEVBQVd0YSxJQUduQixPQUFPeFIsS0FBSytyQixNQUdkL0Msa0JBQW1CLFNBQVNnRCxHQUMxQixHQUFJaHNCLEtBQUtxVCxLQUNQLE1BQU0yWSxFQUdSLElBQUk1bEIsRUFBVXBHLEtBQ2QsU0FBU2lzQixFQUFPQyxFQUFLQyxHQVluQixPQVhBakQsRUFBTzlqQixLQUFPLFFBQ2Q4akIsRUFBTzFYLElBQU13YSxFQUNiNWxCLEVBQVEwVixLQUFPb1EsRUFFWEMsSUFHRi9sQixFQUFRakMsT0FBUyxPQUNqQmlDLEVBQVFvTCxJQUFNelAsS0FHTm9xQixFQUdaLElBQUssSUFBSTF1QixFQUFJdUMsS0FBSzZxQixXQUFXeG1CLE9BQVMsRUFBRzVHLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJK3NCLEVBQVF4cUIsS0FBSzZxQixXQUFXcHRCLEdBQ3hCeXJCLEVBQVNzQixFQUFNTyxXQUVuQixHQUFxQixTQUFqQlAsRUFBTUMsT0FJUixPQUFPd0IsRUFBTyxPQUdoQixHQUFJekIsRUFBTUMsUUFBVXpxQixLQUFLNnJCLEtBQU0sQ0FDN0IsSUFBSU8sRUFBVy9FLEVBQU96cEIsS0FBSzRzQixFQUFPLFlBQzlCNkIsRUFBYWhGLEVBQU96cEIsS0FBSzRzQixFQUFPLGNBRXBDLEdBQUk0QixHQUFZQyxFQUFZLENBQzFCLEdBQUlyc0IsS0FBSzZyQixLQUFPckIsRUFBTUUsU0FDcEIsT0FBT3VCLEVBQU96QixFQUFNRSxVQUFVLEdBQ3pCLEdBQUkxcUIsS0FBSzZyQixLQUFPckIsRUFBTUcsV0FDM0IsT0FBT3NCLEVBQU96QixFQUFNRyxpQkFHakIsR0FBSXlCLEdBQ1QsR0FBSXBzQixLQUFLNnJCLEtBQU9yQixFQUFNRSxTQUNwQixPQUFPdUIsRUFBT3pCLEVBQU1FLFVBQVUsT0FHM0IsS0FBSTJCLEVBTVQsTUFBTSxJQUFJOUQsTUFBTSwwQ0FMaEIsR0FBSXZvQixLQUFLNnJCLEtBQU9yQixFQUFNRyxXQUNwQixPQUFPc0IsRUFBT3pCLEVBQU1HLGdCQVU5QjFCLE9BQVEsU0FBUzdqQixFQUFNb00sR0FDckIsSUFBSyxJQUFJL1QsRUFBSXVDLEtBQUs2cUIsV0FBV3htQixPQUFTLEVBQUc1RyxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSStzQixFQUFReHFCLEtBQUs2cUIsV0FBV3B0QixHQUM1QixHQUFJK3NCLEVBQU1DLFFBQVV6cUIsS0FBSzZyQixNQUNyQnhFLEVBQU96cEIsS0FBSzRzQixFQUFPLGVBQ25CeHFCLEtBQUs2ckIsS0FBT3JCLEVBQU1HLFdBQVksQ0FDaEMsSUFBSTJCLEVBQWU5QixFQUNuQixPQUlBOEIsSUFDVSxVQUFUbG5CLEdBQ1MsYUFBVEEsSUFDRGtuQixFQUFhN0IsUUFBVWpaLEdBQ3ZCQSxHQUFPOGEsRUFBYTNCLGFBR3RCMkIsRUFBZSxNQUdqQixJQUFJcEQsRUFBU29ELEVBQWVBLEVBQWF2QixXQUFhLEdBSXRELE9BSEE3QixFQUFPOWpCLEtBQU9BLEVBQ2Q4akIsRUFBTzFYLElBQU1BLEVBRVQ4YSxHQUNGdHNCLEtBQUttRSxPQUFTLE9BQ2RuRSxLQUFLOGIsS0FBT3dRLEVBQWEzQixXQUNsQjlCLEdBR0Y3b0IsS0FBS3VzQixTQUFTckQsSUFHdkJxRCxTQUFVLFNBQVNyRCxFQUFRMEIsR0FDekIsR0FBb0IsVUFBaEIxQixFQUFPOWpCLEtBQ1QsTUFBTThqQixFQUFPMVgsSUFjZixNQVhvQixVQUFoQjBYLEVBQU85akIsTUFDUyxhQUFoQjhqQixFQUFPOWpCLEtBQ1RwRixLQUFLOGIsS0FBT29OLEVBQU8xWCxJQUNNLFdBQWhCMFgsRUFBTzlqQixNQUNoQnBGLEtBQUsrckIsS0FBTy9yQixLQUFLd1IsSUFBTTBYLEVBQU8xWCxJQUM5QnhSLEtBQUttRSxPQUFTLFNBQ2RuRSxLQUFLOGIsS0FBTyxPQUNhLFdBQWhCb04sRUFBTzlqQixNQUFxQndsQixJQUNyQzVxQixLQUFLOGIsS0FBTzhPLEdBR1AvQixHQUdUMkQsT0FBUSxTQUFTN0IsR0FDZixJQUFLLElBQUlsdEIsRUFBSXVDLEtBQUs2cUIsV0FBV3htQixPQUFTLEVBQUc1RyxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSStzQixFQUFReHFCLEtBQUs2cUIsV0FBV3B0QixHQUM1QixHQUFJK3NCLEVBQU1HLGFBQWVBLEVBR3ZCLE9BRkEzcUIsS0FBS3VzQixTQUFTL0IsRUFBTU8sV0FBWVAsRUFBTUksVUFDdENFLEVBQWNOLEdBQ1AzQixJQUtiLE1BQVMsU0FBUzRCLEdBQ2hCLElBQUssSUFBSWh0QixFQUFJdUMsS0FBSzZxQixXQUFXeG1CLE9BQVMsRUFBRzVHLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJK3NCLEVBQVF4cUIsS0FBSzZxQixXQUFXcHRCLEdBQzVCLEdBQUkrc0IsRUFBTUMsU0FBV0EsRUFBUSxDQUMzQixJQUFJdkIsRUFBU3NCLEVBQU1PLFdBQ25CLEdBQW9CLFVBQWhCN0IsRUFBTzlqQixLQUFrQixDQUMzQixJQUFJcW5CLEVBQVN2RCxFQUFPMVgsSUFDcEJzWixFQUFjTixHQUVoQixPQUFPaUMsR0FNWCxNQUFNLElBQUlsRSxNQUFNLDBCQUdsQm1FLGNBQWUsU0FBUzNWLEVBQVVxVCxFQUFZQyxHQWE1QyxPQVpBcnFCLEtBQUswb0IsU0FBVyxDQUNkbFUsU0FBVTBFLEVBQU9uQyxHQUNqQnFULFdBQVlBLEVBQ1pDLFFBQVNBLEdBR1MsU0FBaEJycUIsS0FBS21FLFNBR1BuRSxLQUFLd1IsSUFBTXpQLEdBR044bUIsSUFRSnRyQixFQTdzQkssQ0FvdEJpQkMsRUFBT0QsU0FHdEMsSUFDRW92QixtQkFBcUJ4RixFQUNyQixNQUFPeUYsR0FVUDNzQixTQUFTLElBQUsseUJBQWRBLENBQXdDa25CLEssdUJDMXVCMUMsSUFBSTVlLEVBQUksRUFBUSxHQUNadVYsRUFBTyxFQUFRLEtBVW5CdlYsRUFBRSxDQUFFbEgsT0FBUSxRQUFTTyxNQUFNLEVBQU1FLFFBVEMsRUFBUSxHQUVmMFQsRUFBNEIsU0FBVXVCLEdBRS9EMVAsTUFBTXlXLEtBQUsvRyxPQUttRCxDQUM5RCtHLEtBQU1BLEssNkJDWFIsSUFBSXZWLEVBQUksRUFBUSxHQUNadEcsRUFBVyxFQUFRLEdBQ25CcUYsRUFBVSxFQUFRLElBQ2xCOGMsRUFBa0IsRUFBUSxJQUMxQnRVLEVBQVcsRUFBUSxJQUNuQnZMLEVBQWtCLEVBQVEsSUFDMUJzb0IsRUFBaUIsRUFBUSxJQUN6QnZkLEVBQWtCLEVBQVEsR0FHMUJ3ZCxFQUYrQixFQUFRLEdBRWpCcEksQ0FBNkIsU0FFbkRyUyxFQUFVL0MsRUFBZ0IsV0FDMUJ5ZCxFQUFjLEdBQUdyb0IsTUFDakJxUCxFQUFNclUsS0FBS3FVLElBS2Z4TCxFQUFFLENBQUVsSCxPQUFRLFFBQVN1YixPQUFPLEVBQU05YSxRQUFTZ3JCLEdBQXVCLENBQ2hFcG9CLE1BQU8sU0FBZXNvQixFQUFPQyxHQUMzQixJQUtJakksRUFBYTVWLEVBQVFsUSxFQUxyQnVELEVBQUk4QixFQUFnQnZFLE1BQ3BCcUUsRUFBU3lMLEVBQVNyTixFQUFFNEIsUUFDcEJtQyxFQUFJNGQsRUFBZ0I0SSxFQUFPM29CLEdBQzNCNm9CLEVBQU05SSxPQUF3QnJpQixJQUFSa3JCLEVBQW9CNW9CLEVBQVM0b0IsRUFBSzVvQixHQUc1RCxHQUFJaUQsRUFBUTdFLEtBR2dCLG1CQUYxQnVpQixFQUFjdmlCLEVBQUVxRCxjQUV5QmtmLElBQWdCM2QsUUFBU0MsRUFBUTBkLEVBQVkzbEIsV0FFM0U0QyxFQUFTK2lCLElBRUUsUUFEcEJBLEVBQWNBLEVBQVkzUyxNQUNBMlMsT0FBY2pqQixHQUh4Q2lqQixPQUFjampCLEVBS1ppakIsSUFBZ0IzZCxZQUF5QnRGLElBQWhCaWpCLEdBQzNCLE9BQU8rSCxFQUFZbnZCLEtBQUs2RSxFQUFHK0QsRUFBRzBtQixHQUlsQyxJQURBOWQsRUFBUyxTQUFxQnJOLElBQWhCaWpCLEVBQTRCM2QsTUFBUTJkLEdBQWFqUixFQUFJbVosRUFBTTFtQixFQUFHLElBQ3ZFdEgsRUFBSSxFQUFHc0gsRUFBSTBtQixFQUFLMW1CLElBQUt0SCxJQUFTc0gsS0FBSy9ELEdBQUdvcUIsRUFBZXpkLEVBQVFsUSxFQUFHdUQsRUFBRStELElBRXZFLE9BREE0SSxFQUFPL0ssT0FBU25GLEVBQ1RrUSxNLGdCQzVDWCxJQUFJaE4sRUFBYyxFQUFRLEdBQ3RCaEUsRUFBaUIsRUFBUSxHQUF1Q3lDLEVBRWhFc3NCLEVBQW9CbHRCLFNBQVNaLFVBQzdCK3RCLEVBQTRCRCxFQUFrQjFvQixTQUM5QzRvQixFQUFTLHlCQUtUanJCLEdBSk8sU0FJa0IrcUIsR0FDM0IvdUIsRUFBZSt1QixFQUxOLE9BSytCLENBQ3RDcmhCLGNBQWMsRUFDZHhOLElBQUssV0FDSCxJQUNFLE9BQU84dUIsRUFBMEJ4dkIsS0FBS29DLE1BQU1vUixNQUFNaWMsR0FBUSxHQUMxRCxNQUFPMXNCLEdBQ1AsTUFBTyxRLGlDQ2hCZixJQUFJMUIsRUFBTyxFQUFRLElBQ2Y0USxFQUFXLEVBQVEsSUFDbkJ5ZCxFQUErQixFQUFRLEtBQ3ZDckksRUFBd0IsRUFBUSxJQUNoQ25WLEVBQVcsRUFBUSxJQUNuQitjLEVBQWlCLEVBQVEsSUFDekIzSCxFQUFvQixFQUFRLElBSWhDMW5CLEVBQU9ELFFBQVUsU0FBY2d3QixHQUM3QixJQU9JbHBCLEVBQVErSyxFQUFRb1csRUFBTWhSLEVBQVVzSCxFQUFNcGQsRUFQdEMrRCxFQUFJb04sRUFBUzBkLEdBQ2J2bEIsRUFBbUIsbUJBQVJoSSxLQUFxQkEsS0FBT3FILE1BQ3ZDbW1CLEVBQWtCcHBCLFVBQVVDLE9BQzVCb3BCLEVBQVFELEVBQWtCLEVBQUlwcEIsVUFBVSxRQUFLckMsRUFDN0MyckIsT0FBb0IzckIsSUFBVjByQixFQUNWeEMsRUFBaUIvRixFQUFrQnppQixHQUNuQ21PLEVBQVEsRUFJWixHQUZJOGMsSUFBU0QsRUFBUXh1QixFQUFLd3VCLEVBQU9ELEVBQWtCLEVBQUlwcEIsVUFBVSxRQUFLckMsRUFBVyxJQUUzREEsTUFBbEJrcEIsR0FBaUNqakIsR0FBS1gsT0FBUzRkLEVBQXNCZ0csR0FXdkUsSUFEQTdiLEVBQVMsSUFBSXBILEVBRGIzRCxFQUFTeUwsRUFBU3JOLEVBQUU0QixTQUVkQSxFQUFTdU0sRUFBT0EsSUFDcEJsUyxFQUFRZ3ZCLEVBQVVELEVBQU1ockIsRUFBRW1PLEdBQVFBLEdBQVNuTyxFQUFFbU8sR0FDN0NpYyxFQUFlemQsRUFBUXdCLEVBQU9sUyxRQVRoQyxJQUZBb2QsR0FEQXRILEVBQVd5VyxFQUFlcnRCLEtBQUs2RSxJQUNmcVosS0FDaEIxTSxFQUFTLElBQUlwSCxJQUNMd2QsRUFBTzFKLEVBQUtsZSxLQUFLNFcsSUFBV25CLEtBQU16QyxJQUN4Q2xTLEVBQVFndkIsRUFBVUosRUFBNkI5WSxFQUFVaVosRUFBTyxDQUFDakksRUFBSzltQixNQUFPa1MsSUFBUSxHQUFRNFUsRUFBSzltQixNQUNsR211QixFQUFlemQsRUFBUXdCLEVBQU9sUyxHQVdsQyxPQURBMFEsRUFBTy9LLE9BQVN1TSxFQUNUeEIsSSxnQkN2Q1QsSUFBSTlNLEVBQVcsRUFBUSxHQUNuQjZpQixFQUFnQixFQUFRLElBRzVCM25CLEVBQU9ELFFBQVUsU0FBVWlYLEVBQVV2SCxFQUFJdk8sRUFBT2l2QixHQUM5QyxJQUNFLE9BQU9BLEVBQVUxZ0IsRUFBRzNLLEVBQVM1RCxHQUFPLEdBQUlBLEVBQU0sSUFBTXVPLEVBQUd2TyxHQUV2RCxNQUFPaUMsR0FFUCxNQURBd2tCLEVBQWMzUSxHQUNSN1QsSyxtQ0NUVixJQUFJNEgsRUFBSSxFQUFRLEdBQ1pxbEIsRUFBTyxFQUFRLElBQWdDL2MsSUFRbkR0SSxFQUFFLENBQUVsSCxPQUFRLFFBQVN1YixPQUFPLEVBQU05YSxRQVBDLEVBQVEsR0FFakI0aUIsQ0FBNkIsUUFLVyxDQUNoRTdULElBQUssU0FBYUosR0FDaEIsT0FBT21kLEVBQUs1dEIsS0FBTXlRLEVBQVlyTSxVQUFVQyxPQUFTLEVBQUlELFVBQVUsUUFBS3JDLE8seURDWHhFLElBQUl3RyxFQUFJLEVBQVEsR0FDWjNGLEVBQVEsRUFBUSxHQUNoQjBFLEVBQVUsRUFBUSxJQUNsQnJGLEVBQVcsRUFBUSxHQUNuQjROLEVBQVcsRUFBUSxJQUNuQkMsRUFBVyxFQUFRLElBQ25CK2MsRUFBaUIsRUFBUSxJQUN6QjljLEVBQXFCLEVBQVEsSUFDN0IyVSxFQUErQixFQUFRLElBQ3ZDcFYsRUFBa0IsRUFBUSxHQUMxQjRDLEVBQWEsRUFBUSxJQUVyQjJiLEVBQXVCdmUsRUFBZ0Isc0JBT3ZDd2UsRUFBK0I1YixHQUFjLEtBQU90UCxHQUFNLFdBQzVELElBQUkyUCxFQUFRLEdBRVosT0FEQUEsRUFBTXNiLElBQXdCLEVBQ3ZCdGIsRUFBTVIsU0FBUyxLQUFPUSxLQUczQndiLEVBQWtCckosRUFBNkIsVUFFL0NzSixFQUFxQixTQUFVdnJCLEdBQ2pDLElBQUtSLEVBQVNRLEdBQUksT0FBTyxFQUN6QixJQUFJd3JCLEVBQWF4ckIsRUFBRW9yQixHQUNuQixZQUFzQjlyQixJQUFma3NCLElBQTZCQSxFQUFhM21CLEVBQVE3RSxJQVEzRDhGLEVBQUUsQ0FBRWxILE9BQVEsUUFBU3ViLE9BQU8sRUFBTTlhLFFBTHBCZ3NCLElBQWlDQyxHQUtLLENBRWxEaGMsT0FBUSxTQUFnQlAsR0FDdEIsSUFHSS9ULEVBQUcrSSxFQUFHbkMsRUFBUTZwQixFQUFLQyxFQUhuQjFyQixFQUFJb04sRUFBUzdQLE1BQ2JvSCxFQUFJMkksRUFBbUJ0TixFQUFHLEdBQzFCdkQsRUFBSSxFQUVSLElBQUt6QixHQUFLLEVBQUc0RyxFQUFTRCxVQUFVQyxPQUFRNUcsRUFBSTRHLEVBQVE1RyxJQUVsRCxHQURBMHdCLEdBQVcsSUFBUDF3QixFQUFXZ0YsRUFBSTJCLFVBQVUzRyxHQUN6QnV3QixFQUFtQkcsR0FBSSxDQUV6QixHQUFJanZCLEdBREpndkIsRUFBTXBlLEVBQVNxZSxFQUFFOXBCLFNBbkNGLGlCQW9DaUIsTUFBTW5DLFVBbkNULGtDQW9DN0IsSUFBS3NFLEVBQUksRUFBR0EsRUFBSTBuQixFQUFLMW5CLElBQUt0SCxJQUFTc0gsS0FBSzJuQixHQUFHdEIsRUFBZXpsQixFQUFHbEksRUFBR2l2QixFQUFFM25CLFFBQzdELENBQ0wsR0FBSXRILEdBdkNXLGlCQXVDWSxNQUFNZ0QsVUF0Q0osa0NBdUM3QjJxQixFQUFlemxCLEVBQUdsSSxJQUFLaXZCLEdBSTNCLE9BREEvbUIsRUFBRS9DLE9BQVNuRixFQUNKa0ksTSx3d0VDMUNKLElBQU1nbkIsRUFBYixhLGtPQUFBLFUsTUFBQSxPQUNFLGFBQWMsYSw0RkFBQSxhQUNaLGdCQURZLFVBZ0U4QyxTQUFDQyxHQUMzRCxJQUFNQyxFQUF1QixpQkFBUEQsRUFBa0JBLEVBQU9BLEVBQUlodEIsT0FBNEIzQyxNQUMvRSxFQUFLNE0sU0FBUyxDQUNadE0sSUFBS3N2QixPQW5FSyxpQkFzRThDLFNBQUNELEdBQzNELElBQU1FLEVBQXVCLGlCQUFQRixFQUFrQkEsRUFBT0EsRUFBSWh0QixPQUE0QjNDLE1BQy9FLEVBQUs0TSxTQUFTLENBQ1o1TSxNQUFPNnZCLE9BdkVULEVBQUtDLE9BQVMsRUFBS0EsT0FBT3Z2QixLQUFaLE1BQ2QsRUFBS3d2QixPQUFTLEVBQUtBLE9BQU94dkIsS0FBWixNQUNkLEVBQUt5dkIsT0FBUyxFQUFLQSxPQUFPenZCLEtBQVosTUFDZCxFQUFLMHZCLFVBQVksRUFBS0EsVUFBVTF2QixLQUFmLE1BTEwsRUFEaEIsTyxFQUFBLEcsRUFBQSxxQkFTRSxXQUFnQixXQUNQMnZCLEVBQVM1dUIsS0FBS3FGLE1BQWR1cEIsTUFHUCxPQUZBL0gsUUFBUWdJLElBQUksV0FBWTd1QixLQUFLMkQsTUFBTW1yQixRQUU1QixTQUFLQyxVQUFVLFlBQ2xCLFNBQUtBLFVBQVUsbUJBQ2IsZUFDRSxlQUNHSCxHQUFTQSxFQUFNL2QsS0FBSSxTQUFDbWUsRUFBTXBlLEdBQVAsT0FDaEIsUUFBSTVSLElBQUs0UixFQUFPbWUsVUFBVSx1QkFBdUJFLGNBQVksYUFDM0QsUUFBSUYsVUFBVSxRQUFRQyxFQUFLaHdCLEtBQzNCLFFBQUkrdkIsVUFBVSxXQUFkLEtBQ0EsUUFBSUEsVUFBVSxRQUFRQyxFQUFLdHdCLE9BQzNCLFFBQUlxd0IsVUFBVSxXQUNaLFNBQUtBLFVBQVUsYUFDYixPQUFHQSxVQUFVLEdBQUdFLGNBQVksVUFDeEJDLFFBQVMsa0JBQU0sRUFBS0MsT0FBT3ZlLEtBQzVCQSxFQUFRLEVBQUksSUFBTSxLQUVyQixPQUFHbWUsVUFBVSxHQUFJRSxjQUFZLFlBQ3pCQyxRQUFTLGtCQUFNLEVBQUtFLFNBQVN4ZSxLQUM5QkEsRUFBUWdlLEVBQU12cUIsT0FBUyxFQUFJLElBQU0sTUFHdEMsWUFBUTBxQixVQUFVLDBCQUEwQkUsY0FBWSxTQUN0REMsUUFBUyxrQkFBTSxFQUFLUCxVQUFVSyxLQURoQyxVQUtOLFFBQUlELFVBQVUsNEJBQTRCRSxjQUFZLFlBQ3BELFFBQUlGLFVBQVUsUUFDZCxXQUFPQSxVQUFVLGdCQUFnQjNwQixLQUFLLE9BQU93TSxHQUFHLE1BQU1xZCxjQUFZLE1BQ2hFSSxTQUFVcnZCLEtBQUt3dUIsT0FBUTl2QixNQUFPc0IsS0FBSzJELE1BQU0zRSxPQUUzQyxRQUFJK3ZCLFVBQVUsV0FDZCxVQUFNTyxNQUFNLFdBQVosTUFFQSxRQUFJUCxVQUFVLFFBQ2QsV0FBT0EsVUFBVSxnQkFBZ0IzcEIsS0FBSyxPQUFPd00sR0FBRyxRQUFRcWQsY0FBWSxRQUNsRUksU0FBVXJ2QixLQUFLeXVCLE9BQVEvdkIsTUFBT3NCLEtBQUsyRCxNQUFNakYsU0FFM0MsUUFBSXF3QixVQUFVLFdBQ2QsWUFBUUEsVUFBVSxpQkFBaUIzcEIsS0FBSyxTQUFTd00sR0FBRyxNQUFNcWQsY0FBWSxNQUNwRUMsUUFBU2x2QixLQUFLMHVCLFFBRGhCLFNBT1AxdUIsS0FBSzJELE1BQU1tckIsUUFBVTl1QixLQUFLMkQsTUFBTW1yQixPQUFPamUsS0FBSSxTQUFDak0sR0FBRCxPQUMxQyxTQUFLMHFCLE1BQU0sUUFBUUwsY0FBWSxTQUFTcnFCLFVBM0RwRCxvQkE4RUUsV0FDRSxJQUFNa3FCLEVBQVMsR0FPZixHQU5LOXVCLEtBQUsyRCxNQUFNM0UsS0FBZ0MsR0FBekJnQixLQUFLMkQsTUFBTTNFLElBQUlxRixRQUNwQ3lxQixFQUFPOXBCLEtBQVAsb0JBRUdoRixLQUFLMkQsTUFBTWpGLE9BQW9DLEdBQTNCc0IsS0FBSzJELE1BQU1qRixNQUFNMkYsUUFDeEN5cUIsRUFBTzlwQixLQUFQLHNCQUVtQixHQUFqQjhwQixFQUFPenFCLFFBQWVyRSxLQUFLcUYsTUFBTWtxQixlQUFnQixDQUNuRCxJQUFNN3dCLEVBQVEsQ0FBRU0sSUFBS2dCLEtBQUsyRCxNQUFNM0UsSUFBS04sTUFBT3NCLEtBQUsyRCxNQUFNakYsT0FDakRrd0IsRUFBUTV1QixLQUFLcUYsTUFBTXVwQixPQUFTLEdBRWxDNXVCLEtBQUtxRixNQUFNa3FCLGVBQVgsWUFBOEJYLEdBQTlCLENBQXFDbHdCLEtBQ3JDc0IsS0FBS3NMLFNBQVMsQ0FDWnRNLElBQUssR0FDTE4sTUFBTyxLQUdYc0IsS0FBS3NMLFNBQVMsQ0FDWndqQixhQWpHTix1QkFxR0UsU0FBa0JFLEdBT2hCLEdBTkFuSSxRQUFRZ0ksSUFBSSxhQUNaN3VCLEtBQUtzTCxTQUFTLENBQ1p0TSxJQUFLZ3dCLEVBQUtod0IsSUFDVk4sTUFBT3N3QixFQUFLdHdCLFFBR1RzQixLQUFLcUYsTUFBTWtxQixlQUFoQixDQUlBLElBQU1YLEVBQVE1dUIsS0FBS3FGLE1BQU11cEIsT0FBUyxHQUNsQyxHQUFvQixHQUFoQkEsRUFBTXZxQixPQUFWLENBR0EsSUFBTTVHLEVBQUlteEIsRUFBTTNkLFdBQVUsU0FBQzFSLEdBQUQsT0FBT0EsRUFBRVAsS0FBT2d3QixFQUFLaHdCLEtBQU9PLEVBQUViLE9BQVNzd0IsRUFBS3R3QixTQUV0RSxLQUFJakIsRUFBSSxHQUFSLENBSUEsSUFBTWlCLEVBQVFrd0IsRUFBTWxxQixNQUFNLEVBQUdqSCxHQUM3QmlCLEVBQU1zRyxLQUFOLE1BQUF0RyxFQUFLLEVBQVNrd0IsRUFBTWxxQixNQUFNakgsRUFBSSxLQUM5QnVDLEtBQUtxRixNQUFNa3FCLGVBQWU3d0IsUUE1SDlCLG9CQStIRSxTQUFla1MsR0FDYixJQUFNZ2UsRUFBUTV1QixLQUFLcUYsTUFBTXVwQixPQUFTLEdBQ2xDLEdBQUlBLEVBQU12cUIsT0FBUyxHQUFLdU0sRUFBUSxHQUFLNVEsS0FBS3FGLE1BQU1rcUIsZUFBZ0IsQ0FDOUQsSUFBTVAsRUFBT0osRUFBTXhqQixPQUFPd0YsRUFBTyxHQUNqQ2dlLEVBQU14akIsT0FBTixNQUFBd2pCLEVBQUssQ0FBUWhlLEVBQVEsRUFBRyxHQUFuQixTQUF5Qm9lLEtBQzlCaHZCLEtBQUtxRixNQUFNa3FCLGVBQWVYLE1BcEloQyxzQkF3SUUsU0FBaUJoZSxHQUNmLElBQU1nZSxFQUFRNXVCLEtBQUtxRixNQUFNdXBCLE9BQVMsR0FDbEMsR0FBSUEsRUFBTXZxQixPQUFTLEdBQUt1TSxFQUFRZ2UsRUFBTXZxQixPQUFTLEdBQUtyRSxLQUFLcUYsTUFBTWtxQixlQUFnQixDQUM3RSxJQUFNUCxFQUFPSixFQUFNeGpCLE9BQU93RixFQUFPLEdBQ2pDZ2UsRUFBTXhqQixPQUFOLE1BQUF3akIsRUFBSyxDQUFRaGUsRUFBUSxFQUFHLEdBQW5CLFNBQXlCb2UsS0FDOUJodkIsS0FBS3FGLE1BQU1rcUIsZUFBZVgsUywyQkE3SWhDLEcsTUFBNkJZLGEsc29EQ1ZkQyxFQUFRLEtBRW5CNWMsR0FDRkEsUUFBeUIsU0FBQzZjLEdBQ3hCNW1CLGlCQUFPLEVBQUM2bUIsRUFBY0QsR0FDcEIxbEIsU0FBUzRsQixlQUFlLGVBQzFCRixFQUFVN3ZCLE9BQU9nd0Isc0JBV2QsSUFBTUYsRUFBYixhLGtPQUFBLFUsUUFBQSxTQUVFLGFBQWMsYSw0RkFBQSxVQUNaLGdCQUNLSixlQUFpQixFQUFLQSxlQUFldHdCLEtBQXBCLE1BRlYsRUFGaEIsTyxFQUFBLEcsRUFBQSxnQ0FPRSxXQUEyQixXQUNuQjZ3QixFQUFNOXZCLEtBQUtxRixNQUNqQnJGLEtBQUtzTCxTQUFTLENBQ1p5a0IsWUFBYUQsRUFBSUUsTUFBTUMsWUFBYyxJQUFJbmYsUUFBTyxTQUFDclQsR0FBRCxPQUFZQSxPQUc5RHF5QixFQUFJRSxNQUFNRSxnQkFBZSxTQUFDQyxHQUN4QixFQUFLN2tCLFNBQVMsQ0FDWnlrQixZQUFhSSxHQUFZLElBQUlyZixRQUFPLFNBQUNyVCxHQUFELE9BQVlBLFlBZnhELG9CQW9CRSxXQUFnQixNQUNrQnVDLEtBQUsyRCxNQUE3Qm9zQixFQURNLEVBQ05BLFdBQVlLLEVBRE4sRUFDTUEsUUFFcEIsT0FBTyxTQUFLckIsVUFBV3FCLEVBQVUsV0FBYSxJQUM1QyxFQUFDLElBQUQsQ0FDRXhCLE1BQU9tQixFQUNQUixlQUFnQnZ2QixLQUFLdXZCLG9CQTFCN0IsNkIsRUFBQSx5QkErQkUsV0FBNkJjLEdBQTdCLDZGQUNRUCxFQUFNOXZCLEtBQUtxRixNQUVqQnJGLEtBQUtzTCxTQUFTLENBQ1o4a0IsU0FBUyxJQUpiLFNBT1FOLEVBQUlFLE1BQU1NLFNBQVNELEdBUDNCLE9BUUVyd0IsS0FBS3NMLFNBQVMsQ0FDWnlrQixXQUFZTSxFQUNaRCxTQUFTLElBVmIsK0NBL0JGLEUsOEtBQUEsaUQsMkJBQUEsR0FBK0JaLGMsaURDdEIvQixJQUFJam5CLEVBQUksRUFBUSxHQUNaZ29CLEVBQWEsRUFBUSxJQUFnQ3RmLFVBQ3JEOEIsRUFBbUIsRUFBUSxLQUczQnlkLEdBQWMsRUFERCxhQUlDLElBQUlucEIsTUFBTSxHQUFhLFdBQUUsV0FBY21wQixHQUFjLEtBSXZFam9CLEVBQUUsQ0FBRWxILE9BQVEsUUFBU3ViLE9BQU8sRUFBTTlhLE9BQVEwdUIsR0FBZSxDQUN2RHZmLFVBQVcsU0FBbUJSLEdBQzVCLE9BQU84ZixFQUFXdndCLEtBQU15USxFQUFZck0sVUFBVUMsT0FBUyxFQUFJRCxVQUFVLFFBQUtyQyxNQUs5RWdSLEVBZmlCLGMsNkJDSmpCLElBQUl4SyxFQUFJLEVBQVEsR0FDWjZiLEVBQWtCLEVBQVEsSUFDMUJuaEIsRUFBWSxFQUFRLElBQ3BCNk0sRUFBVyxFQUFRLElBQ25CRCxFQUFXLEVBQVEsSUFDbkJFLEVBQXFCLEVBQVEsSUFDN0I4YyxFQUFpQixFQUFRLElBR3pCQyxFQUYrQixFQUFRLEdBRWpCcEksQ0FBNkIsVUFFbkQzUSxFQUFNclUsS0FBS3FVLElBQ1g3USxFQUFNeEQsS0FBS3dELElBT2ZxRixFQUFFLENBQUVsSCxPQUFRLFFBQVN1YixPQUFPLEVBQU05YSxRQUFTZ3JCLEdBQXVCLENBQ2hFMWhCLE9BQVEsU0FBZ0I0aEIsRUFBT3lELEdBQzdCLElBSUlDLEVBQWFDLEVBQW1CdnBCLEVBQUdaLEVBQUdzWCxFQUFNOFMsRUFKNUNudUIsRUFBSW9OLEVBQVM3UCxNQUNia3VCLEVBQU1wZSxFQUFTck4sRUFBRTRCLFFBQ2pCd3NCLEVBQWN6TSxFQUFnQjRJLEVBQU9rQixHQUNyQ1YsRUFBa0JwcEIsVUFBVUMsT0FXaEMsR0FUd0IsSUFBcEJtcEIsRUFDRmtELEVBQWNDLEVBQW9CLEVBQ0wsSUFBcEJuRCxHQUNUa0QsRUFBYyxFQUNkQyxFQUFvQnpDLEVBQU0yQyxJQUUxQkgsRUFBY2xELEVBQWtCLEVBQ2hDbUQsRUFBb0J6dEIsRUFBSTZRLEVBQUk5USxFQUFVd3RCLEdBQWMsR0FBSXZDLEVBQU0yQyxJQUU1RDNDLEVBQU13QyxFQUFjQyxFQXRCTCxpQkF1QmpCLE1BQU16dUIsVUF0QjBCLG1DQXlCbEMsSUFEQWtGLEVBQUkySSxFQUFtQnROLEVBQUdrdUIsR0FDckJucUIsRUFBSSxFQUFHQSxFQUFJbXFCLEVBQW1CbnFCLEtBQ2pDc1gsRUFBTytTLEVBQWNycUIsS0FDVC9ELEdBQUdvcUIsRUFBZXpsQixFQUFHWixFQUFHL0QsRUFBRXFiLElBR3hDLEdBREExVyxFQUFFL0MsT0FBU3NzQixFQUNQRCxFQUFjQyxFQUFtQixDQUNuQyxJQUFLbnFCLEVBQUlxcUIsRUFBYXJxQixFQUFJMG5CLEVBQU15QyxFQUFtQm5xQixJQUVqRG9xQixFQUFLcHFCLEVBQUlrcUIsR0FEVDVTLEVBQU90WCxFQUFJbXFCLEtBRUNsdUIsRUFBR0EsRUFBRW11QixHQUFNbnVCLEVBQUVxYixVQUNicmIsRUFBRW11QixHQUVoQixJQUFLcHFCLEVBQUkwbkIsRUFBSzFuQixFQUFJMG5CLEVBQU15QyxFQUFvQkQsRUFBYWxxQixXQUFZL0QsRUFBRStELEVBQUksUUFDdEUsR0FBSWtxQixFQUFjQyxFQUN2QixJQUFLbnFCLEVBQUkwbkIsRUFBTXlDLEVBQW1CbnFCLEVBQUlxcUIsRUFBYXJxQixJQUVqRG9xQixFQUFLcHFCLEVBQUlrcUIsRUFBYyxHQUR2QjVTLEVBQU90WCxFQUFJbXFCLEVBQW9CLEtBRW5CbHVCLEVBQUdBLEVBQUVtdUIsR0FBTW51QixFQUFFcWIsVUFDYnJiLEVBQUVtdUIsR0FHbEIsSUFBS3BxQixFQUFJLEVBQUdBLEVBQUlrcUIsRUFBYWxxQixJQUMzQi9ELEVBQUUrRCxFQUFJcXFCLEdBQWV6c0IsVUFBVW9DLEVBQUksR0FHckMsT0FEQS9ELEVBQUU0QixPQUFTNnBCLEVBQU15QyxFQUFvQkQsRUFDOUJ0cEIsTSIsImZpbGUiOiJkaXN0L2t2cC1lZGl0b3IvaW5kZXgtZjdiZjFmYjI3NzE4OTMwOGFmYjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4uL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzE4KTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBuLGwsdSxpLHQsbyxyPXt9LGY9W10sZT0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pO2Z1bmN0aW9uIGMobixsKXtmb3IodmFyIHUgaW4gbCluW3VdPWxbdV07cmV0dXJuIG59ZnVuY3Rpb24gcyhuKXt2YXIgbD1uLnBhcmVudE5vZGU7bCYmbC5yZW1vdmVDaGlsZChuKX1mdW5jdGlvbiBhKG4sbCx1KXt2YXIgaSx0LG8scj1hcmd1bWVudHMsZj17fTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtpZihudWxsIT11JiYoZi5jaGlsZHJlbj11KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZudWxsIT1uLmRlZmF1bHRQcm9wcylmb3IobyBpbiBuLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW29dJiYoZltvXT1uLmRlZmF1bHRQcm9wc1tvXSk7cmV0dXJuIHYobixmLGksdCxudWxsKX1mdW5jdGlvbiB2KGwsdSxpLHQsbyl7dmFyIHI9e3R5cGU6bCxwcm9wczp1LGtleTppLHJlZjp0LF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PW8/KytuLl9fdjpvfTtyZXR1cm4gbnVsbCE9bi52bm9kZSYmbi52bm9kZShyKSxyfWZ1bmN0aW9uIGgoKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiB5KG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIHAobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gZChuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ZChuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9kKG4pOm51bGx9ZnVuY3Rpb24gXyhuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIF8obil9fWZ1bmN0aW9uIGsobCl7KCFsLl9fZCYmKGwuX19kPSEwKSYmdS5wdXNoKGwpJiYhYi5fX3IrK3x8dCE9PW4uZGVib3VuY2VSZW5kZXJpbmcpJiYoKHQ9bi5kZWJvdW5jZVJlbmRlcmluZyl8fGkpKGIpfWZ1bmN0aW9uIGIoKXtmb3IodmFyIG47Yi5fX3I9dS5sZW5ndGg7KW49dS5zb3J0KGZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uX192Ll9fYi1sLl9fdi5fX2J9KSx1PVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9Yyh7fSx0KSkuX192PXQuX192KzEsSShyLHQsaSxsLl9fbix2b2lkIDAhPT1yLm93bmVyU1ZHRWxlbWVudCxudWxsIT10Ll9faD9bb106bnVsbCx1LG51bGw9PW8/ZCh0KTpvLHQuX19oKSxUKHUsdCksdC5fX2UhPW8mJl8odCkpKX0pfWZ1bmN0aW9uIG0obixsLHUsaSx0LG8sZSxjLHMsYSl7dmFyIGgscCxfLGssYixtLHcsQT1pJiZpLl9fa3x8ZixQPUEubGVuZ3RoO2Zvcih1Ll9faz1bXSxoPTA7aDxsLmxlbmd0aDtoKyspaWYobnVsbCE9KGs9dS5fX2tbaF09bnVsbD09KGs9bFtoXSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygaz9udWxsOlwic3RyaW5nXCI9PXR5cGVvZiBrfHxcIm51bWJlclwiPT10eXBlb2Yga3x8XCJiaWdpbnRcIj09dHlwZW9mIGs/dihudWxsLGssbnVsbCxudWxsLGspOkFycmF5LmlzQXJyYXkoayk/dih5LHtjaGlsZHJlbjprfSxudWxsLG51bGwsbnVsbCk6ay5fX2I+MD92KGsudHlwZSxrLnByb3BzLGsua2V5LG51bGwsay5fX3YpOmspKXtpZihrLl9fPXUsay5fX2I9dS5fX2IrMSxudWxsPT09KF89QVtoXSl8fF8mJmsua2V5PT1fLmtleSYmay50eXBlPT09Xy50eXBlKUFbaF09dm9pZCAwO2Vsc2UgZm9yKHA9MDtwPFA7cCsrKXtpZigoXz1BW3BdKSYmay5rZXk9PV8ua2V5JiZrLnR5cGU9PT1fLnR5cGUpe0FbcF09dm9pZCAwO2JyZWFrfV89bnVsbH1JKG4sayxfPV98fHIsdCxvLGUsYyxzLGEpLGI9ay5fX2UsKHA9ay5yZWYpJiZfLnJlZiE9cCYmKHd8fCh3PVtdKSxfLnJlZiYmdy5wdXNoKF8ucmVmLG51bGwsayksdy5wdXNoKHAsay5fX2N8fGIsaykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGsudHlwZSYmbnVsbCE9ay5fX2smJmsuX19rPT09Xy5fX2s/ay5fX2Q9cz1nKGsscyxuKTpzPXgobixrLF8sQSxiLHMpLGF8fFwib3B0aW9uXCIhPT11LnR5cGU/XCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9cyk6bi52YWx1ZT1cIlwiKTpzJiZfLl9fZT09cyYmcy5wYXJlbnROb2RlIT1uJiYocz1kKF8pKX1mb3IodS5fX2U9bSxoPVA7aC0tOyludWxsIT1BW2hdJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiZudWxsIT1BW2hdLl9fZSYmQVtoXS5fX2U9PXUuX19kJiYodS5fX2Q9ZChpLGgrMSkpLEwoQVtoXSxBW2hdKSk7aWYodylmb3IoaD0wO2g8dy5sZW5ndGg7aCsrKXood1toXSx3WysraF0sd1srK2hdKX1mdW5jdGlvbiBnKG4sbCx1KXt2YXIgaSx0O2ZvcihpPTA7aTxuLl9fay5sZW5ndGg7aSsrKSh0PW4uX19rW2ldKSYmKHQuX189bixsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudHlwZT9nKHQsbCx1KTp4KHUsdCx0LG4uX19rLHQuX19lLGwpKTtyZXR1cm4gbH1mdW5jdGlvbiB3KG4sbCl7cmV0dXJuIGw9bHx8W10sbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBufHwoQXJyYXkuaXNBcnJheShuKT9uLnNvbWUoZnVuY3Rpb24obil7dyhuLGwpfSk6bC5wdXNoKG4pKSxsfWZ1bmN0aW9uIHgobixsLHUsaSx0LG8pe3ZhciByLGYsZTtpZih2b2lkIDAhPT1sLl9fZClyPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKG51bGw9PXV8fHQhPW98fG51bGw9PXQucGFyZW50Tm9kZSluOmlmKG51bGw9PW98fG8ucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZCh0KSxyPW51bGw7ZWxzZXtmb3IoZj1vLGU9MDsoZj1mLm5leHRTaWJsaW5nKSYmZTxpLmxlbmd0aDtlKz0yKWlmKGY9PXQpYnJlYWsgbjtuLmluc2VydEJlZm9yZSh0LG8pLHI9b31yZXR1cm4gdm9pZCAwIT09cj9yOnQubmV4dFNpYmxpbmd9ZnVuY3Rpb24gQShuLGwsdSxpLHQpe3ZhciBvO2ZvcihvIGluIHUpXCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fG8gaW4gbHx8QyhuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fEMobixvLGxbb10sdVtvXSxpKX1mdW5jdGlvbiBQKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLHUpOm5bbF09bnVsbD09dT9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiB1fHxlLnRlc3QobCk/dTp1K1wicHhcIn1mdW5jdGlvbiBDKG4sbCx1LGksdCl7dmFyIG87bjppZihcInN0eWxlXCI9PT1sKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB1KW4uc3R5bGUuY3NzVGV4dD11O2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkmJihuLnN0eWxlLmNzc1RleHQ9aT1cIlwiKSxpKWZvcihsIGluIGkpdSYmbCBpbiB1fHxQKG4uc3R5bGUsbCxcIlwiKTtpZih1KWZvcihsIGluIHUpaSYmdVtsXT09PWlbbF18fFAobi5zdHlsZSxsLHVbbF0pfWVsc2UgaWYoXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0pbz1sIT09KGw9bC5yZXBsYWNlKC9DYXB0dXJlJC8sXCJcIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT9pfHxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP0g6JCxvKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxvP0g6JCxvKTtlbHNlIGlmKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwpe2lmKHQpbD1sLnJlcGxhY2UoL3hsaW5rW0g6aF0vLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8XCJhXCI9PT1sWzBdJiZcInJcIj09PWxbMV0pP24uc2V0QXR0cmlidXRlKGwsdSk6bi5yZW1vdmVBdHRyaWJ1dGUobCkpfX1mdW5jdGlvbiAkKGwpe3RoaXMubFtsLnR5cGUrITFdKG4uZXZlbnQ/bi5ldmVudChsKTpsKX1mdW5jdGlvbiBIKGwpe3RoaXMubFtsLnR5cGUrITBdKG4uZXZlbnQ/bi5ldmVudChsKTpsKX1mdW5jdGlvbiBJKGwsdSxpLHQsbyxyLGYsZSxzKXt2YXIgYSx2LGgsZCxfLGssYixnLHcseCxBLFA9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7bnVsbCE9aS5fX2gmJihzPWkuX19oLGU9dS5fX2U9aS5fX2UsdS5fX2g9bnVsbCxyPVtlXSksKGE9bi5fX2IpJiZhKHUpO3RyeXtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFApe2lmKGc9dS5wcm9wcyx3PShhPVAuY29udGV4dFR5cGUpJiZ0W2EuX19jXSx4PWE/dz93LnByb3BzLnZhbHVlOmEuX186dCxpLl9fYz9iPSh2PXUuX19jPWkuX19jKS5fXz12Ll9fRTooXCJwcm90b3R5cGVcImluIFAmJlAucHJvdG90eXBlLnJlbmRlcj91Ll9fYz12PW5ldyBQKGcseCk6KHUuX19jPXY9bmV3IHAoZyx4KSx2LmNvbnN0cnVjdG9yPVAsdi5yZW5kZXI9TSksdyYmdy5zdWIodiksdi5wcm9wcz1nLHYuc3RhdGV8fCh2LnN0YXRlPXt9KSx2LmNvbnRleHQ9eCx2Ll9fbj10LGg9di5fX2Q9ITAsdi5fX2g9W10pLG51bGw9PXYuX19zJiYodi5fX3M9di5zdGF0ZSksbnVsbCE9UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJih2Ll9fcz09di5zdGF0ZSYmKHYuX19zPWMoe30sdi5fX3MpKSxjKHYuX19zLFAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKGcsdi5fX3MpKSksZD12LnByb3BzLF89di5zdGF0ZSxoKW51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT12LmNvbXBvbmVudFdpbGxNb3VudCYmdi5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT12LmNvbXBvbmVudERpZE1vdW50JiZ2Ll9faC5wdXNoKHYuY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmchPT1kJiZudWxsIT12LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJnYuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhnLHgpLCF2Ll9fZSYmbnVsbCE9di5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09di5zaG91bGRDb21wb25lbnRVcGRhdGUoZyx2Ll9fcyx4KXx8dS5fX3Y9PT1pLl9fdil7di5wcm9wcz1nLHYuc3RhdGU9di5fX3MsdS5fX3YhPT1pLl9fdiYmKHYuX19kPSExKSx2Ll9fdj11LHUuX19lPWkuX19lLHUuX19rPWkuX19rLHUuX19rLmZvckVhY2goZnVuY3Rpb24obil7biYmKG4uX189dSl9KSx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KTticmVhayBufW51bGwhPXYuY29tcG9uZW50V2lsbFVwZGF0ZSYmdi5jb21wb25lbnRXaWxsVXBkYXRlKGcsdi5fX3MseCksbnVsbCE9di5jb21wb25lbnREaWRVcGRhdGUmJnYuX19oLnB1c2goZnVuY3Rpb24oKXt2LmNvbXBvbmVudERpZFVwZGF0ZShkLF8sayl9KX12LmNvbnRleHQ9eCx2LnByb3BzPWcsdi5zdGF0ZT12Ll9fcywoYT1uLl9fcikmJmEodSksdi5fX2Q9ITEsdi5fX3Y9dSx2Ll9fUD1sLGE9di5yZW5kZXIodi5wcm9wcyx2LnN0YXRlLHYuY29udGV4dCksdi5zdGF0ZT12Ll9fcyxudWxsIT12LmdldENoaWxkQ29udGV4dCYmKHQ9YyhjKHt9LHQpLHYuZ2V0Q2hpbGRDb250ZXh0KCkpKSxofHxudWxsPT12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwoaz12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGQsXykpLEE9bnVsbCE9YSYmYS50eXBlPT09eSYmbnVsbD09YS5rZXk/YS5wcm9wcy5jaGlsZHJlbjphLG0obCxBcnJheS5pc0FycmF5KEEpP0E6W0FdLHUsaSx0LG8scixmLGUscyksdi5iYXNlPXUuX19lLHUuX19oPW51bGwsdi5fX2gubGVuZ3RoJiZmLnB1c2godiksYiYmKHYuX19FPXYuX189bnVsbCksdi5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9aihpLl9fZSx1LGksdCxvLHIsZixzKTsoYT1uLmRpZmZlZCkmJmEodSl9Y2F0Y2gobCl7dS5fX3Y9bnVsbCwoc3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhcyxyW3IuaW5kZXhPZihlKV09bnVsbCksbi5fX2UobCx1LGkpfX1mdW5jdGlvbiBUKGwsdSl7bi5fX2MmJm4uX19jKHUsbCksbC5zb21lKGZ1bmN0aW9uKHUpe3RyeXtsPXUuX19oLHUuX19oPVtdLGwuc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChsKXtuLl9fZShsLHUuX192KX19KX1mdW5jdGlvbiBqKG4sbCx1LGksdCxvLGUsYyl7dmFyIGEsdixoLHkscD11LnByb3BzLGQ9bC5wcm9wcyxfPWwudHlwZSxrPTA7aWYoXCJzdmdcIj09PV8mJih0PSEwKSxudWxsIT1vKWZvcig7azxvLmxlbmd0aDtrKyspaWYoKGE9b1trXSkmJihhPT09bnx8KF8/YS5sb2NhbE5hbWU9PV86Mz09YS5ub2RlVHlwZSkpKXtuPWEsb1trXT1udWxsO2JyZWFrfWlmKG51bGw9PW4pe2lmKG51bGw9PT1fKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKTtuPXQ/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixfKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KF8sZC5pcyYmZCksbz1udWxsLGM9ITF9aWYobnVsbD09PV8pcD09PWR8fGMmJm4uZGF0YT09PWR8fChuLmRhdGE9ZCk7ZWxzZXtpZihvPW8mJmYuc2xpY2UuY2FsbChuLmNoaWxkTm9kZXMpLHY9KHA9dS5wcm9wc3x8cikuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1vKWZvcihwPXt9LHk9MDt5PG4uYXR0cmlidXRlcy5sZW5ndGg7eSsrKXBbbi5hdHRyaWJ1dGVzW3ldLm5hbWVdPW4uYXR0cmlidXRlc1t5XS52YWx1ZTsoaHx8dikmJihoJiYodiYmaC5fX2h0bWw9PXYuX19odG1sfHxoLl9faHRtbD09PW4uaW5uZXJIVE1MKXx8KG4uaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9aWYoQShuLGQscCx0LGMpLGgpbC5fX2s9W107ZWxzZSBpZihrPWwucHJvcHMuY2hpbGRyZW4sbShuLEFycmF5LmlzQXJyYXkoayk/azpba10sbCx1LGksdCYmXCJmb3JlaWduT2JqZWN0XCIhPT1fLG8sZSxuLmZpcnN0Q2hpbGQsYyksbnVsbCE9bylmb3Ioaz1vLmxlbmd0aDtrLS07KW51bGwhPW9ba10mJnMob1trXSk7Y3x8KFwidmFsdWVcImluIGQmJnZvaWQgMCE9PShrPWQudmFsdWUpJiYoayE9PW4udmFsdWV8fFwicHJvZ3Jlc3NcIj09PV8mJiFrKSYmQyhuLFwidmFsdWVcIixrLHAudmFsdWUsITEpLFwiY2hlY2tlZFwiaW4gZCYmdm9pZCAwIT09KGs9ZC5jaGVja2VkKSYmayE9PW4uY2hlY2tlZCYmQyhuLFwiY2hlY2tlZFwiLGsscC5jaGVja2VkLCExKSl9cmV0dXJuIG59ZnVuY3Rpb24geihsLHUsaSl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIGw/bCh1KTpsLmN1cnJlbnQ9dX1jYXRjaChsKXtuLl9fZShsLGkpfX1mdW5jdGlvbiBMKGwsdSxpKXt2YXIgdCxvLHI7aWYobi51bm1vdW50JiZuLnVubW91bnQobCksKHQ9bC5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1sLl9fZXx8eih0LG51bGwsdSkpLGl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGwudHlwZXx8KGk9bnVsbCE9KG89bC5fX2UpKSxsLl9fZT1sLl9fZD12b2lkIDAsbnVsbCE9KHQ9bC5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobCl7bi5fX2UobCx1KX10LmJhc2U9dC5fX1A9bnVsbH1pZih0PWwuX19rKWZvcihyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmTCh0W3JdLHUsaSk7bnVsbCE9byYmcyhvKX1mdW5jdGlvbiBNKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIE4obCx1LGkpe3ZhciB0LG8sZTtuLl9fJiZuLl9fKGwsdSksbz0odD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpKT9udWxsOmkmJmkuX19rfHx1Ll9fayxlPVtdLEkodSxsPSghdCYmaXx8dSkuX19rPWEoeSxudWxsLFtsXSksb3x8cixyLHZvaWQgMCE9PXUub3duZXJTVkdFbGVtZW50LCF0JiZpP1tpXTpvP251bGw6dS5maXJzdENoaWxkP2Yuc2xpY2UuY2FsbCh1LmNoaWxkTm9kZXMpOm51bGwsZSwhdCYmaT9pOm8/by5fX2U6dS5maXJzdENoaWxkLHQpLFQoZSxsKX1mdW5jdGlvbiBPKG4sbCl7TihuLGwsTyl9ZnVuY3Rpb24gUyhuLGwsdSl7dmFyIGksdCxvLHI9YXJndW1lbnRzLGY9Yyh7fSxuLnByb3BzKTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtyZXR1cm4gbnVsbCE9dSYmKGYuY2hpbGRyZW49dSksdihuLnR5cGUsZixpfHxuLmtleSx0fHxuLnJlZixudWxsKX1mdW5jdGlvbiBxKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK28rKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGspfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49e19fZTpmdW5jdGlvbihuLGwpe2Zvcih2YXIgdSxpLHQ7bD1sLl9fOylpZigodT1sLl9fYykmJiF1Ll9fKXRyeXtpZigoaT11LmNvbnN0cnVjdG9yKSYmbnVsbCE9aS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih1LnNldFN0YXRlKGkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSx0PXUuX19kKSxudWxsIT11LmNvbXBvbmVudERpZENhdGNoJiYodS5jb21wb25lbnREaWRDYXRjaChuKSx0PXUuX19kKSx0KXJldHVybiB1Ll9fRT11fWNhdGNoKGwpe249bH10aHJvdyBufSxfX3Y6MH0sbD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmdm9pZCAwPT09bi5jb25zdHJ1Y3Rvcn0scC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9Yyh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGMoe30sdSksdGhpcy5wcm9wcykpLG4mJmModSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX19oLnB1c2gobCksayh0aGlzKSl9LHAucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSxrKHRoaXMpKX0scC5wcm90b3R5cGUucmVuZGVyPXksdT1bXSxpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LGIuX19yPTAsbz0wO2V4cG9ydHtOIGFzIHJlbmRlcixPIGFzIGh5ZHJhdGUsYSBhcyBjcmVhdGVFbGVtZW50LGEgYXMgaCx5IGFzIEZyYWdtZW50LGggYXMgY3JlYXRlUmVmLGwgYXMgaXNWYWxpZEVsZW1lbnQscCBhcyBDb21wb25lbnQsUyBhcyBjbG9uZUVsZW1lbnQscSBhcyBjcmVhdGVDb250ZXh0LHcgYXMgdG9DaGlsZEFycmF5LG4gYXMgb3B0aW9uc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QubW9kdWxlLmpzLm1hcFxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMTAuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJPdXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX09VVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9PVVQgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlck91dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlck91dDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gIVN5bWJvbC5zaGFtICYmXG4gICAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgIChJU19OT0RFID8gVjhfVkVSU0lPTiA9PT0gMzggOiBWOF9WRVJTSU9OID4gMzcgJiYgVjhfVkVSU0lPTiA8IDQxKTtcbn0pO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuY29udGVudGZ1bEV4dGVuc2lvbjsiLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWllZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJztcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiAhTkFUSVZFX1JFSkVDVElPTl9FVkVOVCkgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUHJvbWlzZUNvbnN0cnVjdG9yKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICB2YXIgcHJvbWlzZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKDEpO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIHJldHVybiAhKHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2UpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UICYmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkpIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3Qod3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdCh7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNwZWMgcmVxdWlyZW1lbnRcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgbG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMocG9zdClcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IpIHtcbiAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSkudmFsdWU7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSwgbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xuXG4vLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmNvbnN0cnVjdFxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEobmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG52YXIgRk9SQ0VEID0gTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUc7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06IEZPUkNFRCB9LCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICBpZiAoIShhcmdzTGVuZ3RoIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHdlIGhhdmUgbm8gcHJvcGVyIGFsdGVybmF0aXZlcywgSUU4LSBvbmx5XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGxpc3Quam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogZm4uYXBwbHkodGhhdCwgYXJncyk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZEZ1bmN0aW9uLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kRnVuY3Rpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0LCAxICsgQVNfRU5UUklFUyArIElOVEVSUlVQVEVEKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfV0VCT1NfV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIC8vIGFsc28gZXhjZXB0IFdlYk9TIFdlYmtpdCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODk4XG4gIGlmICghSVNfSU9TICYmICFJU19OT0RFICYmICFJU19XRUJPU19XRUJLSVQgJiYgTXV0YXRpb25PYnNlcnZlciAmJiBkb2N1bWVudCkge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgbmF0aXZlU2xpY2UgPSBbXS5zbGljZTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IHRvTGVuZ3RoKEUubGVuZ3RoKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCB7Q29tcG9uZW50LCBoLCBKU1gsIHJlbmRlcn0gZnJvbSAncHJlYWN0J1xuXG5leHBvcnQgaW50ZXJmYWNlIElQYWlyIHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgaXRlbXM/OiBJUGFpcltdXG4gIG9uSXRlbXNDaGFuZ2VkPzogKGV2dDogSVBhaXJbXSkgPT4gYW55XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICBrZXk/OiBzdHJpbmdcbiAgdmFsdWU/OiBzdHJpbmcsXG4gIGVycm9ycz86IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBjbGFzcyBLVlBGb3JtIGV4dGVuZHMgQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNldEtleSA9IHRoaXMuc2V0S2V5LmJpbmQodGhpcylcbiAgICB0aGlzLnNldFZhbCA9IHRoaXMuc2V0VmFsLmJpbmQodGhpcylcbiAgICB0aGlzLmFkZFJvdyA9IHRoaXMuYWRkUm93LmJpbmQodGhpcylcbiAgICB0aGlzLmRlbGV0ZVJvdyA9IHRoaXMuZGVsZXRlUm93LmJpbmQodGhpcylcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgY29uc3Qge2l0ZW1zfSA9IHRoaXMucHJvcHNcbiAgICBjb25zb2xlLmxvZygncmVyZW5kZXInLCB0aGlzLnN0YXRlLmVycm9ycylcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImt2cC1mb3JtXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwia3ZwLWZvcm1fX3RhYmxlXCI+XG4gICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7aXRlbXMgJiYgaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT5cbiAgICAgICAgICAgICAgICAgIDx0ciBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJrdnAtZm9ybV9fdGFibGVfX3Jvd1wiIGRhdGEtdGVzdGlkPVwidGFibGUtcm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ0ZXh0XCI+e2l0ZW0ua2V5fTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJkaXZpZGVyXCI+fDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ0ZXh0XCI+e2l0ZW0udmFsdWV9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtdmVydFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiXCIgZGF0YS10ZXN0aWQ9XCJtb3ZlLXVwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm1vdmVVcChpbmRleCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7aW5kZXggPiAwID8gJ+KWsycgOiAnXFx1MDBBMCd9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJcIiAgZGF0YS10ZXN0aWQ9XCJtb3ZlLWRvd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMubW92ZURvd24oaW5kZXgpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge2luZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSA/ICfilr0nIDogJ1xcdTAwQTAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiY2YtYnRuLXNlY29uZGFyeSBkZWxldGVcIiBkYXRhLXRlc3RpZD1cImRlbGV0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmRlbGV0ZVJvdyhpdGVtKX0+WDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj4sXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwia3ZwLWZvcm1fX3RhYmxlX19yb3cgZm9ybVwiIGRhdGEtdGVzdGlkPVwiZm9ybS1yb3dcIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ0ZXh0XCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiY2YtZm9ybS1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCJrZXlcIiBkYXRhLXRlc3RpZD1cImtleVwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNldEtleX0gdmFsdWU9e3RoaXMuc3RhdGUua2V5fT48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJkaXZpZGVyXCI+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpdmlkZXJcIj58PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJ0ZXh0XCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiY2YtZm9ybS1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCJ2YWx1ZVwiIGRhdGEtdGVzdGlkPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXRWYWx9IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfT48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImNmLWJ0bi1wcmltYXJ5XCIgdHlwZT1cInN1Ym1pdFwiIGlkPVwiYWRkXCIgZGF0YS10ZXN0aWQ9XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmFkZFJvd30+KzwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JzICYmIHRoaXMuc3RhdGUuZXJyb3JzLm1hcCgoZSkgPT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvclwiIGRhdGEtdGVzdGlkPVwiZXJyb3JcIj57ZX08L2Rpdj4sXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgfVxuXG4gIHByaXZhdGUgc2V0S2V5OiBKU1guR2VuZXJpY0V2ZW50SGFuZGxlcjxIVE1MSW5wdXRFbGVtZW50PiA9IChldnQpID0+IHtcbiAgICBjb25zdCBuZXdLZXkgPSB0eXBlb2YgZXZ0ID09ICdzdHJpbmcnID8gZXZ0IDogKGV2dC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGtleTogbmV3S2V5LFxuICAgIH0pXG4gIH1cbiAgcHJpdmF0ZSBzZXRWYWw6IEpTWC5HZW5lcmljRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+ID0gKGV2dCkgPT4ge1xuICAgIGNvbnN0IG5ld1ZhbCA9IHR5cGVvZiBldnQgPT0gJ3N0cmluZycgPyBldnQgOiAoZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdmFsdWU6IG5ld1ZhbCxcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRSb3coKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW11cbiAgICBpZiAoIXRoaXMuc3RhdGUua2V5IHx8IHRoaXMuc3RhdGUua2V5Lmxlbmd0aCA9PSAwKSB7XG4gICAgICBlcnJvcnMucHVzaChgUGxlYXNlIHNldCBhIGtleWApXG4gICAgfVxuICAgIGlmICghdGhpcy5zdGF0ZS52YWx1ZSB8fCB0aGlzLnN0YXRlLnZhbHVlLmxlbmd0aCA9PSAwKSB7XG4gICAgICBlcnJvcnMucHVzaChgUGxlYXNlIHNldCBhIHZhbHVlYClcbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPT0gMCAmJiB0aGlzLnByb3BzLm9uSXRlbXNDaGFuZ2VkKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHsga2V5OiB0aGlzLnN0YXRlLmtleSwgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUgfVxuICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLnByb3BzLml0ZW1zIHx8IFtdXG5cbiAgICAgIHRoaXMucHJvcHMub25JdGVtc0NoYW5nZWQoWy4uLml0ZW1zLCB2YWx1ZV0pXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAga2V5OiAnJyxcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBlcnJvcnMsXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZGVsZXRlUm93KGl0ZW06IElQYWlyKSB7XG4gICAgY29uc29sZS5sb2coJ2RlbGV0ZVJvdycpXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBrZXk6IGl0ZW0ua2V5LFxuICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgfSlcblxuICAgIGlmICghdGhpcy5wcm9wcy5vbkl0ZW1zQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLnByb3BzLml0ZW1zIHx8IFtdXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgaSA9IGl0ZW1zLmZpbmRJbmRleCgocCkgPT4gcC5rZXkgPT0gaXRlbS5rZXkgJiYgcC52YWx1ZSA9PSBpdGVtLnZhbHVlKVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IGl0ZW1zLnNsaWNlKDAsIGkpXG4gICAgdmFsdWUucHVzaCguLi5pdGVtcy5zbGljZShpICsgMSkpXG4gICAgdGhpcy5wcm9wcy5vbkl0ZW1zQ2hhbmdlZCh2YWx1ZSlcbiAgfVxuXG4gIHByaXZhdGUgbW92ZVVwKGluZGV4OiBudW1iZXIpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMucHJvcHMuaXRlbXMgfHwgW11cbiAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCAmJiBpbmRleCA+IDAgJiYgdGhpcy5wcm9wcy5vbkl0ZW1zQ2hhbmdlZCkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLnNwbGljZShpbmRleCwgMSlcbiAgICAgIGl0ZW1zLnNwbGljZShpbmRleCAtIDEsIDAsIC4uLml0ZW0pXG4gICAgICB0aGlzLnByb3BzLm9uSXRlbXNDaGFuZ2VkKGl0ZW1zKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbW92ZURvd24oaW5kZXg6IG51bWJlcikge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcyB8fCBbXVxuICAgIGlmIChpdGVtcy5sZW5ndGggPiAwICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSAmJiB0aGlzLnByb3BzLm9uSXRlbXNDaGFuZ2VkKSB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgaXRlbXMuc3BsaWNlKGluZGV4ICsgMSwgMCwgLi4uaXRlbSlcbiAgICAgIHRoaXMucHJvcHMub25JdGVtc0NoYW5nZWQoaXRlbXMpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBjb250ZW50ZnVsRXh0ZW5zaW9uIGZyb20gJ2NvbnRlbnRmdWwtdWktZXh0ZW5zaW9ucy1zZGsnXG5pbXBvcnQge0ZpZWxkRXh0ZW5zaW9uU0RLfSBmcm9tICdjb250ZW50ZnVsLXVpLWV4dGVuc2lvbnMtc2RrJ1xuaW1wb3J0IHtDb21wb25lbnQsIGgsIHJlbmRlcn0gZnJvbSAncHJlYWN0J1xuaW1wb3J0IHsgSVBhaXIsIEtWUEZvcm0gfSBmcm9tICcuL2t2cC1mb3JtJ1xuXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobW9kdWxlOiBzdHJpbmcpOiBhbnlcbmNvbnN0IHN0eWxlcyA9IHJlcXVpcmUoJy4vc3R5bGUuc2NzcycpXG5cbmlmIChjb250ZW50ZnVsRXh0ZW5zaW9uKSB7XG4gIGNvbnRlbnRmdWxFeHRlbnNpb24uaW5pdCgoZXh0ZW5zaW9uOiBGaWVsZEV4dGVuc2lvblNESykgPT4ge1xuICAgIHJlbmRlcig8S3ZwRWRpdG9yIHsuLi5leHRlbnNpb259IC8+LFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0LXJvb3QnKSlcbiAgICBleHRlbnNpb24ud2luZG93LnN0YXJ0QXV0b1Jlc2l6ZXIoKVxuICB9KVxufVxuXG5pbnRlcmZhY2UgSUFwcFN0YXRlIHtcbiAgZmllbGRWYWx1ZT86IEt2cExpc3QsXG4gIHdhaXRpbmc/OiBib29sZWFuXG59XG5cbnR5cGUgS3ZwTGlzdCA9IEFycmF5PHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9PlxuXG5leHBvcnQgY2xhc3MgS3ZwRWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50PEZpZWxkRXh0ZW5zaW9uU0RLLCBJQXBwU3RhdGU+IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5vbkl0ZW1zQ2hhbmdlZCA9IHRoaXMub25JdGVtc0NoYW5nZWQuYmluZCh0aGlzKVxuICB9XG5cbiAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHNkayA9IHRoaXMucHJvcHNcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZpZWxkVmFsdWU6IChzZGsuZmllbGQuZ2V0VmFsdWUoKSB8fCBbXSkuZmlsdGVyKChpOiBhbnkpID0+IGkpLFxuICAgIH0pXG5cbiAgICBzZGsuZmllbGQub25WYWx1ZUNoYW5nZWQoKG5ld1ZhbHVlKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZmllbGRWYWx1ZTogKG5ld1ZhbHVlIHx8IFtdKS5maWx0ZXIoKGk6IGFueSkgPT4gaSksXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZmllbGRWYWx1ZSwgd2FpdGluZyB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXt3YWl0aW5nID8gJ2Rpc2FibGVkJyA6ICcnfT5cbiAgICAgIDxLVlBGb3JtXG4gICAgICAgIGl0ZW1zPXtmaWVsZFZhbHVlfVxuICAgICAgICBvbkl0ZW1zQ2hhbmdlZD17dGhpcy5vbkl0ZW1zQ2hhbmdlZH1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG9uSXRlbXNDaGFuZ2VkKG5ld0l0ZW1zOiBJUGFpcltdKSB7XG4gICAgY29uc3Qgc2RrID0gdGhpcy5wcm9wc1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB3YWl0aW5nOiB0cnVlLFxuICAgIH0pXG5cbiAgICBhd2FpdCBzZGsuZmllbGQuc2V0VmFsdWUobmV3SXRlbXMpXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmaWVsZFZhbHVlOiBuZXdJdGVtcyxcbiAgICAgIHdhaXRpbmc6IGZhbHNlLFxuICAgIH0pXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EX0lOREVYID0gJ2ZpbmRJbmRleCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkRfSU5ERVggaW4gW10pIEFycmF5KDEpW0ZJTkRfSU5ERVhdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORF9JTkRFWCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyKGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQgPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCk7XG4gICAgfVxuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlIE9bayAtIDFdO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBPLmxlbmd0aCA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==