!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="../",n(n.s=351)}([function(t,e,n){var r=n(1),o=n(34),i=n(7),u=n(51),c=n(54),a=n(77),s=o("wks"),f=r.Symbol,l=a?f:f&&f.withoutSetter||u;t.exports=function(t){return i(s,t)&&(c||"string"==typeof s[t])||(c&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,n(71))},function(t,e,n){"use strict";n.r(e),n.d(e,"render",(function(){return N})),n.d(e,"hydrate",(function(){return U})),n.d(e,"createElement",(function(){return v})),n.d(e,"h",(function(){return v})),n.d(e,"Fragment",(function(){return g})),n.d(e,"createRef",(function(){return y})),n.d(e,"isValidElement",(function(){return o})),n.d(e,"Component",(function(){return _})),n.d(e,"cloneElement",(function(){return D})),n.d(e,"createContext",(function(){return G})),n.d(e,"toChildArray",(function(){return E})),n.d(e,"options",(function(){return r}));var r,o,i,u,c,a,s={},f=[],l=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function p(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function v(t,e,n){var r,o,i,u=arguments,c={};for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:c[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(u[i]);if(null!=n&&(c.children=n),"function"==typeof t&&null!=t.defaultProps)for(i in t.defaultProps)void 0===c[i]&&(c[i]=t.defaultProps[i]);return d(t,c,r,o,null)}function d(t,e,n,o,i){var u={type:t,props:e,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++r.__v:i};return null!=r.vnode&&r.vnode(u),u}function y(){return{current:null}}function g(t){return t.children}function _(t,e){this.props=t,this.context=e}function m(t,e){if(null==e)return t.__?m(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?m(t):null}function b(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return b(t)}}function x(t){(!t.__d&&(t.__d=!0)&&i.push(t)&&!w.__r++||c!==r.debounceRendering)&&((c=r.debounceRendering)||u)(w)}function w(){for(var t;w.__r=i.length;)t=i.sort((function(t,e){return t.__v.__b-e.__v.__b})),i=[],t.some((function(t){var e,n,r,o,i,u;t.__d&&(i=(o=(e=t).__v).__e,(u=e.__P)&&(n=[],(r=p({},o)).__v=o.__v+1,R(u,o,r,e.__n,void 0!==u.ownerSVGElement,null!=o.__h?[i]:null,n,null==i?m(o):i,o.__h),L(n,o),o.__e!=i&&b(o)))}))}function S(t,e,n,r,o,i,u,c,a,l){var p,h,v,y,_,b,x,w=r&&r.__k||f,S=w.length;for(n.__k=[],p=0;p<e.length;p++)if(null!=(y=n.__k[p]=null==(y=e[p])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?d(null,y,null,null,y):Array.isArray(y)?d(g,{children:y},null,null,null):y.__b>0?d(y.type,y.props,y.key,null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(v=w[p])||v&&y.key==v.key&&y.type===v.type)w[p]=void 0;else for(h=0;h<S;h++){if((v=w[h])&&y.key==v.key&&y.type===v.type){w[h]=void 0;break}v=null}R(t,y,v=v||s,o,i,u,c,a,l),_=y.__e,(h=y.ref)&&v.ref!=h&&(x||(x=[]),v.ref&&x.push(v.ref,null,y),x.push(h,y.__c||_,y)),null!=_?(null==b&&(b=_),"function"==typeof y.type&&null!=y.__k&&y.__k===v.__k?y.__d=a=O(y,a,t):a=j(t,y,v,w,_,a),l||"option"!==n.type?"function"==typeof n.type&&(n.__d=a):t.value=""):a&&v.__e==a&&a.parentNode!=t&&(a=m(v))}for(n.__e=b,p=S;p--;)null!=w[p]&&("function"==typeof n.type&&null!=w[p].__e&&w[p].__e==n.__d&&(n.__d=m(r,p+1)),M(w[p],w[p]));if(x)for(p=0;p<x.length;p++)I(x[p],x[++p],x[++p])}function O(t,e,n){var r,o;for(r=0;r<t.__k.length;r++)(o=t.__k[r])&&(o.__=t,e="function"==typeof o.type?O(o,e,n):j(n,o,o,t.__k,o.__e,e));return e}function E(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){E(t,e)})):e.push(t)),e}function j(t,e,n,r,o,i){var u,c,a;if(void 0!==e.__d)u=e.__d,e.__d=void 0;else if(null==n||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),u=null;else{for(c=i,a=0;(c=c.nextSibling)&&a<r.length;a+=2)if(c==o)break t;t.insertBefore(o,i),u=i}return void 0!==u?u:o.nextSibling}function k(t,e,n){"-"===e[0]?t.setProperty(e,n):t[e]=null==n?"":"number"!=typeof n||l.test(e)?n:n+"px"}function P(t,e,n,r,o){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||k(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||k(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r||t.addEventListener(e,i?A:T,i):t.removeEventListener(e,i?A:T,i);else if("dangerouslySetInnerHTML"!==e){if(o)e=e.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null!=n&&(!1!==n||"a"===e[0]&&"r"===e[1])?t.setAttribute(e,n):t.removeAttribute(e))}}function T(t){this.l[t.type+!1](r.event?r.event(t):t)}function A(t){this.l[t.type+!0](r.event?r.event(t):t)}function R(t,e,n,o,i,u,c,a,s){var f,l,h,v,d,y,m,b,x,w,O,E=e.type;if(void 0!==e.constructor)return null;null!=n.__h&&(s=n.__h,a=e.__e=n.__e,e.__h=null,u=[a]),(f=r.__b)&&f(e);try{t:if("function"==typeof E){if(b=e.props,x=(f=E.contextType)&&o[f.__c],w=f?x?x.props.value:f.__:o,n.__c?m=(l=e.__c=n.__c).__=l.__E:("prototype"in E&&E.prototype.render?e.__c=l=new E(b,w):(e.__c=l=new _(b,w),l.constructor=E,l.render=F),x&&x.sub(l),l.props=b,l.state||(l.state={}),l.context=w,l.__n=o,h=l.__d=!0,l.__h=[]),null==l.__s&&(l.__s=l.state),null!=E.getDerivedStateFromProps&&(l.__s==l.state&&(l.__s=p({},l.__s)),p(l.__s,E.getDerivedStateFromProps(b,l.__s))),v=l.props,d=l.state,h)null==E.getDerivedStateFromProps&&null!=l.componentWillMount&&l.componentWillMount(),null!=l.componentDidMount&&l.__h.push(l.componentDidMount);else{if(null==E.getDerivedStateFromProps&&b!==v&&null!=l.componentWillReceiveProps&&l.componentWillReceiveProps(b,w),!l.__e&&null!=l.shouldComponentUpdate&&!1===l.shouldComponentUpdate(b,l.__s,w)||e.__v===n.__v){l.props=b,l.state=l.__s,e.__v!==n.__v&&(l.__d=!1),l.__v=e,e.__e=n.__e,e.__k=n.__k,e.__k.forEach((function(t){t&&(t.__=e)})),l.__h.length&&c.push(l);break t}null!=l.componentWillUpdate&&l.componentWillUpdate(b,l.__s,w),null!=l.componentDidUpdate&&l.__h.push((function(){l.componentDidUpdate(v,d,y)}))}l.context=w,l.props=b,l.state=l.__s,(f=r.__r)&&f(e),l.__d=!1,l.__v=e,l.__P=t,f=l.render(l.props,l.state,l.context),l.state=l.__s,null!=l.getChildContext&&(o=p(p({},o),l.getChildContext())),h||null==l.getSnapshotBeforeUpdate||(y=l.getSnapshotBeforeUpdate(v,d)),O=null!=f&&f.type===g&&null==f.key?f.props.children:f,S(t,Array.isArray(O)?O:[O],e,n,o,i,u,c,a,s),l.base=e.__e,e.__h=null,l.__h.length&&c.push(l),m&&(l.__E=l.__=null),l.__e=!1}else null==u&&e.__v===n.__v?(e.__k=n.__k,e.__e=n.__e):e.__e=C(n.__e,e,n,o,i,u,c,s);(f=r.diffed)&&f(e)}catch(t){e.__v=null,(s||null!=u)&&(e.__e=a,e.__h=!!s,u[u.indexOf(a)]=null),r.__e(t,e,n)}}function L(t,e){r.__c&&r.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){r.__e(t,e.__v)}}))}function C(t,e,n,r,o,i,u,c){var a,l,p,v,d=n.props,y=e.props,g=e.type,_=0;if("svg"===g&&(o=!0),null!=i)for(;_<i.length;_++)if((a=i[_])&&(a===t||(g?a.localName==g:3==a.nodeType))){t=a,i[_]=null;break}if(null==t){if(null===g)return document.createTextNode(y);t=o?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,y.is&&y),i=null,c=!1}if(null===g)d===y||c&&t.data===y||(t.data=y);else{if(i=i&&f.slice.call(t.childNodes),l=(d=n.props||s).dangerouslySetInnerHTML,p=y.dangerouslySetInnerHTML,!c){if(null!=i)for(d={},v=0;v<t.attributes.length;v++)d[t.attributes[v].name]=t.attributes[v].value;(p||l)&&(p&&(l&&p.__html==l.__html||p.__html===t.innerHTML)||(t.innerHTML=p&&p.__html||""))}if(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||P(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||P(t,i,e[i],n[i],r)}(t,y,d,o,c),p)e.__k=[];else if(_=e.props.children,S(t,Array.isArray(_)?_:[_],e,n,r,o&&"foreignObject"!==g,i,u,t.firstChild,c),null!=i)for(_=i.length;_--;)null!=i[_]&&h(i[_]);c||("value"in y&&void 0!==(_=y.value)&&(_!==t.value||"progress"===g&&!_)&&P(t,"value",_,d.value,!1),"checked"in y&&void 0!==(_=y.checked)&&_!==t.checked&&P(t,"checked",_,d.checked,!1))}return t}function I(t,e,n){try{"function"==typeof t?t(e):t.current=e}catch(t){r.__e(t,n)}}function M(t,e,n){var o,i,u;if(r.unmount&&r.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||I(o,null,e)),n||"function"==typeof t.type||(n=null!=(i=t.__e)),t.__e=t.__d=void 0,null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){r.__e(t,e)}o.base=o.__P=null}if(o=t.__k)for(u=0;u<o.length;u++)o[u]&&M(o[u],e,n);null!=i&&h(i)}function F(t,e,n){return this.constructor(t,n)}function N(t,e,n){var o,i,u;r.__&&r.__(t,e),i=(o="function"==typeof n)?null:n&&n.__k||e.__k,u=[],R(e,t=(!o&&n||e).__k=v(g,null,[t]),i||s,s,void 0!==e.ownerSVGElement,!o&&n?[n]:i?null:e.firstChild?f.slice.call(e.childNodes):null,u,!o&&n?n:i?i.__e:e.firstChild,o),L(u,t)}function U(t,e){N(t,e,U)}function D(t,e,n){var r,o,i,u=arguments,c=p({},t.props);for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:c[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(u[i]);return null!=n&&(c.children=n),d(t.type,c,r||t.key,o||t.ref,null)}function G(t,e){var n={__c:e="__cC"+a++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var n,r;return this.getChildContext||(n=[],(r={})[e]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&n.some(x)},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return n.Provider.__=n.Consumer.contextType=n}r={__e:function(t,e){for(var n,r,o;e=e.__;)if((n=e.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(t)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(t),o=n.__d),o)return n.__E=n}catch(e){t=e}throw t},__v:0},o=function(t){return null!=t&&void 0===t.constructor},_.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof t&&(t=t(p({},n),this.props)),t&&p(n,t),null!=t&&this.__v&&(e&&this.__h.push(e),x(this))},_.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),x(this))},_.prototype.render=g,i=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,w.__r=0,a=0},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(1),o=n(17).f,i=n(10),u=n(14),c=n(48),a=n(73),s=n(76);t.exports=function(t,e){var n,f,l,p,h,v=t.target,d=t.global,y=t.stat;if(n=d?r:y?r[v]||c(v,{}):(r[v]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(h=o(n,f))&&h.value:n[f],!s(d?f:v+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(n,f,p,t)}}},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(9),o=n(72),i=n(5),u=n(27),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(i(t),e=u(e,!0),i(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(9),o=n(8),i=n(23);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(38),o=n(18);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(26),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(18);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(1),o=n(10),i=n(7),u=n(48),c=n(49),a=n(24),s=a.get,f=a.enforce,l=String(String).split("String");(t.exports=function(t,e,n,c){var a,s=!!c&&!!c.unsafe,p=!!c&&!!c.enumerable,h=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),(a=f(n)).source||(a.source=l.join("string"==typeof e?e:""))),t!==r?(s?!h&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:u(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(t,e,n){var r=n(74),o=n(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r=n(9),o=n(59),i=n(23),u=n(11),c=n(27),a=n(7),s=n(72),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=u(t),e=c(e,!0),s)try{return f(t,e)}catch(t){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e){t.exports=!1},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},,,function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r,o,i,u=n(123),c=n(1),a=n(6),s=n(10),f=n(7),l=n(50),p=n(28),h=n(29),v=c.WeakMap;if(u){var d=l.state||(l.state=new v),y=d.get,g=d.has,_=d.set;r=function(t,e){return e.facade=t,_.call(d,t,e),e},o=function(t){return y.call(d,t)||{}},i=function(t){return g.call(d,t)}}else{var m=p("state");h[m]=!0,r=function(t,e){return e.facade=t,s(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!a(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e){t.exports={}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(34),o=n(51),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){t.exports={}},function(t,e,n){var r=n(20),o=n(1);t.exports="process"==r(o.process)},function(t,e,n){var r=n(35),o=n(38),i=n(13),u=n(12),c=n(78),a=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,f=4==t,l=6==t,p=7==t,h=5==t||l;return function(v,d,y,g){for(var _,m,b=i(v),x=o(b),w=r(d,y,3),S=u(x.length),O=0,E=g||c,j=e?E(v,S):n||p?E(v,0):void 0;S>O;O++)if((h||O in x)&&(m=w(_=x[O],O,b),t))if(e)j[O]=m;else if(m)switch(t){case 3:return!0;case 5:return _;case 6:return O;case 2:a.call(j,_)}else switch(t){case 4:return!1;case 7:a.call(j,_)}return l?-1:s||f?f:j}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterOut:s(7)}},function(t,e,n){var r,o=n(5),i=n(124),u=n(53),c=n(29),a=n(79),s=n(47),f=n(28),l=f("IE_PROTO"),p=function(){},h=function(t){return"<script>"+t+"<\/script>"},v=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;v=r?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=s("iframe")).style.display="none",a.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var n=u.length;n--;)delete v.prototype[u[n]];return v()};c[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[l]=t):n=v(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(8).f,o=n(7),i=n(0)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(19),o=n(50);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.10.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(16);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r,o,i=n(1),u=n(55),c=i.process,a=c&&c.versions,s=a&&a.v8;s?o=(r=s.split("."))[0]+r[1]:u&&(!(r=u.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=u.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){var r=n(3),o=n(0),i=n(36),u=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[u]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){var r=n(3),o=n(20),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},,,function(t,e,n){"use strict";var r=n(11),o=n(98),i=n(25),u=n(24),c=n(88),a=u.set,s=u.getterFor("Array Iterator");t.exports=c(Array,"Array",(function(t,e){a(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=s(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},,function(t,e,n){var r=n(75),o=n(53);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(57),o=n(14),i=n(127);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){"use strict";var r=n(27),o=n(8),i=n(23);t.exports=function(t,e,n){var u=r(e);u in t?o.f(t,u,i(0,n)):t[u]=n}},function(t,e,n){var r=n(1),o=n(6),i=r.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e,n){var r=n(1),o=n(10);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(50),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(1),o=n(48),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(75),o=n(53).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(30),o=n(36),i=n(3);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},function(t,e,n){var r=n(15);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(7),o=n(13),i=n(28),u=n(80),c=i("IE_PROTO"),a=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),r(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r={};r[n(0)("toStringTag")]="z",t.exports="[object z]"===String(r)},,function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e){e.f=Object.getOwnPropertySymbols},,,function(t,e,n){"use strict";var r,o,i=n(119),u=n(105),c=n(34),a=RegExp.prototype.exec,s=c("native-string-replace",String.prototype.replace),f=a,l=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),p=u.UNSUPPORTED_Y||u.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(l||h||p)&&(f=function(t){var e,n,r,o,u=this,c=p&&u.sticky,f=i.call(u),v=u.source,d=0,y=t;return c&&(-1===(f=f.replace("y","")).indexOf("g")&&(f+="g"),y=String(t).slice(u.lastIndex),u.lastIndex>0&&(!u.multiline||u.multiline&&"\n"!==t[u.lastIndex-1])&&(v="(?: "+v+")",y=" "+y,d++),n=new RegExp("^(?:"+v+")",f)),h&&(n=new RegExp("^"+v+"$(?!\\s)",f)),l&&(e=u.lastIndex),r=a.call(c?n:u,y),c?r?(r.input=r.input.slice(d),r[0]=r[0].slice(d),r.index=u.lastIndex,u.lastIndex+=r[0].length):u.lastIndex=0:l&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),h&&r&&r.length>1&&s.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=f},function(t,e,n){"use strict";var r=n(4),o=n(1),i=n(15),u=n(19),c=n(9),a=n(54),s=n(77),f=n(3),l=n(7),p=n(39),h=n(6),v=n(5),d=n(13),y=n(11),g=n(27),_=n(23),m=n(32),b=n(44),x=n(52),w=n(138),S=n(60),O=n(17),E=n(8),j=n(59),k=n(10),P=n(14),T=n(34),A=n(28),R=n(29),L=n(51),C=n(0),I=n(86),M=n(87),F=n(33),N=n(24),U=n(31).forEach,D=A("hidden"),G=C("toPrimitive"),V=N.set,W=N.getterFor("Symbol"),$=Object.prototype,B=o.Symbol,H=i("JSON","stringify"),Y=O.f,z=E.f,J=w.f,K=j.f,Q=T("symbols"),q=T("op-symbols"),X=T("string-to-symbol-registry"),Z=T("symbol-to-string-registry"),tt=T("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=c&&f((function(){return 7!=m(z({},"a",{get:function(){return z(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=Y($,e);r&&delete $[e],z(t,e,n),r&&t!==$&&z($,e,r)}:z,ot=function(t,e){var n=Q[t]=m(B.prototype);return V(n,{type:"Symbol",tag:t,description:e}),c||(n.description=e),n},it=s?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof B},ut=function(t,e,n){t===$&&ut(q,e,n),v(t);var r=g(e,!0);return v(n),l(Q,r)?(n.enumerable?(l(t,D)&&t[D][r]&&(t[D][r]=!1),n=m(n,{enumerable:_(0,!1)})):(l(t,D)||z(t,D,_(1,{})),t[D][r]=!0),rt(t,r,n)):z(t,r,n)},ct=function(t,e){v(t);var n=y(e),r=b(n).concat(lt(n));return U(r,(function(e){c&&!at.call(n,e)||ut(t,e,n[e])})),t},at=function(t){var e=g(t,!0),n=K.call(this,e);return!(this===$&&l(Q,e)&&!l(q,e))&&(!(n||!l(this,e)||!l(Q,e)||l(this,D)&&this[D][e])||n)},st=function(t,e){var n=y(t),r=g(e,!0);if(n!==$||!l(Q,r)||l(q,r)){var o=Y(n,r);return!o||!l(Q,r)||l(n,D)&&n[D][r]||(o.enumerable=!0),o}},ft=function(t){var e=J(y(t)),n=[];return U(e,(function(t){l(Q,t)||l(R,t)||n.push(t)})),n},lt=function(t){var e=t===$,n=J(e?q:y(t)),r=[];return U(n,(function(t){!l(Q,t)||e&&!l($,t)||r.push(Q[t])})),r};(a||(P((B=function(){if(this instanceof B)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=L(t),n=function(t){this===$&&n.call(q,t),l(this,D)&&l(this[D],e)&&(this[D][e]=!1),rt(this,e,_(1,t))};return c&&nt&&rt($,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return W(this).tag})),P(B,"withoutSetter",(function(t){return ot(L(t),t)})),j.f=at,E.f=ut,O.f=st,x.f=w.f=ft,S.f=lt,I.f=function(t){return ot(C(t),t)},c&&(z(B.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),u||P($,"propertyIsEnumerable",at,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:B}),U(b(tt),(function(t){M(t)})),r({target:"Symbol",stat:!0,forced:!a},{for:function(t){var e=String(t);if(l(X,e))return X[e];var n=B(e);return X[e]=n,Z[n]=e,n},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(l(Z,t))return Z[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!a,sham:!c},{create:function(t,e){return void 0===e?m(t):ct(m(t),e)},defineProperty:ut,defineProperties:ct,getOwnPropertyDescriptor:st}),r({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:ft,getOwnPropertySymbols:lt}),r({target:"Object",stat:!0,forced:f((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(d(t))}}),H)&&r({target:"JSON",stat:!0,forced:!a||f((function(){var t=B();return"[null]"!=H([t])||"{}"!=H({a:t})||"{}"!=H(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(h(e)||void 0!==t)&&!it(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!it(e))return e}),o[1]=e,H.apply(null,o)}});B.prototype[G]||k(B.prototype,G,B.prototype.valueOf),F(B,"Symbol"),R[D]=!0},function(t,e,n){"use strict";var r=n(4),o=n(9),i=n(1),u=n(7),c=n(6),a=n(8).f,s=n(73),f=i.Symbol;if(o&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};s(p,f);var h=p.prototype=f.prototype;h.constructor=p;var v=h.toString,d="Symbol(test)"==String(f("test")),y=/^Symbol\((.*)\)[^)]+$/;a(h,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,e=v.call(t);if(u(l,t))return"";var n=d?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(87)("iterator")},function(t,e,n){"use strict";var r=n(90).charAt,o=n(24),i=n(88),u=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(1),o=n(101),i=n(42),u=n(10),c=n(0),a=c("iterator"),s=c("toStringTag"),f=i.values;for(var l in o){var p=r[l],h=p&&p.prototype;if(h){if(h[a]!==f)try{u(h,a,f)}catch(t){h[a]=f}if(h[s]||u(h,s,l),o[l])for(var v in i)if(h[v]!==i[v])try{u(h,v,i[v])}catch(t){h[v]=i[v]}}}},function(t,e,n){var r=n(26),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){"use strict";n.d(e,"c",(function(){return r})),n.d(e,"d",(function(){return o})),n.d(e,"b",(function(){return u})),n.d(e,"a",(function(){return c}));n(147),n(45),n(82),n(97),n(143),n(121),n(155);function r(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.join("/").replace(/\/{2,}/,"/")}function o(t,e){if(!t||!e)return t;for(;t.startsWith(e);)t=t.substring(e.length);return t}function i(t,e){var n=document.createElement("script");n.type="text/javascript",n.integrity=e,n.crossOrigin="anonymous",n.src=t,$("head").append(n)}function u(){var t,e,n;t="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css",e="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T",(n=document.createElement("link")).rel="stylesheet",n.href=t,n.integrity=e,n.crossOrigin="anonymous",$("head").append(n),i("https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js","sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"),i("https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js","sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM")}function c(t,e,n){var r;return function(){var o=this,i=arguments,u=function(){r=null,n||t.apply(o,i)},c=n&&!r;clearTimeout(r),r=setTimeout(u,e),c&&t.apply(o,i)}}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return this.substr(!e||e<0?0:+e,t.length)===t})},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(9),o=n(3),i=n(47);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(7),o=n(104),i=n(17),u=n(8);t.exports=function(t,e){for(var n=o(e),c=u.f,a=i.f,s=0;s<n.length;s++){var f=n[s];r(t,f)||c(t,f,a(e,f))}}},function(t,e,n){var r=n(1);t.exports=r},function(t,e,n){var r=n(7),o=n(11),i=n(118).indexOf,u=n(29);t.exports=function(t,e){var n,c=o(t),a=0,s=[];for(n in c)!r(u,n)&&r(c,n)&&s.push(n);for(;e.length>a;)r(c,n=e[a++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=c[u(t)];return n==s||n!=a&&("function"==typeof e?r(e):!!e)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},a=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(54);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(6),o=n(39),i=n(0)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(15);t.exports=r("document","documentElement")},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(57),o=n(20),i=n(0)("toStringTag"),u="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:u?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){"use strict";var r,o,i,u,c=n(4),a=n(19),s=n(1),f=n(15),l=n(128),p=n(14),h=n(129),v=n(33),d=n(130),y=n(6),g=n(16),_=n(131),m=n(49),b=n(132),x=n(94),w=n(95),S=n(83).set,O=n(133),E=n(135),j=n(136),k=n(85),P=n(137),T=n(24),A=n(76),R=n(0),L=n(30),C=n(36),I=R("species"),M="Promise",F=T.get,N=T.set,U=T.getterFor(M),D=l,G=s.TypeError,V=s.document,W=s.process,$=f("fetch"),B=k.f,H=B,Y=!!(V&&V.createEvent&&s.dispatchEvent),z="function"==typeof PromiseRejectionEvent,J=A(M,(function(){if(!(m(D)!==String(D))){if(66===C)return!0;if(!L&&!z)return!0}if(a&&!D.prototype.finally)return!0;if(C>=51&&/native code/.test(D))return!1;var t=D.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[I]=e,!(t.then((function(){}))instanceof e)})),K=J||!x((function(t){D.all(t).catch((function(){}))})),Q=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},q=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;O((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var u,c,a,s=n[i++],f=o?s.ok:s.fail,l=s.resolve,p=s.reject,h=s.domain;try{f?(o||(2===t.rejection&&et(t),t.rejection=1),!0===f?u=r:(h&&h.enter(),u=f(r),h&&(h.exit(),a=!0)),u===s.promise?p(G("Promise-chain cycle")):(c=Q(u))?c.call(u,l,p):l(u)):p(r)}catch(t){h&&!a&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&Z(t)}))}},X=function(t,e,n){var r,o;Y?((r=V.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},!z&&(o=s["on"+t])?o(r):"unhandledrejection"===t&&j("Unhandled promise rejection",n)},Z=function(t){S.call(s,(function(){var e,n=t.facade,r=t.value;if(tt(t)&&(e=P((function(){L?W.emit("unhandledRejection",r,n):X("unhandledrejection",n,r)})),t.rejection=L||tt(t)?2:1,e.error))throw e.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){S.call(s,(function(){var e=t.facade;L?W.emit("rejectionHandled",e):X("rejectionhandled",e,t.value)}))},nt=function(t,e,n){return function(r){t(e,r,n)}},rt=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,q(t,!0))},ot=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw G("Promise can't be resolved itself");var r=Q(e);r?O((function(){var n={done:!1};try{r.call(e,nt(ot,n,t),nt(rt,n,t))}catch(e){rt(n,e,t)}})):(t.value=e,t.state=1,q(t,!1))}catch(e){rt({done:!1},e,t)}}};J&&(D=function(t){_(this,D,M),g(t),r.call(this);var e=F(this);try{t(nt(ot,e),nt(rt,e))}catch(t){rt(e,t)}},(r=function(t){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(D.prototype,{then:function(t,e){var n=U(this),r=B(w(this,D));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=L?W.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&q(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=F(t);this.promise=t,this.resolve=nt(ot,e),this.reject=nt(rt,e)},k.f=B=function(t){return t===D||t===i?new o(t):H(t)},a||"function"!=typeof l||(u=l.prototype.then,p(l.prototype,"then",(function(t,e){var n=this;return new D((function(t,e){u.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof $&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return E(D,$.apply(s,arguments))}}))),c({global:!0,wrap:!0,forced:J},{Promise:D}),v(D,M,!1,!0),d(M),i=f(M),c({target:M,stat:!0,forced:J},{reject:function(t){var e=B(this);return e.reject.call(void 0,t),e.promise}}),c({target:M,stat:!0,forced:a||J},{resolve:function(t){return E(a&&this===i?D:this,t)}}),c({target:M,stat:!0,forced:K},{all:function(t){var e=this,n=B(e),r=n.resolve,o=n.reject,i=P((function(){var n=g(e.resolve),i=[],u=0,c=1;b(t,(function(t){var a=u++,s=!1;i.push(void 0),c++,n.call(e,t).then((function(t){s||(s=!0,i[a]=t,--c||r(i))}),o)})),--c||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=B(e),r=n.reject,o=P((function(){var o=g(e.resolve);b(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r,o,i,u=n(1),c=n(3),a=n(35),s=n(79),f=n(47),l=n(84),p=n(30),h=u.location,v=u.setImmediate,d=u.clearImmediate,y=u.process,g=u.MessageChannel,_=u.Dispatch,m=0,b={},x=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){x(t)}},S=function(t){x(t.data)},O=function(t){u.postMessage(t+"",h.protocol+"//"+h.host)};v&&d||(v=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return b[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(m),m},d=function(t){delete b[t]},p?r=function(t){y.nextTick(w(t))}:_&&_.now?r=function(t){_.now(w(t))}:g&&!l?(i=(o=new g).port2,o.port1.onmessage=S,r=a(i.postMessage,i,1)):u.addEventListener&&"function"==typeof postMessage&&!u.importScripts&&h&&"file:"!==h.protocol&&!c(O)?(r=O,u.addEventListener("message",S,!1)):r="onreadystatechange"in f("script")?function(t){s.appendChild(f("script")).onreadystatechange=function(){s.removeChild(this),x(t)}}:function(t){setTimeout(w(t),0)}),t.exports={set:v,clear:d}},function(t,e,n){var r=n(55);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){"use strict";var r=n(16),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){var r=n(0);e.f=r},function(t,e,n){var r=n(74),o=n(7),i=n(86),u=n(8).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||u(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(4),o=n(139),i=n(56),u=n(140),c=n(33),a=n(10),s=n(14),f=n(0),l=n(19),p=n(25),h=n(89),v=h.IteratorPrototype,d=h.BUGGY_SAFARI_ITERATORS,y=f("iterator"),g=function(){return this};t.exports=function(t,e,n,f,h,_,m){o(n,e,f);var b,x,w,S=function(t){if(t===h&&P)return P;if(!d&&t in j)return j[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},O=e+" Iterator",E=!1,j=t.prototype,k=j[y]||j["@@iterator"]||h&&j[h],P=!d&&k||S(h),T="Array"==e&&j.entries||k;if(T&&(b=i(T.call(new t)),v!==Object.prototype&&b.next&&(l||i(b)===v||(u?u(b,v):"function"!=typeof b[y]&&a(b,y,g)),c(b,O,!0,!0),l&&(p[O]=g))),"values"==h&&k&&"values"!==k.name&&(E=!0,P=function(){return k.call(this)}),l&&!m||j[y]===P||a(j,y,P),p[e]=P,h)if(x={values:S("values"),keys:_?P:S("keys"),entries:S("entries")},m)for(w in x)!d&&!E&&w in j||s(j,w,x[w]);else r({target:e,proto:!0,forced:d||E},x);return x}},function(t,e,n){"use strict";var r,o,i,u=n(3),c=n(56),a=n(10),s=n(7),f=n(0),l=n(19),p=f("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):h=!0);var v=null==r||u((function(){var t={};return r[p].call(t)!==t}));v&&(r={}),l&&!v||s(r,p)||a(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(t,e,n){var r=n(26),o=n(18),i=function(t){return function(e,n){var i,u,c=String(o(e)),a=r(n),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){var r=n(0),o=n(25),i=r("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,e,n){var r=n(81),o=n(25),i=n(0)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(5);t.exports=function(t){var e=t.return;if(void 0!==e)return r(e.call(t)).value}},function(t,e,n){var r=n(0)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[r]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r=n(5),o=n(16),i=n(0)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||null==(n=r(u)[i])?e:o(n)}},,function(t,e,n){"use strict";var r=n(4),o=n(63);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,n){var r=n(0),o=n(32),i=n(8),u=r("unscopables"),c=Array.prototype;null==c[u]&&i.f(c,u,{configurable:!0,value:o(null)}),t.exports=function(t){c[u][t]=!0}},function(t,e,n){var r=n(4),o=n(3),i=n(13),u=n(56),c=n(80);r({target:"Object",stat:!0,forced:o((function(){u(1)})),sham:!c},{getPrototypeOf:function(t){return u(i(t))}})},function(t,e,n){var r=n(4),o=n(15),i=n(16),u=n(5),c=n(6),a=n(32),s=n(126),f=n(3),l=o("Reflect","construct"),p=f((function(){function t(){}return!(l((function(){}),[],t)instanceof t)})),h=!f((function(){l((function(){}))})),v=p||h;r({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(t,e){i(t),u(e);var n=arguments.length<3?t:i(arguments[2]);if(h&&!p)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(s.apply(t,r))}var o=n.prototype,f=a(c(o)?o:Object.prototype),v=Function.apply.call(t,f,e);return c(v)?v:f}})},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e){t.exports=window.contentfulExtension},,function(t,e,n){var r=n(15),o=n(52),i=n(60),u=n(5);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(u(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(3);function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,n){"use strict";n(97);var r=n(14),o=n(3),i=n(0),u=n(10),c=i("species"),a=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),s="$0"==="a".replace(/./,"$0"),f=i("replace"),l=!!/./[f]&&""===/./[f]("a","$0"),p=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,f){var h=i(t),v=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),d=v&&!o((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[c]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return e=!0,null},n[h](""),!e}));if(!v||!d||"replace"===t&&(!a||!s||l)||"split"===t&&!p){var y=/./[h],g=n(h,""[t],(function(t,e,n,r,o){return e.exec===RegExp.prototype.exec?v&&!o?{done:!0,value:y.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:s,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:l}),_=g[0],m=g[1];r(String.prototype,t,_),r(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}f&&u(RegExp.prototype[h],"sham",!0)}},function(t,e,n){"use strict";var r=n(90).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r=n(20),o=n(63);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){var r=n(6),o=n(20),i=n(0)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},,,function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){var r=n(4),o=n(153);r({target:"Array",stat:!0,forced:!n(94)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(4),o=n(6),i=n(39),u=n(69),c=n(12),a=n(11),s=n(46),f=n(0),l=n(37)("slice"),p=f("species"),h=[].slice,v=Math.max;r({target:"Array",proto:!0,forced:!l},{slice:function(t,e){var n,r,f,l=a(this),d=c(l.length),y=u(t,d),g=u(void 0===e?d:e,d);if(i(l)&&("function"!=typeof(n=l.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return h.call(l,y,g);for(r=new(void 0===n?Array:n)(v(g-y,0)),f=0;y<g;y++,f++)y in l&&s(r,f,l[y]);return r.length=f,r}})},function(t,e,n){var r=n(9),o=n(8).f,i=Function.prototype,u=i.toString,c=/^\s*function ([^ (]*)/;!r||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return u.call(this).match(c)[1]}catch(t){return""}}})},,,function(t,e,n){var r=n(11),o=n(12),i=n(69),u=function(t){return function(e,n,u){var c,a=r(e),s=o(a.length),f=i(u,s);if(t&&n!=n){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,e,n){"use strict";var r=n(5);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(4),o=n(31).filter;r({target:"Array",proto:!0,forced:!n(37)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(4),o=n(38),i=n(11),u=n(112),c=[].join,a=o!=Object,s=u("join",",");r({target:"Array",proto:!0,forced:a||!s},{join:function(t){return c.call(i(this),void 0===t?",":t)}})},,function(t,e,n){var r=n(1),o=n(49),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){var r=n(9),o=n(8),i=n(5),u=n(44);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=u(e),c=r.length,a=0;c>a;)o.f(t,n=r[a++],e[n]);return t}},,function(t,e,n){"use strict";var r=n(16),o=n(6),i=[].slice,u={},c=function(t,e,n){if(!(e in u)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";u[e]=Function("C,a","return new C("+r.join(",")+")")}return u[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=i.call(arguments,1),u=function(){var r=n.concat(i.call(arguments));return this instanceof u?c(e,r.length,r):e.apply(t,r)};return o(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e,n){"use strict";var r=n(57),o=n(81);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(14);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(15),o=n(8),i=n(0),u=n(9),c=i("species");t.exports=function(t){var e=r(t),n=o.f;u&&e&&!e[c]&&n(e,c,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(5),o=n(91),i=n(12),u=n(35),c=n(92),a=n(93),s=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,l,p,h,v,d,y,g=n&&n.that,_=!(!n||!n.AS_ENTRIES),m=!(!n||!n.IS_ITERATOR),b=!(!n||!n.INTERRUPTED),x=u(e,g,1+_+b),w=function(t){return f&&a(f),new s(!0,t)},S=function(t){return _?(r(t),b?x(t[0],t[1],w):x(t[0],t[1])):b?x(t,w):x(t)};if(m)f=t;else{if("function"!=typeof(l=c(t)))throw TypeError("Target is not iterable");if(o(l)){for(p=0,h=i(t.length);h>p;p++)if((v=S(t[p]))&&v instanceof s)return v;return new s(!1)}f=l.call(t)}for(d=f.next;!(y=d.call(f)).done;){try{v=S(y.value)}catch(t){throw a(f),t}if("object"==typeof v&&v&&v instanceof s)return v}return new s(!1)}},function(t,e,n){var r,o,i,u,c,a,s,f,l=n(1),p=n(17).f,h=n(83).set,v=n(84),d=n(134),y=n(30),g=l.MutationObserver||l.WebKitMutationObserver,_=l.document,m=l.process,b=l.Promise,x=p(l,"queueMicrotask"),w=x&&x.value;w||(r=function(){var t,e;for(y&&(t=m.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?u():i=void 0,t}}i=void 0,t&&t.enter()},v||y||d||!g||!_?b&&b.resolve?(s=b.resolve(void 0),f=s.then,u=function(){f.call(s,r)}):u=y?function(){m.nextTick(r)}:function(){h.call(l,r)}:(c=!0,a=_.createTextNode(""),new g(r).observe(a,{characterData:!0}),u=function(){a.data=c=!c})),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,u()),i=e}},function(t,e,n){var r=n(55);t.exports=/web0s(?!.*chrome)/i.test(r)},function(t,e,n){var r=n(5),o=n(6),i=n(85);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(1);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(11),o=n(52).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(89).IteratorPrototype,o=n(32),i=n(23),u=n(33),c=n(25),a=function(){return this};t.exports=function(t,e,n){var s=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),u(t,s,!1,!0),c[s]=a,t}},function(t,e,n){var r=n(5),o=n(141);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(t){a=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),u=new P(r||[]);return i._invoke=function(t,e,n){var r=l;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var c=E(u,n);if(c){if(c===d)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var a=f(t,e,n);if("normal"===a.type){if(r=n.done?v:p,a.arg===d)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r=v,n.method="throw",n.arg=a.arg)}}}(t,n,u),i}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",p="suspendedYield",h="executing",v="completed",d={};function y(){}function g(){}function _(){}var m={};m[i]=function(){return this};var b=Object.getPrototypeOf,x=b&&b(b(T([])));x&&x!==n&&r.call(x,i)&&(m=x);var w=_.prototype=y.prototype=Object.create(m);function S(t){["next","throw","return"].forEach((function(e){a(t,e,(function(t){return this._invoke(e,t)}))}))}function O(t,e){var n;this._invoke=function(o,i){function u(){return new e((function(n,u){!function n(o,i,u,c){var a=f(t[o],t,i);if("throw"!==a.type){var s=a.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,u,c)}),(function(t){n("throw",t,u,c)})):e.resolve(l).then((function(t){s.value=t,u(s)}),(function(t){return n("throw",t,u,c)}))}c(a.arg)}(o,i,n,u)}))}return n=n?n.then(u,u):u()}}function E(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,E(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=f(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,d;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,d):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function T(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return u.next=u}}return{next:A}}function A(){return{value:e,done:!0}}return g.prototype=w.constructor=_,_.constructor=g,g.displayName=a(_,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,_):(t.__proto__=_,a(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},S(O.prototype),O.prototype[u]=function(){return this},t.AsyncIterator=O,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var u=new O(s(e,n,r,o),i);return t.isGeneratorFunction(n)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},S(w),a(w,c,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=T,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(k),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),k(n),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";var r=n(106),o=n(5),i=n(12),u=n(26),c=n(18),a=n(107),s=n(151),f=n(108),l=Math.max,p=Math.min;r("replace",2,(function(t,e,n,r){var h=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,v=r.REPLACE_KEEPS_$0,d=h?"$":"$0";return[function(n,r){var o=c(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):e.call(String(o),n,r)},function(t,r){if(!h&&v||"string"==typeof r&&-1===r.indexOf(d)){var c=n(e,t,this,r);if(c.done)return c.value}var y=o(t),g=String(this),_="function"==typeof r;_||(r=String(r));var m=y.global;if(m){var b=y.unicode;y.lastIndex=0}for(var x=[];;){var w=f(y,g);if(null===w)break;if(x.push(w),!m)break;""===String(w[0])&&(y.lastIndex=a(g,i(y.lastIndex),b))}for(var S,O="",E=0,j=0;j<x.length;j++){w=x[j];for(var k=String(w[0]),P=l(p(u(w.index),g.length),0),T=[],A=1;A<w.length;A++)T.push(void 0===(S=w[A])?S:String(S));var R=w.groups;if(_){var L=[k].concat(T,P,g);void 0!==R&&L.push(R);var C=String(r.apply(void 0,L))}else C=s(k,g,P,T,R,r);P>=E&&(O+=g.slice(E,P)+C,E=P+k.length)}return O+g.slice(E)}]}))},function(t,e,n){var r=n(109);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,n){var r=n(0)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},,function(t,e,n){"use strict";var r,o=n(4),i=n(17).f,u=n(12),c=n(144),a=n(18),s=n(145),f=n(19),l="".startsWith,p=Math.min,h=s("startsWith");o({target:"String",proto:!0,forced:!!(f||h||(r=i(String.prototype,"startsWith"),!r||r.writable))&&!h},{startsWith:function(t){var e=String(a(this));c(t);var n=u(p(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return l?l.call(e,r,n):e.slice(n,n+r.length)===r}})},,,,function(t,e,n){var r=n(13),o=Math.floor,i="".replace,u=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,n,a,s,f){var l=n+t.length,p=a.length,h=c;return void 0!==s&&(s=r(s),h=u),i.call(f,h,(function(r,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(l);case"<":u=s[i.slice(1,-1)];break;default:var c=+i;if(0===c)return r;if(c>p){var f=o(c/10);return 0===f?r:f<=p?void 0===a[f-1]?i.charAt(1):a[f-1]+i.charAt(1):r}u=a[c-1]}return void 0===u?"":u}))}},function(t,e,n){"use strict";var r=n(4),o=n(31).map;r({target:"Array",proto:!0,forced:!n(37)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(35),o=n(13),i=n(154),u=n(91),c=n(12),a=n(46),s=n(92);t.exports=function(t){var e,n,f,l,p,h,v=o(t),d="function"==typeof this?this:Array,y=arguments.length,g=y>1?arguments[1]:void 0,_=void 0!==g,m=s(v),b=0;if(_&&(g=r(g,y>2?arguments[2]:void 0,2)),null==m||d==Array&&u(m))for(n=new d(e=c(v.length));e>b;b++)h=_?g(v[b],b):v[b],a(n,b,h);else for(p=(l=m.call(v)).next,n=new d;!(f=p.call(l)).done;b++)h=_?i(l,g,[f.value,b],!0):f.value,a(n,b,h);return n.length=b,n}},function(t,e,n){var r=n(5),o=n(93);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){throw o(t),e}}},function(t,e,n){"use strict";var r=n(106),o=n(109),i=n(5),u=n(18),c=n(95),a=n(107),s=n(12),f=n(108),l=n(63),p=n(105).UNSUPPORTED_Y,h=[].push,v=Math.min;r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(u(this)),i=void 0===n?4294967295:n>>>0;if(0===i)return[];if(void 0===t)return[r];if(!o(t))return e.call(r,t,i);for(var c,a,s,f=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,d=new RegExp(t.source,p+"g");(c=l.call(d,r))&&!((a=d.lastIndex)>v&&(f.push(r.slice(v,c.index)),c.length>1&&c.index<r.length&&h.apply(f,c.slice(1)),s=c[0].length,v=a,f.length>=i));)d.lastIndex===c.index&&d.lastIndex++;return v===r.length?!s&&d.test("")||f.push(""):f.push(r.slice(v)),f.length>i?f.slice(0,i):f}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var o=u(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,n):r.call(String(o),e,n)},function(t,o){var u=n(r,t,this,o,r!==e);if(u.done)return u.value;var l=i(t),h=String(this),d=c(l,RegExp),y=l.unicode,g=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(p?"g":"y"),_=new d(p?"^(?:"+l.source+")":l,g),m=void 0===o?4294967295:o>>>0;if(0===m)return[];if(0===h.length)return null===f(_,h)?[h]:[];for(var b=0,x=0,w=[];x<h.length;){_.lastIndex=p?0:x;var S,O=f(_,p?h.slice(x):h);if(null===O||(S=v(s(_.lastIndex+(p?x:0)),h.length))===b)x=a(h,x,y);else{if(w.push(h.slice(b,x)),w.length===m)return w;for(var E=1;E<=O.length-1;E++)if(w.push(O[E]),w.length===m)return w;x=b=S}}return w.push(h.slice(b)),w}]}),p)},,,,,,,,,,function(t,e,n){"use strict";var r=n(4),o=n(3),i=n(39),u=n(6),c=n(13),a=n(12),s=n(46),f=n(78),l=n(37),p=n(0),h=n(36),v=p("isConcatSpreadable"),d=h>=51||!o((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),y=l("concat"),g=function(t){if(!u(t))return!1;var e=t[v];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!d||!y},{concat:function(t){var e,n,r,o,i,u=c(this),l=f(u,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(i=-1===e?u:arguments[e],g(i)){if(p+(o=a(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&s(l,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(l,p++,i)}return l.length=p,l}})},,,,,,,,,,,,function(t,e,n){"use strict";var r=n(14),o=n(5),i=n(3),u=n(119),c=RegExp.prototype,a=c.toString,s=i((function(){return"/a/b"!=a.call({source:"a",flags:"b"})})),f="toString"!=a.name;(s||f)&&r(RegExp.prototype,"toString",(function(){var t=o(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in c)?u.call(t):n)}),{unsafe:!0})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return f}));n(99),n(100),n(64),n(65),n(45),n(66),n(42),n(67),n(68);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=s(t);if(e){var o=s(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?a(t):e}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var f=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(f,e);var n,r,c,s=u(f);function f(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,f),(t=s.call(this)).onFocusGained=t.onFocusGained.bind(a(t)),t.onFocusLost=t.onFocusLost.bind(a(t)),t.demandFocus=t.demandFocus.bind(a(t)),t}return n=f,(r=[{key:"componentDidMount",value:function(){this.setState({value:this.props.slug})}},{key:"render",value:function(){var e=this.props.parentSlug,n=this.props.slug;return this.state&&this.state.value&&this.state.value.length>0&&(n=this.state.value),t("div",{id:"slugForm",class:"cf-form-input",onClick:this.demandFocus},e&&t("span",{id:"parent","data-testid":"parent",title:"This comes from the parent page and you can't change it here."},e,"/"),t("span",{id:"slug","data-testid":"slug",contentEditable:!0,onFocus:this.onFocusGained,onBlur:this.onFocusLost},n))}},{key:"demandFocus",value:function(){$("#slugForm #slug").focus()}},{key:"onFocusLost",value:function(t){var e=t.target.textContent,n=this.state.value;e!=n&&(this.setState({value:e}),this.props.onChange.call(this,{oldValue:n,newValue:e}))}},{key:"onFocusGained",value:function(t){console.log("focusGained",t)}}])&&o(n.prototype,r),c&&o(n,c),f}(n(2).Component)}).call(this,n(2).h)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"SlugEditor",(function(){return _}));n(45),n(177),n(152),n(121),n(120),n(147),n(165),n(99),n(100),n(82),n(64),n(65),n(66),n(42),n(67),n(68),n(113),n(114),n(115),n(142);var r=n(102),o=n(2),i=n(70),u=n(239);function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function f(t,e,n,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void n(t)}c.done?e(a):Promise.resolve(a).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function u(t){f(i,r,o,u,c,"next",t)}function c(t){f(i,r,o,u,c,"throw",t)}u(void 0)}))}}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function v(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=g(t);if(e){var o=g(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(t,e){return!e||"object"!==c(e)&&"function"!=typeof e?y(t):e}function y(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n(352);r&&r.init((function(e){Object(o.render)(t(_,e),document.getElementById("react-root"))}));var _=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(_,e);var n,r,o,c,s,f,d,g=v(_);function _(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,_),(t=g.call(this)).onSlugChange=t.onSlugChange.bind(y(t)),t}return n=_,(r=[{key:"componentDidMount",value:function(){var t=this;this.setState({fieldValue:this.props.field.getValue(),errors:[]}),this.props.field.onValueChanged(function(){var e=l(regeneratorRuntime.mark((function e(n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.setState({fieldValue:n});case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),this.onMount().catch((function(e){console.error("Error querying!",e),t.setState({errors:[e.toString()]})}))}},{key:"render",value:function(){var e=this.state,n=e.fieldValue,r=e.parentSlug,o=e.errors,i=e.warnings;return t("div",null,t(u.a,{slug:n,parentSlug:r,onChange:this.onSlugChange}),o&&t("div",{className:"errors"},o.map((function(e){return t("div",{className:"error"},e)}))),i&&t("div",{className:"warnings"},i.map((function(e){return t("div",{className:"error",dangerouslySetInnerHTML:{__html:e}})}))))}},{key:"onSlugChange",value:(d=l(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=Object(i.c)(this.state.parentSlug,e.newValue),this.setState({fieldValue:e.newValue}),t.next=4,this.validateNewSlug(e.newValue);case 4:if(!t.sent){t.next=7;break}return t.next=7,this.props.field.setValue(n);case 7:case"end":return t.stop()}}),t,this)}))),function(t){return d.apply(this,arguments)})},{key:"validateNewSlug",value:(f=l(regeneratorRuntime.mark((function t(e){var n,r,o,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=[],r=[],e&&0!=e.length?/\s/.test(e)&&n.push("The slug must not contain whitespace!"):n.push("The slug cannot be empty!"),!(o=this.props.entry.fields).subpages){t.next=15;break}if(!((i=o.subpages.getValue())&&i.length>0)){t.next=15;break}return t.t0=r.push,t.t1=r,t.t2=a,t.next=12,this.checkSubpages(i);case 12:t.t3=t.sent,t.t4=(0,t.t2)(t.t3),t.t0.apply.call(t.t0,t.t1,t.t4);case 15:if(this.setState({errors:n,warnings:r}),!(n.length>0)){t.next=21;break}return this.props.field.setInvalid(!0),t.abrupt("return",!1);case 21:return this.props.field.setInvalid(!1),t.abrupt("return",!0);case 23:case"end":return t.stop()}}),t,this)}))),function(t){return f.apply(this,arguments)})},{key:"checkSubpages",value:(s=l(regeneratorRuntime.mark((function t(e){var n,r,o,u,c,a,s;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.state,r=n.parentSlug,o=n.fieldValue,u=this.props.entry.getSys(),c=u.space,t.next=4,this.props.space.getEntries({content_type:"page","sys.id[in]":e.map((function(t){return t.sys.id})).join(",")});case 4:if(a=t.sent,0!=(s=a.items.filter((function(t){return t})).map((function(t){if(!(t&&t.fields&&t.fields.slug&&t.fields.slug["en-US"]))return null;var e=t.fields.slug["en-US"];if(e.startsWith(Object(i.c)(r,o)))return console.log("subpage ".concat(e," is good")),null;console.log("bad page",o,t.fields);var n=t.fields.title&&t.fields.title["en-US"];return'<a href="https://app.contentful.com/spaces/'.concat(c.sys.id)+"/entries/".concat(t.sys.id,'" target="_blank">').concat(n||t.sys.id,"</a> ")+"(".concat(e,")")})).filter((function(t){return t}))).length){t.next=8;break}return t.abrupt("return",s);case 8:return t.abrupt("return",["Be sure to update these subpages! Their slugs are wrong:<br/>  "+s.join(",<br/>")]);case 9:case"end":return t.stop()}}),t,this)}))),function(t){return s.apply(this,arguments)})},{key:"onMount",value:(c=l(regeneratorRuntime.mark((function t(){var e,n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.props.space.getEntries({content_type:"page","fields.subpages.sys.id":this.props.entry.getSys().id});case 2:if(!((e=t.sent).items.length<=0)){t.next=5;break}return t.abrupt("return");case 5:return n=e.items[0].fields.slug["en-US"],r=this.state.fieldValue,r=Object(i.d)(r,n),r=Object(i.d)(r,"/"),this.setState({parentSlug:n,fieldValue:r}),t.next=12,this.validateNewSlug(r);case 12:case"end":return t.stop()}}),t,this)}))),function(){return c.apply(this,arguments)})}])&&p(n.prototype,r),o&&p(n,o),_}(o.Component)}.call(this,n(2).h)},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi91dGlscy50cyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1jbG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmNvbnRlbnRmdWxFeHRlbnNpb25cIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9zbHVnLWVkaXRvci9zbHVnLWZvcm0udHN4Iiwid2VicGFjazovLy8uL3NyYy9zbHVnLWVkaXRvci9pbmRleC50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJzaGFyZWQiLCJoYXMiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiaXQiLCJNYXRoIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsInRoaXMiLCJGdW5jdGlvbiIsInUiLCJmIiwiZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwdXNoIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJ2IiwidHlwZSIsInByb3BzIiwicmVmIiwiX19rIiwiX18iLCJfX2IiLCJfX2UiLCJfX2QiLCJfX2MiLCJfX2giLCJjb25zdHJ1Y3RvciIsIl9fdiIsInZub2RlIiwiaCIsImN1cnJlbnQiLCJ5IiwiY29udGV4dCIsImluZGV4T2YiLCJfIiwiYmFzZSIsImsiLCJiIiwiX19yIiwiZGVib3VuY2VSZW5kZXJpbmciLCJzb3J0Iiwic29tZSIsIl9fUCIsIkkiLCJfX24iLCJvd25lclNWR0VsZW1lbnQiLCJUIiwidyIsIkEiLCJQIiwiQXJyYXkiLCJpc0FycmF5IiwiZyIsIngiLCJMIiwieiIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJzZXRQcm9wZXJ0eSIsInRlc3QiLCJDIiwic3R5bGUiLCJjc3NUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiSCIsIiQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJjb250ZXh0VHlwZSIsIl9fRSIsInJlbmRlciIsIk0iLCJzdWIiLCJzdGF0ZSIsIl9fcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvckVhY2giLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJqIiwiZGlmZmVkIiwibG9jYWxOYW1lIiwibm9kZVR5cGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsImlzIiwiZGF0YSIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJfX2h0bWwiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY2hlY2tlZCIsInVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIk4iLCJPIiwiUyIsInEiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwic3BsaWNlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsInRoZW4iLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImV4ZWMiLCJlcnJvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiREVTQ1JJUFRPUlMiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCIkZGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwiZmFpbHMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJpbnNwZWN0U291cmNlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInNwbGl0IiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvU3RyaW5nIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsInN0b3JlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImlucHV0IiwiUFJFRkVSUkVEX1NUUklORyIsImZuIiwidmFsIiwidmFsdWVPZiIsImtleXMiLCJjbGFzc29mIiwicHJvY2VzcyIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJjcmVhdGVNZXRob2QiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX09VVCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwicmVzdWx0IiwiYm91bmRGdW5jdGlvbiIsImluZGV4IiwibWFwIiwiZmlsdGVyIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyT3V0IiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCJQcm9wZXJ0aWVzIiwiVE9fU1RSSU5HX1RBRyIsIndlbGxLbm93blN5bWJvbCIsIlRBRyIsIklTX1BVUkUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwiYXBwbHkiLCJtYXRjaCIsInVzZXJBZ2VudCIsInZlcnNpb25zIiwidjgiLCJWOF9WRVJTSU9OIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhcmciLCJhZGRUb1Vuc2NvcGFibGVzIiwiSXRlcmF0b3JzIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiZG9uZSIsIkFyZ3VtZW50cyIsImludGVybmFsT2JqZWN0S2V5cyIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsInByb3BlcnR5S2V5IiwiRVhJU1RTIiwiZnVuY3Rpb25Ub1N0cmluZyIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImNvbmNhdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJJU19OT0RFIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0QnVpbHRJbiIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIm5hdGl2ZUV4ZWMiLCJSZWdFeHAiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInN0ciIsInJlQ29weSIsInJlIiwic3RpY2t5IiwiZmxhZ3MiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsInNldFRvU3RyaW5nVGFnIiwiJGZvckVhY2giLCJISURERU4iLCJUT19QUklNSVRJVkUiLCIkU3ltYm9sIiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJ3cmFwIiwidGFnIiwiZGVzY3JpcHRpb24iLCJzeW1ib2wiLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIm5hbWVzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsInNldHRlciIsInN0cmluZyIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInN0cmluZ2lmeSIsInJlcGxhY2VyIiwic3BhY2UiLCIkcmVwbGFjZXIiLCJhcmdzIiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFByb3RvdHlwZSIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwicmVnZXhwIiwiZGVzYyIsImNoYXJBdCIsInBvaW50IiwiRE9NSXRlcmFibGVzIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJJVEVSQVRPUiIsIkFycmF5VmFsdWVzIiwidmFsdWVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJtYXgiLCJpbnRlZ2VyIiwicGF0aEpvaW4iLCJwYXRoQXJyIiwidHJpbVN0YXJ0IiwidG9UcmltIiwidmFsdWVUb1JlbW92ZSIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJpbmplY3RTY3JpcHQiLCJpbnRlZ3JpdHkiLCJjcm9zc09yaWdpbiIsImFwcGVuZCIsImluamVjdEJvb3RzdHJhcCIsImhyZWYiLCJyZWwiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImxhdGVyIiwiY2FsbE5vdyIsImNsZWFyVGltZW91dCIsInNlYXJjaCIsInBvcyIsInN1YnN0ciIsIm93bktleXMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsIml0ZXJhdG9yIiwib3JpZ2luYWxBcnJheSIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwicmVkZWZpbmVBbGwiLCJzZXRTcGVjaWVzIiwiYW5JbnN0YW5jZSIsIml0ZXJhdGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJESVNQQVRDSF9FVkVOVCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIk5BVElWRV9SRUpFQ1RJT05fRVZFTlQiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJGT1JDRUQiLCJwcm9taXNlIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXRlcmFibGUiLCJhbGwiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0IiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsInJlYXNvbiIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInBhcmVudCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZmV0Y2giLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwiY291bnRlciIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsIklTX0lPUyIsImxvY2F0aW9uIiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJOQU1FIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiSXRlcmF0b3JzQ29yZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInByb3RvIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCJDT05WRVJUX1RPX1NUUklORyIsImZpcnN0Iiwic2Vjb25kIiwicG9zaXRpb24iLCJzaXplIiwiY2hhckNvZGVBdCIsImNvZGVBdCIsIkFycmF5UHJvdG90eXBlIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiVU5TQ09QQUJMRVMiLCJuYXRpdmVHZXRQcm90b3R5cGVPZiIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJjb25zdHJ1Y3QiLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsImluc3RhbmNlIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb250ZW50ZnVsRXh0ZW5zaW9uIiwiUkUiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsImdyb3VwcyIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRVBMQUNFIiwiUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJ1bmljb2RlIiwicmVnZXhwRXhlYyIsIlIiLCJNQVRDSCIsImlzUmVnRXhwIiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlUHJvcGVydHkiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIm5hdGl2ZVNsaWNlIiwic3RhcnQiLCJlbmQiLCJDb25zdHJ1Y3RvciIsImZpbiIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCIkZmlsdGVyIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsIm5hdGl2ZUpvaW4iLCJFUzNfU1RSSU5HUyIsIlNUUklDVF9NRVRIT0QiLCJzZXBhcmF0b3IiLCJmYWN0b3JpZXMiLCJhcmdzTGVuZ3RoIiwibGlzdCIsInBhcnRBcmdzIiwiQ09OU1RSVUNUT1JfTkFNRSIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiaXRlcmF0b3JDbG9zZSIsIlJlc3VsdCIsInN0b3BwZWQiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJzdGVwIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwiZmx1c2giLCJoZWFkIiwibGFzdCIsInRvZ2dsZSIsIm5vZGUiLCJtYWNyb3Rhc2siLCJJU19XRUJPU19XRUJLSVQiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImNvbnNvbGUiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJkZWZpbmUiLCJvYmoiLCJlcnIiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJnZXRTdWJzdGl0dXRpb24iLCJyZWdFeHBFeGVjIiwibWF5YmVDYWxsTmF0aXZlIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlcyIsInJ4IiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJlcnJvcjEiLCJlcnJvcjIiLCJub3RBUmVnRXhwIiwiY29ycmVjdElzUmVnRXhwTG9naWMiLCIkc3RhcnRzV2l0aCIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoU3RyaW5nIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwiJG1hcCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJhcnJheUxpa2UiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJFTlRSSUVTIiwiY2FsbFJlZ0V4cEV4ZWMiLCJhcnJheVB1c2giLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwibGVuIiwiRSIsIlJlZ0V4cFByb3RvdHlwZSIsIm5hdGl2ZVRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInJmIiwiU2x1Z0Zvcm0iLCJvbkZvY3VzR2FpbmVkIiwib25Gb2N1c0xvc3QiLCJkZW1hbmRGb2N1cyIsInNsdWciLCJwYXJlbnRTbHVnIiwiY2xhc3MiLCJvbkNsaWNrIiwiZGF0YS10ZXN0aWQiLCJ0aXRsZSIsImNvbnRlbnRFZGl0YWJsZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJmb2N1cyIsImV2dCIsIm5ld1RleHQiLCJ0ZXh0Q29udGVudCIsIm9sZFZhbHVlIiwib25DaGFuZ2UiLCJuZXdWYWx1ZSIsImxvZyIsIkNvbXBvbmVudCIsInJlcXVpcmUiLCJleHRlbnNpb24iLCJTbHVnRWRpdG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJvblNsdWdDaGFuZ2UiLCJmaWVsZFZhbHVlIiwiZmllbGQiLCJnZXRWYWx1ZSIsImVycm9ycyIsIm9uVmFsdWVDaGFuZ2VkIiwib25Nb3VudCIsImNhdGNoIiwid2FybmluZ3MiLCJjbGFzc05hbWUiLCJ2YWxpZGF0ZU5ld1NsdWciLCJzZXRWYWx1ZSIsImZpZWxkcyIsInN1YnBhZ2VzIiwiY2hlY2tTdWJwYWdlcyIsInNldEludmFsaWQiLCJnZXRTeXMiLCJnZXRFbnRyaWVzIiwibGluayIsInN5cyIsIml0ZW1zIiwicGFnZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFB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bG1CLEdBRHpELG9CQUVEeWpCLEVBRkMsUUFHTnhuQixRQUFPLFNBQUN4TCxHQUFELE9BQU9BLE1BRUpwQyxPQTNCZix5Q0E0QldrM0IsR0E1QlgsZ0NBK0JTLENBQ0wsa0VBQ0FBLEVBQVNodEIsS0FBSyxZQWpDbEIsZ0RBNUZGLGlHQWlJRSx1SEFFd0IzSyxLQUFLZSxNQUFNdVcsTUFBTThnQixXQUFXLENBQ2hELGFBQWdCLE9BQ2hCLHlCQUEyQnA0QixLQUFLZSxNQUFNcXVCLE1BQU0rSSxTQUFpQi9sQixLQUpqRSxhQUVRc1EsRUFGUixRQU9jNlYsTUFBTTkzQixRQUFVLEdBUDlCLHdEQVdRcTFCLEVBQWNwVCxFQUFRNlYsTUFBTSxHQUFnQlIsT0FBT2xDLEtBQUssU0FDMUR1QixFQUFhcDNCLEtBQUs2RSxNQUFNdXlCLFdBQzVCQSxFQUFhcmUsWUFBVXFlLEVBQVl0QixHQUNuQ3NCLEVBQWFyZSxZQUFVcWUsRUFBWSxLQUVuQ3AzQixLQUFLb0gsU0FBUyxDQUNaMHVCLGFBQ0FzQixlQWxCSixVQXFCUXAzQixLQUFLNjNCLGdCQUFnQlQsR0FyQjdCLGlEQWpJRixnRCwyQkFBQSxHQUFnQ04sYyIsImZpbGUiOiJkaXN0L3NsdWctZWRpdG9yL2luZGV4LTRiNTEzNjlkMjVjMzMzYmQ0ZTI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIuLi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM1MSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgbixsLHUsaSx0LG8scj17fSxmPVtdLGU9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtmdW5jdGlvbiBjKG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIHMobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24gYShuLGwsdSl7dmFyIGksdCxvLHI9YXJndW1lbnRzLGY9e307Zm9yKG8gaW4gbClcImtleVwiPT1vP2k9bFtvXTpcInJlZlwiPT1vP3Q9bFtvXTpmW29dPWxbb107aWYoYXJndW1lbnRzLmxlbmd0aD4zKWZvcih1PVt1XSxvPTM7bzxhcmd1bWVudHMubGVuZ3RoO28rKyl1LnB1c2gocltvXSk7aWYobnVsbCE9dSYmKGYuY2hpbGRyZW49dSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmbnVsbCE9bi5kZWZhdWx0UHJvcHMpZm9yKG8gaW4gbi5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltvXSYmKGZbb109bi5kZWZhdWx0UHJvcHNbb10pO3JldHVybiB2KG4sZixpLHQsbnVsbCl9ZnVuY3Rpb24gdihsLHUsaSx0LG8pe3ZhciByPXt0eXBlOmwscHJvcHM6dSxrZXk6aSxyZWY6dCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1vPysrbi5fX3Y6b307cmV0dXJuIG51bGwhPW4udm5vZGUmJm4udm5vZGUocikscn1mdW5jdGlvbiBoKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19ZnVuY3Rpb24geShuKXtyZXR1cm4gbi5jaGlsZHJlbn1mdW5jdGlvbiBwKG4sbCl7dGhpcy5wcm9wcz1uLHRoaXMuY29udGV4dD1sfWZ1bmN0aW9uIGQobixsKXtpZihudWxsPT1sKXJldHVybiBuLl9fP2Qobi5fXyxuLl9fLl9fay5pbmRleE9mKG4pKzEpOm51bGw7Zm9yKHZhciB1O2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXJldHVybiB1Ll9fZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/ZChuKTpudWxsfWZ1bmN0aW9uIF8obil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiBfKG4pfX1mdW5jdGlvbiBrKGwpeyghbC5fX2QmJihsLl9fZD0hMCkmJnUucHVzaChsKSYmIWIuX19yKyt8fHQhPT1uLmRlYm91bmNlUmVuZGVyaW5nKSYmKCh0PW4uZGVib3VuY2VSZW5kZXJpbmcpfHxpKShiKX1mdW5jdGlvbiBiKCl7Zm9yKHZhciBuO2IuX19yPXUubGVuZ3RoOyluPXUuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSksdT1bXSxuLnNvbWUoZnVuY3Rpb24obil7dmFyIGwsdSxpLHQsbyxyO24uX19kJiYobz0odD0obD1uKS5fX3YpLl9fZSwocj1sLl9fUCkmJih1PVtdLChpPWMoe30sdCkpLl9fdj10Ll9fdisxLEkocix0LGksbC5fX24sdm9pZCAwIT09ci5vd25lclNWR0VsZW1lbnQsbnVsbCE9dC5fX2g/W29dOm51bGwsdSxudWxsPT1vP2QodCk6byx0Ll9faCksVCh1LHQpLHQuX19lIT1vJiZfKHQpKSl9KX1mdW5jdGlvbiBtKG4sbCx1LGksdCxvLGUsYyxzLGEpe3ZhciBoLHAsXyxrLGIsbSx3LEE9aSYmaS5fX2t8fGYsUD1BLmxlbmd0aDtmb3IodS5fX2s9W10saD0wO2g8bC5sZW5ndGg7aCsrKWlmKG51bGwhPShrPXUuX19rW2hdPW51bGw9PShrPWxbaF0pfHxcImJvb2xlYW5cIj09dHlwZW9mIGs/bnVsbDpcInN0cmluZ1wiPT10eXBlb2Yga3x8XCJudW1iZXJcIj09dHlwZW9mIGt8fFwiYmlnaW50XCI9PXR5cGVvZiBrP3YobnVsbCxrLG51bGwsbnVsbCxrKTpBcnJheS5pc0FycmF5KGspP3YoeSx7Y2hpbGRyZW46a30sbnVsbCxudWxsLG51bGwpOmsuX19iPjA/dihrLnR5cGUsay5wcm9wcyxrLmtleSxudWxsLGsuX192KTprKSl7aWYoay5fXz11LGsuX19iPXUuX19iKzEsbnVsbD09PShfPUFbaF0pfHxfJiZrLmtleT09Xy5rZXkmJmsudHlwZT09PV8udHlwZSlBW2hdPXZvaWQgMDtlbHNlIGZvcihwPTA7cDxQO3ArKyl7aWYoKF89QVtwXSkmJmsua2V5PT1fLmtleSYmay50eXBlPT09Xy50eXBlKXtBW3BdPXZvaWQgMDticmVha31fPW51bGx9SShuLGssXz1ffHxyLHQsbyxlLGMscyxhKSxiPWsuX19lLChwPWsucmVmKSYmXy5yZWYhPXAmJih3fHwodz1bXSksXy5yZWYmJncucHVzaChfLnJlZixudWxsLGspLHcucHVzaChwLGsuX19jfHxiLGspKSxudWxsIT1iPyhudWxsPT1tJiYobT1iKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBrLnR5cGUmJm51bGwhPWsuX19rJiZrLl9faz09PV8uX19rP2suX19kPXM9ZyhrLHMsbik6cz14KG4sayxfLEEsYixzKSxhfHxcIm9wdGlvblwiIT09dS50eXBlP1wiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmKHUuX19kPXMpOm4udmFsdWU9XCJcIik6cyYmXy5fX2U9PXMmJnMucGFyZW50Tm9kZSE9biYmKHM9ZChfKSl9Zm9yKHUuX19lPW0saD1QO2gtLTspbnVsbCE9QVtoXSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmbnVsbCE9QVtoXS5fX2UmJkFbaF0uX19lPT11Ll9fZCYmKHUuX19kPWQoaSxoKzEpKSxMKEFbaF0sQVtoXSkpO2lmKHcpZm9yKGg9MDtoPHcubGVuZ3RoO2grKyl6KHdbaF0sd1srK2hdLHdbKytoXSl9ZnVuY3Rpb24gZyhuLGwsdSl7dmFyIGksdDtmb3IoaT0wO2k8bi5fX2subGVuZ3RoO2krKykodD1uLl9fa1tpXSkmJih0Ll9fPW4sbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnR5cGU/Zyh0LGwsdSk6eCh1LHQsdCxuLl9fayx0Ll9fZSxsKSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KEFycmF5LmlzQXJyYXkobik/bi5zb21lKGZ1bmN0aW9uKG4pe3cobixsKX0pOmwucHVzaChuKSksbH1mdW5jdGlvbiB4KG4sbCx1LGksdCxvKXt2YXIgcixmLGU7aWYodm9pZCAwIT09bC5fX2Qpcj1sLl9fZCxsLl9fZD12b2lkIDA7ZWxzZSBpZihudWxsPT11fHx0IT1vfHxudWxsPT10LnBhcmVudE5vZGUpbjppZihudWxsPT1vfHxvLnBhcmVudE5vZGUhPT1uKW4uYXBwZW5kQ2hpbGQodCkscj1udWxsO2Vsc2V7Zm9yKGY9byxlPTA7KGY9Zi5uZXh0U2libGluZykmJmU8aS5sZW5ndGg7ZSs9MilpZihmPT10KWJyZWFrIG47bi5pbnNlcnRCZWZvcmUodCxvKSxyPW99cmV0dXJuIHZvaWQgMCE9PXI/cjp0Lm5leHRTaWJsaW5nfWZ1bmN0aW9uIEEobixsLHUsaSx0KXt2YXIgbztmb3IobyBpbiB1KVwiY2hpbGRyZW5cIj09PW98fFwia2V5XCI9PT1vfHxvIGluIGx8fEMobixvLG51bGwsdVtvXSxpKTtmb3IobyBpbiBsKXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGxbb118fFwiY2hpbGRyZW5cIj09PW98fFwia2V5XCI9PT1vfHxcInZhbHVlXCI9PT1vfHxcImNoZWNrZWRcIj09PW98fHVbb109PT1sW29dfHxDKG4sbyxsW29dLHVbb10saSl9ZnVuY3Rpb24gUChuLGwsdSl7XCItXCI9PT1sWzBdP24uc2V0UHJvcGVydHkobCx1KTpuW2xdPW51bGw9PXU/XCJcIjpcIm51bWJlclwiIT10eXBlb2YgdXx8ZS50ZXN0KGwpP3U6dStcInB4XCJ9ZnVuY3Rpb24gQyhuLGwsdSxpLHQpe3ZhciBvO246aWYoXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNle2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobi5zdHlsZS5jc3NUZXh0PWk9XCJcIiksaSlmb3IobCBpbiBpKXUmJmwgaW4gdXx8UChuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KWkmJnVbbF09PT1pW2xdfHxQKG4uc3R5bGUsbCx1W2xdKX1lbHNlIGlmKFwib1wiPT09bFswXSYmXCJuXCI9PT1sWzFdKW89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSxsPWwudG9Mb3dlckNhc2UoKWluIG4/bC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpOmwuc2xpY2UoMiksbi5sfHwobi5sPXt9KSxuLmxbbCtvXT11LHU/aXx8bi5hZGRFdmVudExpc3RlbmVyKGwsbz9IOiQsbyk6bi5yZW1vdmVFdmVudExpc3RlbmVyKGwsbz9IOiQsbyk7ZWxzZSBpZihcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sKXtpZih0KWw9bC5yZXBsYWNlKC94bGlua1tIOmhdLyxcImhcIikucmVwbGFjZSgvc05hbWUkLyxcInNcIik7ZWxzZSBpZihcImhyZWZcIiE9PWwmJlwibGlzdFwiIT09bCYmXCJmb3JtXCIhPT1sJiZcInRhYkluZGV4XCIhPT1sJiZcImRvd25sb2FkXCIhPT1sJiZsIGluIG4pdHJ5e25bbF09bnVsbD09dT9cIlwiOnU7YnJlYWsgbn1jYXRjaChuKXt9XCJmdW5jdGlvblwiPT10eXBlb2YgdXx8KG51bGwhPXUmJighMSE9PXV8fFwiYVwiPT09bFswXSYmXCJyXCI9PT1sWzFdKT9uLnNldEF0dHJpYnV0ZShsLHUpOm4ucmVtb3ZlQXR0cmlidXRlKGwpKX19ZnVuY3Rpb24gJChsKXt0aGlzLmxbbC50eXBlKyExXShuLmV2ZW50P24uZXZlbnQobCk6bCl9ZnVuY3Rpb24gSChsKXt0aGlzLmxbbC50eXBlKyEwXShuLmV2ZW50P24uZXZlbnQobCk6bCl9ZnVuY3Rpb24gSShsLHUsaSx0LG8scixmLGUscyl7dmFyIGEsdixoLGQsXyxrLGIsZyx3LHgsQSxQPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYocz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChhPW4uX19iKSYmYSh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQKXtpZihnPXUucHJvcHMsdz0oYT1QLmNvbnRleHRUeXBlKSYmdFthLl9fY10seD1hP3c/dy5wcm9wcy52YWx1ZTphLl9fOnQsaS5fX2M/Yj0odj11Ll9fYz1pLl9fYykuX189di5fX0U6KFwicHJvdG90eXBlXCJpbiBQJiZQLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9dj1uZXcgUChnLHgpOih1Ll9fYz12PW5ldyBwKGcseCksdi5jb25zdHJ1Y3Rvcj1QLHYucmVuZGVyPU0pLHcmJncuc3ViKHYpLHYucHJvcHM9Zyx2LnN0YXRlfHwodi5zdGF0ZT17fSksdi5jb250ZXh0PXgsdi5fX249dCxoPXYuX19kPSEwLHYuX19oPVtdKSxudWxsPT12Ll9fcyYmKHYuX19zPXYuc3RhdGUpLG51bGwhPVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYodi5fX3M9PXYuc3RhdGUmJih2Ll9fcz1jKHt9LHYuX19zKSksYyh2Ll9fcyxQLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhnLHYuX19zKSkpLGQ9di5wcm9wcyxfPXYuc3RhdGUsaCludWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9di5jb21wb25lbnRXaWxsTW91bnQmJnYuY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9di5jb21wb25lbnREaWRNb3VudCYmdi5fX2gucHVzaCh2LmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZnIT09ZCYmbnVsbCE9di5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZ2LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZyx4KSwhdi5fX2UmJm51bGwhPXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGcsdi5fX3MseCl8fHUuX192PT09aS5fX3Ype3YucHJvcHM9Zyx2LnN0YXRlPXYuX19zLHUuX192IT09aS5fX3YmJih2Ll9fZD0hMSksdi5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx1Ll9fay5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihuLl9fPXUpfSksdi5fX2gubGVuZ3RoJiZmLnB1c2godik7YnJlYWsgbn1udWxsIT12LmNvbXBvbmVudFdpbGxVcGRhdGUmJnYuY29tcG9uZW50V2lsbFVwZGF0ZShnLHYuX19zLHgpLG51bGwhPXYuY29tcG9uZW50RGlkVXBkYXRlJiZ2Ll9faC5wdXNoKGZ1bmN0aW9uKCl7di5jb21wb25lbnREaWRVcGRhdGUoZCxfLGspfSl9di5jb250ZXh0PXgsdi5wcm9wcz1nLHYuc3RhdGU9di5fX3MsKGE9bi5fX3IpJiZhKHUpLHYuX19kPSExLHYuX192PXUsdi5fX1A9bCxhPXYucmVuZGVyKHYucHJvcHMsdi5zdGF0ZSx2LmNvbnRleHQpLHYuc3RhdGU9di5fX3MsbnVsbCE9di5nZXRDaGlsZENvbnRleHQmJih0PWMoYyh7fSx0KSx2LmdldENoaWxkQ29udGV4dCgpKSksaHx8bnVsbD09di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8KGs9di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShkLF8pKSxBPW51bGwhPWEmJmEudHlwZT09PXkmJm51bGw9PWEua2V5P2EucHJvcHMuY2hpbGRyZW46YSxtKGwsQXJyYXkuaXNBcnJheShBKT9BOltBXSx1LGksdCxvLHIsZixlLHMpLHYuYmFzZT11Ll9fZSx1Ll9faD1udWxsLHYuX19oLmxlbmd0aCYmZi5wdXNoKHYpLGImJih2Ll9fRT12Ll9fPW51bGwpLHYuX19lPSExfWVsc2UgbnVsbD09ciYmdS5fX3Y9PT1pLl9fdj8odS5fX2s9aS5fX2ssdS5fX2U9aS5fX2UpOnUuX19lPWooaS5fX2UsdSxpLHQsbyxyLGYscyk7KGE9bi5kaWZmZWQpJiZhKHUpfWNhdGNoKGwpe3UuX192PW51bGwsKHN8fG51bGwhPXIpJiYodS5fX2U9ZSx1Ll9faD0hIXMscltyLmluZGV4T2YoZSldPW51bGwpLG4uX19lKGwsdSxpKX19ZnVuY3Rpb24gVChsLHUpe24uX19jJiZuLl9fYyh1LGwpLGwuc29tZShmdW5jdGlvbih1KXt0cnl7bD11Ll9faCx1Ll9faD1bXSxsLnNvbWUoZnVuY3Rpb24obil7bi5jYWxsKHUpfSl9Y2F0Y2gobCl7bi5fX2UobCx1Ll9fdil9fSl9ZnVuY3Rpb24gaihuLGwsdSxpLHQsbyxlLGMpe3ZhciBhLHYsaCx5LHA9dS5wcm9wcyxkPWwucHJvcHMsXz1sLnR5cGUsaz0wO2lmKFwic3ZnXCI9PT1fJiYodD0hMCksbnVsbCE9bylmb3IoO2s8by5sZW5ndGg7aysrKWlmKChhPW9ba10pJiYoYT09PW58fChfP2EubG9jYWxOYW1lPT1fOjM9PWEubm9kZVR5cGUpKSl7bj1hLG9ba109bnVsbDticmVha31pZihudWxsPT1uKXtpZihudWxsPT09XylyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZCk7bj10P2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXyk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChfLGQuaXMmJmQpLG89bnVsbCxjPSExfWlmKG51bGw9PT1fKXA9PT1kfHxjJiZuLmRhdGE9PT1kfHwobi5kYXRhPWQpO2Vsc2V7aWYobz1vJiZmLnNsaWNlLmNhbGwobi5jaGlsZE5vZGVzKSx2PShwPXUucHJvcHN8fHIpLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLGg9ZC5kYW5nZXJvdXNseVNldElubmVySFRNTCwhYyl7aWYobnVsbCE9bylmb3IocD17fSx5PTA7eTxuLmF0dHJpYnV0ZXMubGVuZ3RoO3krKylwW24uYXR0cmlidXRlc1t5XS5uYW1lXT1uLmF0dHJpYnV0ZXNbeV0udmFsdWU7KGh8fHYpJiYoaCYmKHYmJmguX19odG1sPT12Ll9faHRtbHx8aC5fX2h0bWw9PT1uLmlubmVySFRNTCl8fChuLmlubmVySFRNTD1oJiZoLl9faHRtbHx8XCJcIikpfWlmKEEobixkLHAsdCxjKSxoKWwuX19rPVtdO2Vsc2UgaWYoaz1sLnByb3BzLmNoaWxkcmVuLG0obixBcnJheS5pc0FycmF5KGspP2s6W2tdLGwsdSxpLHQmJlwiZm9yZWlnbk9iamVjdFwiIT09XyxvLGUsbi5maXJzdENoaWxkLGMpLG51bGwhPW8pZm9yKGs9by5sZW5ndGg7ay0tOyludWxsIT1vW2tdJiZzKG9ba10pO2N8fChcInZhbHVlXCJpbiBkJiZ2b2lkIDAhPT0oaz1kLnZhbHVlKSYmKGshPT1uLnZhbHVlfHxcInByb2dyZXNzXCI9PT1fJiYhaykmJkMobixcInZhbHVlXCIsayxwLnZhbHVlLCExKSxcImNoZWNrZWRcImluIGQmJnZvaWQgMCE9PShrPWQuY2hlY2tlZCkmJmshPT1uLmNoZWNrZWQmJkMobixcImNoZWNrZWRcIixrLHAuY2hlY2tlZCwhMSkpfXJldHVybiBufWZ1bmN0aW9uIHoobCx1LGkpe3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBsP2wodSk6bC5jdXJyZW50PXV9Y2F0Y2gobCl7bi5fX2UobCxpKX19ZnVuY3Rpb24gTChsLHUsaSl7dmFyIHQsbyxyO2lmKG4udW5tb3VudCYmbi51bm1vdW50KGwpLCh0PWwucmVmKSYmKHQuY3VycmVudCYmdC5jdXJyZW50IT09bC5fX2V8fHoodCxudWxsLHUpKSxpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsLnR5cGV8fChpPW51bGwhPShvPWwuX19lKSksbC5fX2U9bC5fX2Q9dm9pZCAwLG51bGwhPSh0PWwuX19jKSl7aWYodC5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7dC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGwpe24uX19lKGwsdSl9dC5iYXNlPXQuX19QPW51bGx9aWYodD1sLl9faylmb3Iocj0wO3I8dC5sZW5ndGg7cisrKXRbcl0mJkwodFtyXSx1LGkpO251bGwhPW8mJnMobyl9ZnVuY3Rpb24gTShuLGwsdSl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3Iobix1KX1mdW5jdGlvbiBOKGwsdSxpKXt2YXIgdCxvLGU7bi5fXyYmbi5fXyhsLHUpLG89KHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgaSk/bnVsbDppJiZpLl9fa3x8dS5fX2ssZT1bXSxJKHUsbD0oIXQmJml8fHUpLl9faz1hKHksbnVsbCxbbF0pLG98fHIscix2b2lkIDAhPT11Lm93bmVyU1ZHRWxlbWVudCwhdCYmaT9baV06bz9udWxsOnUuZmlyc3RDaGlsZD9mLnNsaWNlLmNhbGwodS5jaGlsZE5vZGVzKTpudWxsLGUsIXQmJmk/aTpvP28uX19lOnUuZmlyc3RDaGlsZCx0KSxUKGUsbCl9ZnVuY3Rpb24gTyhuLGwpe04obixsLE8pfWZ1bmN0aW9uIFMobixsLHUpe3ZhciBpLHQsbyxyPWFyZ3VtZW50cyxmPWMoe30sbi5wcm9wcyk7Zm9yKG8gaW4gbClcImtleVwiPT1vP2k9bFtvXTpcInJlZlwiPT1vP3Q9bFtvXTpmW29dPWxbb107aWYoYXJndW1lbnRzLmxlbmd0aD4zKWZvcih1PVt1XSxvPTM7bzxhcmd1bWVudHMubGVuZ3RoO28rKyl1LnB1c2gocltvXSk7cmV0dXJuIG51bGwhPXUmJihmLmNoaWxkcmVuPXUpLHYobi50eXBlLGYsaXx8bi5rZXksdHx8bi5yZWYsbnVsbCl9ZnVuY3Rpb24gcShuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitvKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSxpO3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKGk9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gaX0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZShrKX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LlByb3ZpZGVyLl9fPXUuQ29uc3VtZXIuY29udGV4dFR5cGU9dX1uPXtfX2U6ZnVuY3Rpb24obixsKXtmb3IodmFyIHUsaSx0O2w9bC5fXzspaWYoKHU9bC5fX2MpJiYhdS5fXyl0cnl7aWYoKGk9dS5jb25zdHJ1Y3RvcikmJm51bGwhPWkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYodS5zZXRTdGF0ZShpLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSksdD11Ll9fZCksbnVsbCE9dS5jb21wb25lbnREaWRDYXRjaCYmKHUuY29tcG9uZW50RGlkQ2F0Y2gobiksdD11Ll9fZCksdClyZXR1cm4gdS5fX0U9dX1jYXRjaChsKXtuPWx9dGhyb3cgbn0sX192OjB9LGw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LHAucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWMoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihjKHt9LHUpLHRoaXMucHJvcHMpKSxuJiZjKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLGsodGhpcykpfSxwLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksayh0aGlzKSl9LHAucHJvdG90eXBlLnJlbmRlcj15LHU9W10saT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxiLl9fcj0wLG89MDtleHBvcnR7TiBhcyByZW5kZXIsTyBhcyBoeWRyYXRlLGEgYXMgY3JlYXRlRWxlbWVudCxhIGFzIGgseSBhcyBGcmFnbWVudCxoIGFzIGNyZWF0ZVJlZixsIGFzIGlzVmFsaWRFbGVtZW50LHAgYXMgQ29tcG9uZW50LFMgYXMgY2xvbmVFbGVtZW50LHEgYXMgY3JlYXRlQ29udGV4dCx3IGFzIHRvQ2hpbGRBcnJheSxuIGFzIG9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzc29mKGdsb2JhbC5wcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJPdXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX09VVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9PVVQgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlck91dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlck91dDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy4xMC4xJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICFTeW1ib2wuc2hhbSAmJlxuICAgIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAoSVNfTk9ERSA/IFY4X1ZFUlNJT04gPT09IDM4IDogVjhfVkVSU0lPTiA+IDM3ICYmIFY4X1ZFUlNJT04gPCA0MSk7XG59KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1k7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSByZWdleHBGbGFncy5jYWxsKHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgneScsICcnKTtcbiAgICAgIGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IFN0cmluZyhzdHIpLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHJbcmUubGFzdEluZGV4IC0gMV0gIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBtYXRjaC5pbnB1dC5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgc2V0dGVyLmNhbGwoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciAkcmVwbGFjZXI7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KSBhcmdzLnB1c2goYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHBvbHlmaWxsc1xuLy8gdHNsaW50OmRpc2FibGU6bm8tbmFtZXNwYWNlXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTppbnRlcmZhY2UtbmFtZVxuICBpbnRlcmZhY2UgU3RyaW5nIHtcbiAgICBzdGFydHNXaXRoKHNlYXJjaDogc3RyaW5nLCBwb3M/OiBudW1iZXIpOiBib29sZWFuXG4gIH1cbn1cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9ubHktYXJyb3ctZnVuY3Rpb25zXG4gIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uKHNlYXJjaDogc3RyaW5nLCBwb3M6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWl0KG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCksIG1zKSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0aEpvaW4oLi4ucGF0aEFycjogc3RyaW5nW10pIHtcbiAgcmV0dXJuIHBhdGhBcnIuam9pbignLycpLnJlcGxhY2UoL1xcL3syLH0vLCAnLycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlbmFtZShwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBwYXRoUGFydHMgPSBwYXRoLnNwbGl0KCcvJylcbiAgcmV0dXJuIHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1TdGFydCh0b1RyaW06IHN0cmluZywgdmFsdWVUb1JlbW92ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCF0b1RyaW0gfHwgIXZhbHVlVG9SZW1vdmUpIHtcbiAgICByZXR1cm4gdG9UcmltXG4gIH1cbiAgd2hpbGUgKHRvVHJpbS5zdGFydHNXaXRoKHZhbHVlVG9SZW1vdmUpKSB7XG4gICAgdG9UcmltID0gdG9UcmltLnN1YnN0cmluZyh2YWx1ZVRvUmVtb3ZlLmxlbmd0aClcbiAgfVxuICByZXR1cm4gdG9UcmltXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RTY3JpcHQoc3JjOiBzdHJpbmcsIGludGVncml0eTogc3RyaW5nKSB7XG4gIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICBzLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICBzLmludGVncml0eSA9IGludGVncml0eVxuICBzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cydcbiAgcy5zcmMgPSBzcmNcbiAgJCgnaGVhZCcpLmFwcGVuZChzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Q3NzKGhyZWY6IHN0cmluZywgaW50ZWdyaXR5OiBzdHJpbmcpIHtcbiAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKVxuICBzLnJlbCA9ICdzdHlsZXNoZWV0J1xuICBzLmhyZWYgPSBocmVmXG4gIHMuaW50ZWdyaXR5ID0gaW50ZWdyaXR5XG4gIHMuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJ1xuICAvLyBVc2UgYW55IHNlbGVjdG9yXG4gICQoJ2hlYWQnKS5hcHBlbmQocylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEJvb3RzdHJhcCgpIHtcbiAgaW5qZWN0Q3NzKCdodHRwczovL3N0YWNrcGF0aC5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjMuMS9jc3MvYm9vdHN0cmFwLm1pbi5jc3MnLFxuICAgICdzaGEzODQtZ2dPeVIwaVhDYk1RdjNYaXBtYTM0TUQrZEgvMWZRNzg0L2o2Y1kvaUpUUVVPaGNXcjd4OUp2b1J4VDJNWncxVCcpXG4gIGluamVjdFNjcmlwdCgnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcG9wcGVyLmpzLzEuMTQuNy91bWQvcG9wcGVyLm1pbi5qcycsXG4gICAgJ3NoYTM4NC1VTzJlVDBDcEhxZFNKUTZoSnR5NUtWcGh0UGh6V2o5V08xY2xIVE1HYTNKRFp3cm5RcTRzRjg2ZElITkR6MFcxJylcbiAgaW5qZWN0U2NyaXB0KCdodHRwczovL3N0YWNrcGF0aC5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjMuMS9qcy9ib290c3RyYXAubWluLmpzJyxcbiAgICAnc2hhMzg0LUpqU21WZ3lkMHAzcFhCMXJSaWJaVUFZb0lJeTZPclE2VnJqSUVhRmYvbkpHekl4RkRzZjR4MHhJTStCMDdqUk0nKVxufVxuXG4vLyBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9qYXZhc2NyaXB0LWRlYm91bmNlLWZ1bmN0aW9uXG4vLyB0c2xpbnQ6ZGlzYWJsZVxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oXG4gICAgZnVuYzogVCxcbiAgICB3YWl0OiBudW1iZXIsXG4gICAgaW1tZWRpYXRlPzogYm9vbGVhbixcbik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcbiAgbGV0IHRpbWVvdXRcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGxldCBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50c1xuICAgIGxldCBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGltZW91dCA9IG51bGxcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncykgfVxuICAgIH1cbiAgICBsZXQgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dFxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KVxuICAgIGlmIChjYWxsTm93KSB7IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncykgfVxuICB9XG59O1xuLy8gdHNsaW50OmVuYWJsZVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWllZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIE5BVElWRV9SRUpFQ1RJT05fRVZFTlQgPSB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbic7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQpIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFdlIG5lZWQgUHJvbWlzZSNmaW5hbGx5IGluIHRoZSBwdXJlIHZlcnNpb24gZm9yIHByZXZlbnRpbmcgcHJvdG90eXBlIHBvbGx1dGlvblxuICBpZiAoSVNfUFVSRSAmJiAhUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICByZXR1cm4gIShwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTtcbn0pO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9IEZPUkNFRCB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IGNoYWluW2luZGV4KytdO1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUucmVhY3Rpb25zID0gW107XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQoc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmICghTkFUSVZFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgdmFyIElTX1VOSEFORExFRCA9IGlzVW5oYW5kbGVkKHN0YXRlKTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChJU19VTkhBTkRMRUQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChVTkhBTkRMRURfUkVKRUNUSU9OLCBwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBzdGF0ZS5yZWplY3Rpb24gPSBJU19OT0RFIHx8IGlzVW5oYW5kbGVkKHN0YXRlKSA/IFVOSEFORExFRCA6IEhBTkRMRUQ7XG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB0aHJvdyByZXN1bHQudmFsdWU7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUucmVqZWN0aW9uICE9PSBIQU5ETEVEICYmICFzdGF0ZS5wYXJlbnQ7XG59O1xuXG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBbXSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShQcm9taXNlQ29uc3RydWN0b3IsICRmZXRjaC5hcHBseShnbG9iYWwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIGBQcm9taXNlLnJhY2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBzcGVjIHJlcXVpcmVtZW50XG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChJU19OT0RFKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oPzppcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG5cbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICgoIUlTX1BVUkUgfHwgTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpLnZhbHVlO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQ29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuY29udGVudGZ1bEV4dGVuc2lvbjsiLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3IsXG4vLyBzbyB3ZSB1c2UgYW4gaW50ZXJtZWRpYXRlIGZ1bmN0aW9uLlxuZnVuY3Rpb24gUkUocywgZikge1xuICByZXR1cm4gUmVnRXhwKHMsIGYpO1xufVxuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG4gIHZhciByZSA9IFJFKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbmV4cG9ydHMuQlJPS0VOX0NBUkVUID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gUkUoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IFJlZ0V4cC5wcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChzaGFtKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBuYXRpdmVKb2luID0gW10uam9pbjtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRVMzX1NUUklOR1MgfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBuYXRpdmVKb2luLmNhbGwodG9JbmRleGVkT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEMsIGFyZ3NMZW5ndGgsIGFyZ3MpIHtcbiAgaWYgKCEoYXJnc0xlbmd0aCBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbGlzdCA9IFtdLCBpID0gMDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSB3ZSBoYXZlIG5vIHByb3BlciBhbHRlcm5hdGl2ZXMsIElFOC0gb25seVxuICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9IEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBsaXN0LmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBmdW5jdGlvbiBib3VuZCgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfSVRFUkFUT1IgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfSVRFUkFUT1IpO1xuICB2YXIgSU5URVJSVVBURUQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSU5URVJSVVBURUQpO1xuICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCwgMSArIEFTX0VOVFJJRVMgKyBJTlRFUlJVUFRFRCk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCBjb25kaXRpb24pO1xuICB9O1xuXG4gIHZhciBjYWxsRm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoQVNfRU5UUklFUykge1xuICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWVbMF0sIHZhbHVlWzFdLCBzdG9wKSA6IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgfSByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gIH07XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL3dlYjBzKD8hLipjaHJvbWUpL2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChSRVBMQUNFLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUsIHJlYXNvbikge1xuICB2YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSByZWFzb24uUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU7XG4gIHZhciBSRVBMQUNFX0tFRVBTXyQwID0gcmVhc29uLlJFUExBQ0VfS0VFUFNfJDA7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiByZXBsYWNlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcmVwbGFjZXIuY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IG5hdGl2ZVJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICAoIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFICYmIFJFUExBQ0VfS0VFUFNfJDApIHx8XG4gICAgICAgICh0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnc3RyaW5nJyAmJiByZXBsYWNlVmFsdWUuaW5kZXhPZihVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xKVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtc3RhcnRzd2l0aCAtLSBzYWZlXG52YXIgJHN0YXJ0c1dpdGggPSAnJy5zdGFydHNXaXRoO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RhcnRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKG1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBsYWNlID0gJycucmVwbGFjZTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcbnZhciBhcnJheVB1c2ggPSBbXS5wdXNoO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCAyLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFycmF5UHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IG91dHB1dC5zbGljZSgwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogbmF0aXZlU3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IFMuc2xpY2UocSkgOiBTKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFVOU1VQUE9SVEVEX1kgPyBxIDogMCkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgVU5TVVBQT1JURURfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBmbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwID0gU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgcmYgPSBSLmZsYWdzO1xuICAgIHZhciBmID0gU3RyaW5nKHJmID09PSB1bmRlZmluZWQgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSA/IGZsYWdzLmNhbGwoUikgOiByZik7XG4gICAgcmV0dXJuICcvJyArIHAgKyAnLycgKyBmO1xuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBofSBmcm9tICdwcmVhY3QnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNsdWdGb3JtUHJvcHMge1xuICBzbHVnOiBzdHJpbmdcbiAgcGFyZW50U2x1Zzogc3RyaW5nXG5cbiAgb25DaGFuZ2U/OiAodGhpczogU2x1Z0Zvcm0sIGV2ZW50OiB7IG9sZFZhbHVlOiBzdHJpbmcsIG5ld1ZhbHVlOiBzdHJpbmcgfSkgPT4gdm9pZFxufVxuXG5leHBvcnQgY2xhc3MgU2x1Z0Zvcm0gZXh0ZW5kcyBDb21wb25lbnQ8SVNsdWdGb3JtUHJvcHMsIHt2YWx1ZTogc3RyaW5nfT4ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMub25Gb2N1c0dhaW5lZCA9IHRoaXMub25Gb2N1c0dhaW5lZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5vbkZvY3VzTG9zdCA9IHRoaXMub25Gb2N1c0xvc3QuYmluZCh0aGlzKVxuICAgIHRoaXMuZGVtYW5kRm9jdXMgPSB0aGlzLmRlbWFuZEZvY3VzLmJpbmQodGhpcylcbiAgfVxuXG4gIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnNsdWcsXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgY29uc3Qge3BhcmVudFNsdWd9ID0gdGhpcy5wcm9wc1xuICAgIGxldCB7c2x1Z30gPSB0aGlzLnByb3BzXG4gICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS52YWx1ZSAmJiB0aGlzLnN0YXRlLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHNsdWcgPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJzbHVnRm9ybVwiIGNsYXNzPVwiY2YtZm9ybS1pbnB1dFwiIG9uQ2xpY2s9e3RoaXMuZGVtYW5kRm9jdXN9PlxuICAgICAgICB7IHBhcmVudFNsdWcgJiZcbiAgICAgICAgICA8c3BhbiBpZD1cInBhcmVudFwiIGRhdGEtdGVzdGlkPVwicGFyZW50XCIgdGl0bGU9XCJUaGlzIGNvbWVzIGZyb20gdGhlIHBhcmVudCBwYWdlIGFuZCB5b3UgY2FuJ3QgY2hhbmdlIGl0IGhlcmUuXCI+XG4gICAgICAgICAgICB7cGFyZW50U2x1Z30vXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICB9XG4gICAgICAgIDxzcGFuIGlkPVwic2x1Z1wiIGRhdGEtdGVzdGlkPVwic2x1Z1wiIGNvbnRlbnRFZGl0YWJsZSBvbkZvY3VzPXt0aGlzLm9uRm9jdXNHYWluZWR9IG9uQmx1cj17dGhpcy5vbkZvY3VzTG9zdH0+XG4gICAgICAgICAge3NsdWd9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgZGVtYW5kRm9jdXMoKSB7XG4gICAgJCgnI3NsdWdGb3JtICNzbHVnJykuZm9jdXMoKVxuICB9XG5cbiAgcHJpdmF0ZSBvbkZvY3VzTG9zdChldnQ6IGFueSkge1xuICAgIGNvbnN0IG5ld1RleHQgPSBldnQudGFyZ2V0LnRleHRDb250ZW50XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgaWYgKG5ld1RleHQgIT0gb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogbmV3VGV4dCB9KVxuXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlLmNhbGwodGhpcywge1xuICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgbmV3VmFsdWU6IG5ld1RleHQsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25Gb2N1c0dhaW5lZChldnQ6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKCdmb2N1c0dhaW5lZCcsIGV2dClcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgY29udGVudGZ1bEV4dGVuc2lvbiBmcm9tICdjb250ZW50ZnVsLXVpLWV4dGVuc2lvbnMtc2RrJ1xuaW1wb3J0IHtFbnRyeUFQSSwgRmllbGRFeHRlbnNpb25TREssIExpbmssIFNwYWNlQVBJLCBTeXN9IGZyb20gJ2NvbnRlbnRmdWwtdWktZXh0ZW5zaW9ucy1zZGsnXG5pbXBvcnQge0NvbXBvbmVudCwgaCwgcmVuZGVyfSBmcm9tICdwcmVhY3QnXG5cbmltcG9ydCB7IHBhdGhKb2luLCB0cmltU3RhcnQgfSBmcm9tICcuLi9saWIvdXRpbHMnXG5pbXBvcnQge1NsdWdGb3JtfSBmcm9tICcuL3NsdWctZm9ybSdcblxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKG1vZHVsZTogc3RyaW5nKTogYW55XG5jb25zdCBzdHlsZXMgPSByZXF1aXJlKCcuL3N0eWxlcy5zY3NzJylcblxuaWYgKGNvbnRlbnRmdWxFeHRlbnNpb24pIHtcbiAgY29udGVudGZ1bEV4dGVuc2lvbi5pbml0KChleHRlbnNpb24pID0+IHtcbiAgICByZW5kZXIoPFNsdWdFZGl0b3Igey4uLmV4dGVuc2lvbiBhcyBGaWVsZEV4dGVuc2lvblNES30gLz4sXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3Qtcm9vdCcpKVxuICB9KVxufVxuXG5pbnRlcmZhY2UgSUFwcFN0YXRlIHtcbiAgZmllbGRWYWx1ZTogc3RyaW5nXG4gIHBhcmVudFNsdWc6IHN0cmluZ1xuICBlcnJvcnM6IHN0cmluZ1tdXG4gIHdhcm5pbmdzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgY2xhc3MgU2x1Z0VkaXRvciBleHRlbmRzIENvbXBvbmVudDxGaWVsZEV4dGVuc2lvblNESywgSUFwcFN0YXRlPiB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMub25TbHVnQ2hhbmdlID0gdGhpcy5vblNsdWdDaGFuZ2UuYmluZCh0aGlzKVxuICB9XG5cbiAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmllbGRWYWx1ZTogdGhpcy5wcm9wcy5maWVsZC5nZXRWYWx1ZSgpLFxuICAgICAgZXJyb3JzOiBbXSxcbiAgICB9KVxuXG4gICAgdGhpcy5wcm9wcy5maWVsZC5vblZhbHVlQ2hhbmdlZChhc3luYyAobmV3VmFsdWUpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaWVsZFZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMub25Nb3VudCgpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHF1ZXJ5aW5nIScsIGVycilcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IFtlcnIudG9TdHJpbmcoKV0sXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZmllbGRWYWx1ZSwgcGFyZW50U2x1ZywgZXJyb3JzLCB3YXJuaW5ncyB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8U2x1Z0Zvcm0gc2x1Zz17ZmllbGRWYWx1ZX1cbiAgICAgICAgcGFyZW50U2x1Zz17cGFyZW50U2x1Z31cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMub25TbHVnQ2hhbmdlfSAvPlxuXG4gICAgICB7ZXJyb3JzICYmIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JzXCI+XG4gICAgICAgIHtlcnJvcnMubWFwKChlcnIpID0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvclwiPntlcnJ9PC9kaXY+LFxuICAgICAgICApfVxuICAgICAgICA8L2Rpdj59XG4gICAgICB7d2FybmluZ3MgJiYgPGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nc1wiPlxuICAgICAgICB7d2FybmluZ3MubWFwKCh3KSA9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3JcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogd319PjwvZGl2PixcbiAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+fVxuICAgIDwvZGl2PlxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvblNsdWdDaGFuZ2UoZXZlbnQ6IHsgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBwYXRoSm9pbih0aGlzLnN0YXRlLnBhcmVudFNsdWcsIGV2ZW50Lm5ld1ZhbHVlKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmaWVsZFZhbHVlOiBldmVudC5uZXdWYWx1ZSxcbiAgICB9KVxuICAgIGlmIChhd2FpdCB0aGlzLnZhbGlkYXRlTmV3U2x1ZyhldmVudC5uZXdWYWx1ZSkpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZmllbGQuc2V0VmFsdWUobmV3VmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB2YWxpZGF0ZU5ld1NsdWcodmFsdWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXVxuICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdXG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PSAwKSB7XG4gICAgICBlcnJvcnMucHVzaChgVGhlIHNsdWcgY2Fubm90IGJlIGVtcHR5IWApXG4gICAgfSBlbHNlIGlmICgvXFxzLy50ZXN0KHZhbHVlKSkge1xuICAgICAgZXJyb3JzLnB1c2goYFRoZSBzbHVnIG11c3Qgbm90IGNvbnRhaW4gd2hpdGVzcGFjZSFgKVxuICAgIH1cblxuICAgIGNvbnN0IHsgZmllbGRzIH0gPSB0aGlzLnByb3BzLmVudHJ5XG4gICAgaWYgKGZpZWxkcy5zdWJwYWdlcykge1xuICAgICAgY29uc3Qgc3VicGFnZXMgPSBmaWVsZHMuc3VicGFnZXMuZ2V0VmFsdWUoKVxuICAgICAgaWYgKHN1YnBhZ2VzICYmIHN1YnBhZ2VzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICB3YXJuaW5ncy5wdXNoKC4uLmF3YWl0IHRoaXMuY2hlY2tTdWJwYWdlcyhzdWJwYWdlcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBlcnJvcnMsXG4gICAgICB3YXJuaW5ncyxcbiAgICB9KVxuXG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnByb3BzLmZpZWxkLnNldEludmFsaWQodHJ1ZSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzLmZpZWxkLnNldEludmFsaWQoZmFsc2UpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tTdWJwYWdlcyhzdWJwYWdlczogTGlua1tdKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IHtwYXJlbnRTbHVnLCBmaWVsZFZhbHVlfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCB7IHNwYWNlIH0gPSB0aGlzLnByb3BzLmVudHJ5LmdldFN5cygpIGFzIHsgc3BhY2U6IFNwYWNlQVBJIH1cblxuICAgIGNvbnN0IGVudHJpZXMgPSBhd2FpdCB0aGlzLnByb3BzLnNwYWNlLmdldEVudHJpZXMoe1xuICAgICAgJ2NvbnRlbnRfdHlwZSc6ICdwYWdlJyxcbiAgICAgICdzeXMuaWRbaW5dJzogc3VicGFnZXMubWFwKChsaW5rKSA9PiBsaW5rLnN5cy5pZCkuam9pbignLCcpLFxuICAgIH0pXG5cbiAgICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBlbnRyaWVzLml0ZW1zLmZpbHRlcigoaSkgPT4gaSkubWFwKChwYWdlOiBFbnRyeUFQSSkgPT4ge1xuICAgICAgaWYgKCFwYWdlIHx8ICFwYWdlLmZpZWxkcyB8fCAhcGFnZS5maWVsZHMuc2x1ZyB8fCAhcGFnZS5maWVsZHMuc2x1Z1snZW4tVVMnXSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgY29uc3Qgc2x1ZyA9IHBhZ2UuZmllbGRzLnNsdWdbJ2VuLVVTJ10gYXMgc3RyaW5nXG4gICAgICBpZiAoc2x1Zy5zdGFydHNXaXRoKHBhdGhKb2luKHBhcmVudFNsdWcsIGZpZWxkVmFsdWUpKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgc3VicGFnZSAke3NsdWd9IGlzIGdvb2RgKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZygnYmFkIHBhZ2UnLCBmaWVsZFZhbHVlLCBwYWdlLmZpZWxkcylcblxuICAgICAgY29uc3QgdGl0bGUgPSBwYWdlLmZpZWxkcy50aXRsZSAmJiBwYWdlLmZpZWxkcy50aXRsZVsnZW4tVVMnXVxuICAgICAgcmV0dXJuIGA8YSBocmVmPVwiaHR0cHM6Ly9hcHAuY29udGVudGZ1bC5jb20vc3BhY2VzLyR7c3BhY2Uuc3lzLmlkfWAgK1xuICAgICAgICBgL2VudHJpZXMvJHtwYWdlLnN5cy5pZH1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke3RpdGxlIHx8IHBhZ2Uuc3lzLmlkfTwvYT4gYCArXG4gICAgICAgIGAoJHtzbHVnfSlgXG4gICAgfSkuZmlsdGVyKCh3KSA9PiB3KVxuXG4gICAgaWYgKHdhcm5pbmdzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gd2FybmluZ3NcbiAgICB9XG5cbiAgICByZXR1cm4gW1xuICAgICAgYEJlIHN1cmUgdG8gdXBkYXRlIHRoZXNlIHN1YnBhZ2VzISBUaGVpciBzbHVncyBhcmUgd3Jvbmc6PGJyLz4gIGAgK1xuICAgICAgd2FybmluZ3Muam9pbignLDxici8+JyldXG5cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgb25Nb3VudCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBmaW5kIHRoZSBwYWdlIHBvaW50aW5nIHRvIHRoaXMgcGFnZVxuICAgIGNvbnN0IGVudHJpZXMgPSBhd2FpdCB0aGlzLnByb3BzLnNwYWNlLmdldEVudHJpZXMoe1xuICAgICAgJ2NvbnRlbnRfdHlwZSc6ICdwYWdlJyxcbiAgICAgICdmaWVsZHMuc3VicGFnZXMuc3lzLmlkJzogKHRoaXMucHJvcHMuZW50cnkuZ2V0U3lzKCkgYXMgU3lzKS5pZCxcbiAgICB9KVxuXG4gICAgaWYgKGVudHJpZXMuaXRlbXMubGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudFNsdWcgPSAoZW50cmllcy5pdGVtc1swXSBhcyBFbnRyeUFQSSkuZmllbGRzLnNsdWdbJ2VuLVVTJ11cbiAgICBsZXQgZmllbGRWYWx1ZSA9IHRoaXMuc3RhdGUuZmllbGRWYWx1ZVxuICAgIGZpZWxkVmFsdWUgPSB0cmltU3RhcnQoZmllbGRWYWx1ZSwgcGFyZW50U2x1ZylcbiAgICBmaWVsZFZhbHVlID0gdHJpbVN0YXJ0KGZpZWxkVmFsdWUsICcvJylcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcGFyZW50U2x1ZyxcbiAgICAgIGZpZWxkVmFsdWUsXG4gICAgfSlcblxuICAgIGF3YWl0IHRoaXMudmFsaWRhdGVOZXdTbHVnKGZpZWxkVmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNHVUlEKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIC8vIDc0Y2YxMzYzLWRlZjEtNDU5Ni04NjgzLTI2OGFmMzk3ZWFhNVxuICByZXR1cm4gL14oXFx3K1xcLSl7NH1cXHcrJC8udGVzdChzdHIpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9