!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="../",n(n.s=336)}([function(t,e,n){var r=n(1),o=n(33),i=n(6),c=n(49),a=n(52),u=n(76),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||c;t.exports=function(t){return i(s,t)&&(a||"string"==typeof s[t])||(a&&i(l,t)?s[t]=l[t]:s[t]=f("Symbol."+t)),s[t]}},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,n(70))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(1),o=n(16).f,i=n(9),c=n(13),a=n(46),u=n(72),s=n(75);t.exports=function(t,e){var n,l,f,p,h,d=t.target,v=t.global,y=t.stat;if(n=v?r:y?r[d]||a(d,{}):(r[d]||{}).prototype)for(l in e){if(p=e[l],f=t.noTargetGet?(h=o(n,l))&&h.value:n[l],!s(v?l:d+(y?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),c(n,l,p,t)}}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(8),o=n(71),i=n(4),c=n(27),a=Object.defineProperty;e.f=r?a:function(t,e,n){if(i(t),e=c(e,!0),i(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(2);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(8),o=n(7),i=n(23);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(36),o=n(17);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(26),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(17);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(1),o=n(9),i=n(6),c=n(46),a=n(47),u=n(24),s=u.get,l=u.enforce,f=String(String).split("String");(t.exports=function(t,e,n,a){var u,s=!!a&&!!a.unsafe,p=!!a&&!!a.enumerable,h=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),(u=l(n)).source||(u.source=f.join("string"==typeof e?e:""))),t!==r?(s?!h&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},function(t,e,n){var r=n(73),o=n(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var r=n(8),o=n(59),i=n(23),c=n(10),a=n(27),u=n(6),s=n(71),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=c(t),e=a(e,!0),s)try{return l(t,e)}catch(t){}if(u(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e){t.exports=!1},function(t,e,n){"use strict";n.r(e),n.d(e,"render",(function(){return M})),n.d(e,"hydrate",(function(){return F})),n.d(e,"createElement",(function(){return d})),n.d(e,"h",(function(){return d})),n.d(e,"Fragment",(function(){return g})),n.d(e,"createRef",(function(){return y})),n.d(e,"isValidElement",(function(){return o})),n.d(e,"Component",(function(){return b})),n.d(e,"cloneElement",(function(){return z})),n.d(e,"createContext",(function(){return U})),n.d(e,"toChildArray",(function(){return w})),n.d(e,"options",(function(){return r}));var r,o,i,c,a,u,s={},l=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function p(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function d(t,e,n){var r,o,i,c=arguments,a={};for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:a[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(c[i]);if(null!=n&&(a.children=n),"function"==typeof t&&null!=t.defaultProps)for(i in t.defaultProps)void 0===a[i]&&(a[i]=t.defaultProps[i]);return v(t,a,r,o,null)}function v(t,e,n,o,i){var c={type:t,props:e,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++r.__v:i};return null!=r.vnode&&r.vnode(c),c}function y(){return{current:null}}function g(t){return t.children}function b(t,e){this.props=t,this.context=e}function _(t,e){if(null==e)return t.__?_(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?_(t):null}function m(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return m(t)}}function x(t){(!t.__d&&(t.__d=!0)&&i.push(t)&&!j.__r++||a!==r.debounceRendering)&&((a=r.debounceRendering)||c)(j)}function j(){for(var t;j.__r=i.length;)t=i.sort((function(t,e){return t.__v.__b-e.__v.__b})),i=[],t.some((function(t){var e,n,r,o,i,c;t.__d&&(i=(o=(e=t).__v).__e,(c=e.__P)&&(n=[],(r=p({},o)).__v=o.__v+1,R(c,o,r,e.__n,void 0!==c.ownerSVGElement,null!=o.__h?[i]:null,n,null==i?_(o):i,o.__h),C(n,o),o.__e!=i&&m(o)))}))}function S(t,e,n,r,o,i,c,a,u,f){var p,h,d,y,b,m,x,j=r&&r.__k||l,S=j.length;for(n.__k=[],p=0;p<e.length;p++)if(null!=(y=n.__k[p]=null==(y=e[p])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?v(null,y,null,null,y):Array.isArray(y)?v(g,{children:y},null,null,null):y.__b>0?v(y.type,y.props,y.key,null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(d=j[p])||d&&y.key==d.key&&y.type===d.type)j[p]=void 0;else for(h=0;h<S;h++){if((d=j[h])&&y.key==d.key&&y.type===d.type){j[h]=void 0;break}d=null}R(t,y,d=d||s,o,i,c,a,u,f),b=y.__e,(h=y.ref)&&d.ref!=h&&(x||(x=[]),d.ref&&x.push(d.ref,null,y),x.push(h,y.__c||b,y)),null!=b?(null==m&&(m=b),"function"==typeof y.type&&null!=y.__k&&y.__k===d.__k?y.__d=u=O(y,u,t):u=k(t,y,d,j,b,u),f||"option"!==n.type?"function"==typeof n.type&&(n.__d=u):t.value=""):u&&d.__e==u&&u.parentNode!=t&&(u=_(d))}for(n.__e=m,p=S;p--;)null!=j[p]&&("function"==typeof n.type&&null!=j[p].__e&&j[p].__e==n.__d&&(n.__d=_(r,p+1)),D(j[p],j[p]));if(x)for(p=0;p<x.length;p++)N(x[p],x[++p],x[++p])}function O(t,e,n){var r,o;for(r=0;r<t.__k.length;r++)(o=t.__k[r])&&(o.__=t,e="function"==typeof o.type?O(o,e,n):k(n,o,o,t.__k,o.__e,e));return e}function w(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){w(t,e)})):e.push(t)),e}function k(t,e,n,r,o,i){var c,a,u;if(void 0!==e.__d)c=e.__d,e.__d=void 0;else if(null==n||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),c=null;else{for(a=i,u=0;(a=a.nextSibling)&&u<r.length;u+=2)if(a==o)break t;t.insertBefore(o,i),c=i}return void 0!==c?c:o.nextSibling}function E(t,e,n){"-"===e[0]?t.setProperty(e,n):t[e]=null==n?"":"number"!=typeof n||f.test(e)?n:n+"px"}function T(t,e,n,r,o){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||E(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||E(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r||t.addEventListener(e,i?A:P,i):t.removeEventListener(e,i?A:P,i);else if("dangerouslySetInnerHTML"!==e){if(o)e=e.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null!=n&&(!1!==n||"a"===e[0]&&"r"===e[1])?t.setAttribute(e,n):t.removeAttribute(e))}}function P(t){this.l[t.type+!1](r.event?r.event(t):t)}function A(t){this.l[t.type+!0](r.event?r.event(t):t)}function R(t,e,n,o,i,c,a,u,s){var l,f,h,d,v,y,_,m,x,j,O,w=e.type;if(void 0!==e.constructor)return null;null!=n.__h&&(s=n.__h,u=e.__e=n.__e,e.__h=null,c=[u]),(l=r.__b)&&l(e);try{t:if("function"==typeof w){if(m=e.props,x=(l=w.contextType)&&o[l.__c],j=l?x?x.props.value:l.__:o,n.__c?_=(f=e.__c=n.__c).__=f.__E:("prototype"in w&&w.prototype.render?e.__c=f=new w(m,j):(e.__c=f=new b(m,j),f.constructor=w,f.render=L),x&&x.sub(f),f.props=m,f.state||(f.state={}),f.context=j,f.__n=o,h=f.__d=!0,f.__h=[]),null==f.__s&&(f.__s=f.state),null!=w.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=p({},f.__s)),p(f.__s,w.getDerivedStateFromProps(m,f.__s))),d=f.props,v=f.state,h)null==w.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==w.getDerivedStateFromProps&&m!==d&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(m,j),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(m,f.__s,j)||e.__v===n.__v){f.props=m,f.state=f.__s,e.__v!==n.__v&&(f.__d=!1),f.__v=e,e.__e=n.__e,e.__k=n.__k,e.__k.forEach((function(t){t&&(t.__=e)})),f.__h.length&&a.push(f);break t}null!=f.componentWillUpdate&&f.componentWillUpdate(m,f.__s,j),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(d,v,y)}))}f.context=j,f.props=m,f.state=f.__s,(l=r.__r)&&l(e),f.__d=!1,f.__v=e,f.__P=t,l=f.render(f.props,f.state,f.context),f.state=f.__s,null!=f.getChildContext&&(o=p(p({},o),f.getChildContext())),h||null==f.getSnapshotBeforeUpdate||(y=f.getSnapshotBeforeUpdate(d,v)),O=null!=l&&l.type===g&&null==l.key?l.props.children:l,S(t,Array.isArray(O)?O:[O],e,n,o,i,c,a,u,s),f.base=e.__e,e.__h=null,f.__h.length&&a.push(f),_&&(f.__E=f.__=null),f.__e=!1}else null==c&&e.__v===n.__v?(e.__k=n.__k,e.__e=n.__e):e.__e=I(n.__e,e,n,o,i,c,a,s);(l=r.diffed)&&l(e)}catch(t){e.__v=null,(s||null!=c)&&(e.__e=u,e.__h=!!s,c[c.indexOf(u)]=null),r.__e(t,e,n)}}function C(t,e){r.__c&&r.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){r.__e(t,e.__v)}}))}function I(t,e,n,r,o,i,c,a){var u,f,p,d,v=n.props,y=e.props,g=e.type,b=0;if("svg"===g&&(o=!0),null!=i)for(;b<i.length;b++)if((u=i[b])&&(u===t||(g?u.localName==g:3==u.nodeType))){t=u,i[b]=null;break}if(null==t){if(null===g)return document.createTextNode(y);t=o?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,y.is&&y),i=null,a=!1}if(null===g)v===y||a&&t.data===y||(t.data=y);else{if(i=i&&l.slice.call(t.childNodes),f=(v=n.props||s).dangerouslySetInnerHTML,p=y.dangerouslySetInnerHTML,!a){if(null!=i)for(v={},d=0;d<t.attributes.length;d++)v[t.attributes[d].name]=t.attributes[d].value;(p||f)&&(p&&(f&&p.__html==f.__html||p.__html===t.innerHTML)||(t.innerHTML=p&&p.__html||""))}if(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||T(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||T(t,i,e[i],n[i],r)}(t,y,v,o,a),p)e.__k=[];else if(b=e.props.children,S(t,Array.isArray(b)?b:[b],e,n,r,o&&"foreignObject"!==g,i,c,t.firstChild,a),null!=i)for(b=i.length;b--;)null!=i[b]&&h(i[b]);a||("value"in y&&void 0!==(b=y.value)&&(b!==t.value||"progress"===g&&!b)&&T(t,"value",b,v.value,!1),"checked"in y&&void 0!==(b=y.checked)&&b!==t.checked&&T(t,"checked",b,v.checked,!1))}return t}function N(t,e,n){try{"function"==typeof t?t(e):t.current=e}catch(t){r.__e(t,n)}}function D(t,e,n){var o,i,c;if(r.unmount&&r.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||N(o,null,e)),n||"function"==typeof t.type||(n=null!=(i=t.__e)),t.__e=t.__d=void 0,null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){r.__e(t,e)}o.base=o.__P=null}if(o=t.__k)for(c=0;c<o.length;c++)o[c]&&D(o[c],e,n);null!=i&&h(i)}function L(t,e,n){return this.constructor(t,n)}function M(t,e,n){var o,i,c;r.__&&r.__(t,e),i=(o="function"==typeof n)?null:n&&n.__k||e.__k,c=[],R(e,t=(!o&&n||e).__k=d(g,null,[t]),i||s,s,void 0!==e.ownerSVGElement,!o&&n?[n]:i?null:e.firstChild?l.slice.call(e.childNodes):null,c,!o&&n?n:i?i.__e:e.firstChild,o),C(c,t)}function F(t,e){M(t,e,F)}function z(t,e,n){var r,o,i,c=arguments,a=p({},t.props);for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:a[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(c[i]);return null!=n&&(a.children=n),v(t.type,a,r||t.key,o||t.ref,null)}function U(t,e){var n={__c:e="__cC"+u++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t){var n,r;return this.getChildContext||(n=[],(r={})[e]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&n.some(x)},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return n.Provider.__=n.Consumer.contextType=n}r={__e:function(t,e){for(var n,r,o;e=e.__;)if((n=e.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(t)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(t),o=n.__d),o)return n.__E=n}catch(e){t=e}throw t},__v:0},o=function(t){return null!=t&&void 0===t.constructor},b.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof t&&(t=t(p({},n),this.props)),t&&p(n,t),null!=t&&this.__v&&(e&&this.__h.push(e),x(this))},b.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),x(this))},b.prototype.render=g,i=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,j.__r=0,u=0},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){"use strict";var r=n(114),o="object"==typeof self&&self&&self.Object===Object&&self,i=r.a||o||Function("return this")();e.a=i},function(t,e,n){"use strict";var r=n(21).a.Symbol;e.a=r},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r,o,i,c=n(122),a=n(1),u=n(5),s=n(9),l=n(6),f=n(48),p=n(28),h=n(29),d=a.WeakMap;if(c){var v=f.state||(f.state=new d),y=v.get,g=v.has,b=v.set;r=function(t,e){return e.facade=t,b.call(v,t,e),e},o=function(t){return y.call(v,t)||{}},i=function(t){return g.call(v,t)}}else{var _=p("state");h[_]=!0,r=function(t,e){return e.facade=t,s(t,_,e),e},o=function(t){return l(t,_)?t[_]:{}},i=function(t){return l(t,_)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e){t.exports={}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(33),o=n(49),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){t.exports={}},function(t,e,n){var r=n(20),o=n(1);t.exports="process"==r(o.process)},function(t,e,n){var r,o=n(4),i=n(124),c=n(51),a=n(29),u=n(77),s=n(45),l=n(28),f=l("IE_PROTO"),p=function(){},h=function(t){return"<script>"+t+"<\/script>"},d=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=r?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=s("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var n=c.length;n--;)delete d.prototype[c[n]];return d()};a[f]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[f]=t):n=d(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(7).f,o=n(6),i=n(0)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(18),o=n(48);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.10.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(35),o=n(36),i=n(12),c=n(11),a=n(90),u=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,l=4==t,f=6==t,p=7==t,h=5==t||f;return function(d,v,y,g){for(var b,_,m=i(d),x=o(m),j=r(v,y,3),S=c(x.length),O=0,w=g||a,k=e?w(d,S):n||p?w(d,0):void 0;S>O;O++)if((h||O in x)&&(_=j(b=x[O],O,m),t))if(e)k[O]=_;else if(_)switch(t){case 3:return!0;case 5:return b;case 6:return O;case 2:u.call(k,b)}else switch(t){case 4:return!1;case 7:u.call(k,b)}return f?-1:s||l?l:k}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterOut:s(7)}},function(t,e,n){var r=n(15);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(2),o=n(20),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r,o,i=n(1),c=n(53),a=i.process,u=a&&a.versions,s=u&&u.v8;s?o=(r=s.split("."))[0]+r[1]:c&&(!(r=c.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=c.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){"use strict";e.a=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";var r=n(22),o=Object.prototype,i=o.hasOwnProperty,c=o.toString,a=r.a?r.a.toStringTag:void 0;var u=function(t){var e=i.call(t,a),n=t[a];try{t[a]=void 0;var r=!0}catch(t){}var o=c.call(t);return r&&(e?t[a]=n:delete t[a]),o},s=Object.prototype.toString;var l=function(t){return s.call(t)},f="[object Null]",p="[object Undefined]",h=r.a?r.a.toStringTag:void 0;e.a=function(t){return null==t?void 0===t?p:f:h&&h in Object(t)?u(t):l(t)}},function(t,e,n){var r=n(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(2),o=n(0),i=n(37),c=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[c]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){"use strict";var r=Array.isArray;e.a=r},function(t,e,n){var r=n(74),o=n(51);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(10),o=n(98),i=n(25),c=n(24),a=n(86),u=c.set,s=c.getterFor("Array Iterator");t.exports=a(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=s(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,n){var r=n(1),o=n(5),i=r.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},function(t,e,n){var r=n(1),o=n(9);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(48),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(1),o=n(46),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(74),o=n(51).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(30),o=n(37),i=n(2);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},function(t,e,n){var r=n(14);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r=n(6),o=n(12),i=n(28),c=n(78),a=i("IE_PROTO"),u=Object.prototype;t.exports=c?Object.getPrototypeOf:function(t){return t=o(t),r(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(56),o=n(13),i=n(127);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){var r={};r[n(0)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){"use strict";var r=n(27),o=n(7),i=n(23);t.exports=function(t,e,n){var c=r(e);c in t?o.f(t,c,i(0,n)):t[c]=n}},function(t,e,n){"use strict";var r,o=n(148),i=n(21).a["__core-js_shared__"],c=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";var a=function(t){return!!c&&c in t},u=n(61),s=n(101),l=/^\[object .+?Constructor\]$/,f=Function.prototype,p=Object.prototype,h=f.toString,d=p.hasOwnProperty,v=RegExp("^"+h.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var y=function(t){return!(!Object(u.a)(t)||a(t))&&(Object(o.a)(t)?v:l).test(Object(s.a)(t))};var g=function(t,e){return null==t?void 0:t[e]};e.a=function(t,e){var n=g(t,e);return y(n)?n:void 0}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";e.a=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},,function(t,e,n){"use strict";var r,o,i=n(123),c=n(103),a=n(33),u=RegExp.prototype.exec,s=a("native-string-replace",String.prototype.replace),l=u,f=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),p=c.UNSUPPORTED_Y||c.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(f||h||p)&&(l=function(t){var e,n,r,o,c=this,a=p&&c.sticky,l=i.call(c),d=c.source,v=0,y=t;return a&&(-1===(l=l.replace("y","")).indexOf("g")&&(l+="g"),y=String(t).slice(c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&"\n"!==t[c.lastIndex-1])&&(d="(?: "+d+")",y=" "+y,v++),n=new RegExp("^(?:"+d+")",l)),h&&(n=new RegExp("^"+d+"$(?!\\s)",l)),f&&(e=c.lastIndex),r=u.call(a?n:c,y),a?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=c.lastIndex,c.lastIndex+=r[0].length):c.lastIndex=0:f&&r&&(c.lastIndex=c.global?r.index+r[0].length:e),h&&r&&r.length>1&&s.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=l},function(t,e,n){var r=n(26),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){"use strict";var r=n(3),o=n(1),i=n(14),c=n(18),a=n(8),u=n(52),s=n(76),l=n(2),f=n(6),p=n(40),h=n(5),d=n(4),v=n(12),y=n(10),g=n(27),b=n(23),_=n(31),m=n(43),x=n(50),j=n(138),S=n(60),O=n(16),w=n(7),k=n(59),E=n(9),T=n(13),P=n(33),A=n(28),R=n(29),C=n(49),I=n(0),N=n(84),D=n(85),L=n(32),M=n(24),F=n(34).forEach,z=A("hidden"),U=I("toPrimitive"),K=M.set,W=M.getterFor("Symbol"),$=Object.prototype,B=o.Symbol,G=i("JSON","stringify"),V=O.f,Y=w.f,H=j.f,J=k.f,q=P("symbols"),X=P("op-symbols"),Z=P("string-to-symbol-registry"),Q=P("symbol-to-string-registry"),tt=P("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=a&&l((function(){return 7!=_(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=V($,e);r&&delete $[e],Y(t,e,n),r&&t!==$&&Y($,e,r)}:Y,ot=function(t,e){var n=q[t]=_(B.prototype);return K(n,{type:"Symbol",tag:t,description:e}),a||(n.description=e),n},it=s?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof B},ct=function(t,e,n){t===$&&ct(X,e,n),d(t);var r=g(e,!0);return d(n),f(q,r)?(n.enumerable?(f(t,z)&&t[z][r]&&(t[z][r]=!1),n=_(n,{enumerable:b(0,!1)})):(f(t,z)||Y(t,z,b(1,{})),t[z][r]=!0),rt(t,r,n)):Y(t,r,n)},at=function(t,e){d(t);var n=y(e),r=m(n).concat(ft(n));return F(r,(function(e){a&&!ut.call(n,e)||ct(t,e,n[e])})),t},ut=function(t){var e=g(t,!0),n=J.call(this,e);return!(this===$&&f(q,e)&&!f(X,e))&&(!(n||!f(this,e)||!f(q,e)||f(this,z)&&this[z][e])||n)},st=function(t,e){var n=y(t),r=g(e,!0);if(n!==$||!f(q,r)||f(X,r)){var o=V(n,r);return!o||!f(q,r)||f(n,z)&&n[z][r]||(o.enumerable=!0),o}},lt=function(t){var e=H(y(t)),n=[];return F(e,(function(t){f(q,t)||f(R,t)||n.push(t)})),n},ft=function(t){var e=t===$,n=H(e?X:y(t)),r=[];return F(n,(function(t){!f(q,t)||e&&!f($,t)||r.push(q[t])})),r};(u||(T((B=function(){if(this instanceof B)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=C(t),n=function(t){this===$&&n.call(X,t),f(this,z)&&f(this[z],e)&&(this[z][e]=!1),rt(this,e,b(1,t))};return a&&nt&&rt($,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return W(this).tag})),T(B,"withoutSetter",(function(t){return ot(C(t),t)})),k.f=ut,w.f=ct,O.f=st,x.f=j.f=lt,S.f=ft,N.f=function(t){return ot(I(t),t)},a&&(Y(B.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),c||T($,"propertyIsEnumerable",ut,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:B}),F(m(tt),(function(t){D(t)})),r({target:"Symbol",stat:!0,forced:!u},{for:function(t){var e=String(t);if(f(Z,e))return Z[e];var n=B(e);return Z[e]=n,Q[n]=e,n},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(f(Q,t))return Q[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!a},{create:function(t,e){return void 0===e?_(t):at(_(t),e)},defineProperty:ct,defineProperties:at,getOwnPropertyDescriptor:st}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:lt,getOwnPropertySymbols:ft}),r({target:"Object",stat:!0,forced:l((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(v(t))}}),G)&&r({target:"JSON",stat:!0,forced:!u||l((function(){var t=B();return"[null]"!=G([t])||"{}"!=G({a:t})||"{}"!=G(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(h(e)||void 0!==t)&&!it(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!it(e))return e}),o[1]=e,G.apply(null,o)}});B.prototype[U]||E(B.prototype,U,B.prototype.valueOf),L(B,"Symbol"),R[z]=!0},function(t,e,n){"use strict";var r=n(3),o=n(8),i=n(1),c=n(6),a=n(5),u=n(7).f,s=n(72),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};s(p,l);var h=p.prototype=l.prototype;h.constructor=p;var d=h.toString,v="Symbol(test)"==String(l("test")),y=/^Symbol\((.*)\)[^)]+$/;u(h,"description",{configurable:!0,get:function(){var t=a(this)?this.valueOf():this,e=d.call(t);if(c(f,t))return"";var n=v?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:p})}},function(t,e,n){n(85)("iterator")},function(t,e,n){"use strict";var r=n(89).charAt,o=n(24),i=n(86),c=o.set,a=o.getterFor("String Iterator");i(String,"String",(function(t){c(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=a(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(1),o=n(99),i=n(44),c=n(9),a=n(0),u=a("iterator"),s=a("toStringTag"),l=i.values;for(var f in o){var p=r[f],h=p&&p.prototype;if(h){if(h[u]!==l)try{c(h,u,l)}catch(t){h[u]=l}if(h[s]||c(h,s,f),o[f])for(var d in i)if(h[d]!==i[d])try{c(h,d,i[d])}catch(t){h[d]=i[d]}}}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(8),o=n(2),i=n(45);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(6),o=n(102),i=n(16),c=n(7);t.exports=function(t,e){for(var n=o(e),a=c.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(t,l)||a(t,l,u(e,l))}}},function(t,e,n){var r=n(1);t.exports=r},function(t,e,n){var r=n(6),o=n(10),i=n(115).indexOf,c=n(29);t.exports=function(t,e){var n,a=o(t),u=0,s=[];for(n in a)!r(c,n)&&r(a,n)&&s.push(n);for(;e.length>u;)r(a,n=e[u++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(2),o=/#|\.prototype\./,i=function(t,e){var n=a[c(t)];return n==s||n!=u&&("function"==typeof e?r(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},a=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(52);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(14);t.exports=r("document","documentElement")},function(t,e,n){var r=n(2);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(56),o=n(20),i=n(0)("toStringTag"),c="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:c?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){"use strict";var r,o,i,c,a=n(3),u=n(18),s=n(1),l=n(14),f=n(128),p=n(13),h=n(129),d=n(32),v=n(130),y=n(5),g=n(15),b=n(131),_=n(47),m=n(132),x=n(94),j=n(95),S=n(81).set,O=n(133),w=n(135),k=n(136),E=n(83),T=n(137),P=n(24),A=n(75),R=n(0),C=n(30),I=n(37),N=R("species"),D="Promise",L=P.get,M=P.set,F=P.getterFor(D),z=f,U=s.TypeError,K=s.document,W=s.process,$=l("fetch"),B=E.f,G=B,V=!!(K&&K.createEvent&&s.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,H=A(D,(function(){if(!(_(z)!==String(z))){if(66===I)return!0;if(!C&&!Y)return!0}if(u&&!z.prototype.finally)return!0;if(I>=51&&/native code/.test(z))return!1;var t=z.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[N]=e,!(t.then((function(){}))instanceof e)})),J=H||!x((function(t){z.all(t).catch((function(){}))})),q=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;O((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var c,a,u,s=n[i++],l=o?s.ok:s.fail,f=s.resolve,p=s.reject,h=s.domain;try{l?(o||(2===t.rejection&&et(t),t.rejection=1),!0===l?c=r:(h&&h.enter(),c=l(r),h&&(h.exit(),u=!0)),c===s.promise?p(U("Promise-chain cycle")):(a=q(c))?a.call(c,f,p):f(c)):p(r)}catch(t){h&&!u&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&Q(t)}))}},Z=function(t,e,n){var r,o;V?((r=K.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},!Y&&(o=s["on"+t])?o(r):"unhandledrejection"===t&&k("Unhandled promise rejection",n)},Q=function(t){S.call(s,(function(){var e,n=t.facade,r=t.value;if(tt(t)&&(e=T((function(){C?W.emit("unhandledRejection",r,n):Z("unhandledrejection",n,r)})),t.rejection=C||tt(t)?2:1,e.error))throw e.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){S.call(s,(function(){var e=t.facade;C?W.emit("rejectionHandled",e):Z("rejectionhandled",e,t.value)}))},nt=function(t,e,n){return function(r){t(e,r,n)}},rt=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,X(t,!0))},ot=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U("Promise can't be resolved itself");var r=q(e);r?O((function(){var n={done:!1};try{r.call(e,nt(ot,n,t),nt(rt,n,t))}catch(e){rt(n,e,t)}})):(t.value=e,t.state=1,X(t,!1))}catch(e){rt({done:!1},e,t)}}};H&&(z=function(t){b(this,z,D),g(t),r.call(this);var e=L(this);try{t(nt(ot,e),nt(rt,e))}catch(t){rt(e,t)}},(r=function(t){M(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(z.prototype,{then:function(t,e){var n=F(this),r=B(j(this,z));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=C?W.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=L(t);this.promise=t,this.resolve=nt(ot,e),this.reject=nt(rt,e)},E.f=B=function(t){return t===z||t===i?new o(t):G(t)},u||"function"!=typeof f||(c=f.prototype.then,p(f.prototype,"then",(function(t,e){var n=this;return new z((function(t,e){c.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof $&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return w(z,$.apply(s,arguments))}}))),a({global:!0,wrap:!0,forced:H},{Promise:z}),d(z,D,!1,!0),v(D),i=l(D),a({target:D,stat:!0,forced:H},{reject:function(t){var e=B(this);return e.reject.call(void 0,t),e.promise}}),a({target:D,stat:!0,forced:u||H},{resolve:function(t){return w(u&&this===i?z:this,t)}}),a({target:D,stat:!0,forced:J},{all:function(t){var e=this,n=B(e),r=n.resolve,o=n.reject,i=T((function(){var n=g(e.resolve),i=[],c=0,a=1;m(t,(function(t){var u=c++,s=!1;i.push(void 0),a++,n.call(e,t).then((function(t){s||(s=!0,i[u]=t,--a||r(i))}),o)})),--a||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=B(e),r=n.reject,o=T((function(){var o=g(e.resolve);m(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r,o,i,c=n(1),a=n(2),u=n(35),s=n(77),l=n(45),f=n(82),p=n(30),h=c.location,d=c.setImmediate,v=c.clearImmediate,y=c.process,g=c.MessageChannel,b=c.Dispatch,_=0,m={},x=function(t){if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},j=function(t){return function(){x(t)}},S=function(t){x(t.data)},O=function(t){c.postMessage(t+"",h.protocol+"//"+h.host)};d&&v||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++_]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(_),_},v=function(t){delete m[t]},p?r=function(t){y.nextTick(j(t))}:b&&b.now?r=function(t){b.now(j(t))}:g&&!f?(i=(o=new g).port2,o.port1.onmessage=S,r=u(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts&&h&&"file:"!==h.protocol&&!a(O)?(r=O,c.addEventListener("message",S,!1)):r="onreadystatechange"in l("script")?function(t){s.appendChild(l("script")).onreadystatechange=function(){s.removeChild(this),x(t)}}:function(t){setTimeout(j(t),0)}),t.exports={set:d,clear:v}},function(t,e,n){var r=n(53);t.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){"use strict";var r=n(15),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){var r=n(0);e.f=r},function(t,e,n){var r=n(73),o=n(6),i=n(84),c=n(7).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||c(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(3),o=n(139),i=n(54),c=n(140),a=n(32),u=n(9),s=n(13),l=n(0),f=n(18),p=n(25),h=n(87),d=h.IteratorPrototype,v=h.BUGGY_SAFARI_ITERATORS,y=l("iterator"),g=function(){return this};t.exports=function(t,e,n,l,h,b,_){o(n,e,l);var m,x,j,S=function(t){if(t===h&&T)return T;if(!v&&t in k)return k[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},O=e+" Iterator",w=!1,k=t.prototype,E=k[y]||k["@@iterator"]||h&&k[h],T=!v&&E||S(h),P="Array"==e&&k.entries||E;if(P&&(m=i(P.call(new t)),d!==Object.prototype&&m.next&&(f||i(m)===d||(c?c(m,d):"function"!=typeof m[y]&&u(m,y,g)),a(m,O,!0,!0),f&&(p[O]=g))),"values"==h&&E&&"values"!==E.name&&(w=!0,T=function(){return E.call(this)}),f&&!_||k[y]===T||u(k,y,T),p[e]=T,h)if(x={values:S("values"),keys:b?T:S("keys"),entries:S("entries")},_)for(j in x)!v&&!w&&j in k||s(k,j,x[j]);else r({target:e,proto:!0,forced:v||w},x);return x}},function(t,e,n){"use strict";var r,o,i,c=n(2),a=n(54),u=n(9),s=n(6),l=n(0),f=n(18),p=l("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(r=o):h=!0);var d=null==r||c((function(){var t={};return r[p].call(t)!==t}));d&&(r={}),f&&!d||s(r,p)||u(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"c",(function(){return o})),n.d(e,"a",(function(){return c}));n(147),n(55),n(80),n(97),n(143),n(120),n(154);function r(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.join("/").replace(/\/{2,}/,"/")}function o(t,e){if(!t||!e)return t;for(;t.startsWith(e);)t=t.substring(e.length);return t}function i(t,e){var n=document.createElement("script");n.type="text/javascript",n.integrity=e,n.crossOrigin="anonymous",n.src=t,$("head").append(n)}function c(){var t,e,n;t="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css",e="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T",(n=document.createElement("link")).rel="stylesheet",n.href=t,n.integrity=e,n.crossOrigin="anonymous",$("head").append(n),i("https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js","sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"),i("https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js","sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM")}String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return this.substr(!e||e<0?0:+e,t.length)===t})},function(t,e,n){var r=n(26),o=n(17),i=function(t){return function(e,n){var i,c,a=String(o(e)),u=r(n),s=a.length;return u<0||u>=s?t?"":void 0:(i=a.charCodeAt(u))<55296||i>56319||u+1===s||(c=a.charCodeAt(u+1))<56320||c>57343?t?a.charAt(u):i:t?a.slice(u,u+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){var r=n(5),o=n(40),i=n(0)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(0),o=n(25),i=r("iterator"),c=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||c[i]===t)}},function(t,e,n){var r=n(79),o=n(25),i=n(0)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(4);t.exports=function(t){var e=t.return;if(void 0!==e)return r(e.call(t)).value}},function(t,e,n){var r=n(0)("iterator"),o=!1;try{var i=0,c={next:function(){return{done:!!i++}},return:function(){o=!0}};c[r]=function(){return this},Array.from(c,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(15),i=n(0)("species");t.exports=function(t,e){var n,c=r(t).constructor;return void 0===c||null==(n=r(c)[i])?e:o(n)}},,function(t,e,n){"use strict";var r=n(3),o=n(63);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,n){var r=n(0),o=n(31),i=n(7),c=r("unscopables"),a=Array.prototype;null==a[c]&&i.f(a,c,{configurable:!0,value:o(null)}),t.exports=function(t){a[c][t]=!0}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},,function(t,e,n){"use strict";var r=Function.prototype.toString;e.a=function(t){if(null!=t){try{return r.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(14),o=n(50),i=n(60),c=n(4);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(c(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){"use strict";var r=n(2);function o(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,n){"use strict";n(97);var r=n(13),o=n(2),i=n(0),c=n(9),a=i("species"),u=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),s="$0"==="a".replace(/./,"$0"),l=i("replace"),f=!!/./[l]&&""===/./[l]("a","$0"),p=!o((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,l){var h=i(t),d=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),v=d&&!o((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[a]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return e=!0,null},n[h](""),!e}));if(!d||!v||"replace"===t&&(!u||!s||f)||"split"===t&&!p){var y=/./[h],g=n(h,""[t],(function(t,e,n,r,o){return e.exec===RegExp.prototype.exec?d&&!o?{done:!0,value:y.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:s,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:f}),b=g[0],_=g[1];r(String.prototype,t,b),r(RegExp.prototype,h,2==e?function(t,e){return _.call(t,this,e)}:function(t){return _.call(t,this)})}l&&c(RegExp.prototype[h],"sham",!0)}},function(t,e,n){"use strict";var r=n(89).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r=n(20),o=n(63);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){var r=n(5),o=n(20),i=n(0)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(3),o=n(2),i=n(12),c=n(54),a=n(78);r({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!a},{getPrototypeOf:function(t){return c(i(t))}})},function(t,e,n){var r=n(3),o=n(14),i=n(15),c=n(4),a=n(5),u=n(31),s=n(126),l=n(2),f=o("Reflect","construct"),p=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),h=!l((function(){f((function(){}))})),d=p||h;r({target:"Reflect",stat:!0,forced:d,sham:d},{construct:function(t,e){i(t),c(e);var n=arguments.length<3?t:i(arguments[2]);if(h&&!p)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(s.apply(t,r))}var o=n.prototype,l=u(a(o)?o:Object.prototype),d=Function.apply.call(t,l,e);return a(d)?d:l}})},function(t,e,n){"use strict";var r=function(){this.__data__=[],this.size=0},o=n(149);var i=function(t,e){for(var n=t.length;n--;)if(Object(o.a)(t[n][0],e))return n;return-1},c=Array.prototype.splice;var a=function(t){var e=this.__data__,n=i(e,t);return!(n<0)&&(n==e.length-1?e.pop():c.call(e,n,1),--this.size,!0)};var u=function(t){var e=this.__data__,n=i(e,t);return n<0?void 0:e[n][1]};var s=function(t){return i(this.__data__,t)>-1};var l=function(t,e){var n=this.__data__,r=i(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this};function f(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}f.prototype.clear=r,f.prototype.delete=a,f.prototype.get=u,f.prototype.has=s,f.prototype.set=l;e.a=f},function(t,e,n){"use strict";var r=n(58),o=n(21),i=Object(r.a)(o.a,"Map");e.a=i},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},,function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(this,n(70))},function(t,e,n){var r=n(10),o=n(11),i=n(64),c=function(t){return function(e,n,c){var a,u=r(e),s=o(u.length),l=i(c,s);if(t&&n!=n){for(;s>l;)if((a=u[l++])!=a)return!0}else for(;s>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},function(t,e,n){"use strict";var r=n(3),o=n(34).filter;r({target:"Array",proto:!0,forced:!n(41)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(3),o=n(152);r({target:"Array",stat:!0,forced:!n(94)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(3),o=n(5),i=n(40),c=n(64),a=n(11),u=n(10),s=n(57),l=n(0),f=n(41)("slice"),p=l("species"),h=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,e){var n,r,l,f=u(this),v=a(f.length),y=c(t,v),g=c(void 0===e?v:e,v);if(i(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[p])&&(n=void 0):n=void 0,n===Array||void 0===n))return h.call(f,y,g);for(r=new(void 0===n?Array:n)(d(g-y,0)),l=0;y<g;y++,l++)y in f&&s(r,l,f[y]);return r.length=l,r}})},function(t,e,n){var r=n(8),o=n(7).f,i=Function.prototype,c=i.toString,a=/^\s*function ([^ (]*)/;!r||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return c.call(this).match(a)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(3),o=n(36),i=n(10),c=n(112),a=[].join,u=o!=Object,s=c("join",",");r({target:"Array",proto:!0,forced:u||!s},{join:function(t){return a.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(58),o=Object(r.a)(Object,"create");var i=function(){this.__data__=o?o(null):{},this.size=0};var c=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},a="__lodash_hash_undefined__",u=Object.prototype.hasOwnProperty;var s=function(t){var e=this.__data__;if(o){var n=e[t];return n===a?void 0:n}return u.call(e,t)?e[t]:void 0},l=Object.prototype.hasOwnProperty;var f=function(t){var e=this.__data__;return o?void 0!==e[t]:l.call(e,t)},p="__lodash_hash_undefined__";var h=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=o&&void 0===e?p:e,this};function d(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}d.prototype.clear=i,d.prototype.delete=c,d.prototype.get=s,d.prototype.has=f,d.prototype.set=h;var v=d,y=n(110),g=n(111);var b=function(){this.size=0,this.__data__={hash:new v,map:new(g.a||y.a),string:new v}};var _=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t};var m=function(t,e){var n=t.__data__;return _(e)?n["string"==typeof e?"string":"hash"]:n.map};var x=function(t){var e=m(this,t).delete(t);return this.size-=e?1:0,e};var j=function(t){return m(this,t).get(t)};var S=function(t){return m(this,t).has(t)};var O=function(t,e){var n=m(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this};function w(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}w.prototype.clear=b,w.prototype.delete=x,w.prototype.get=j,w.prototype.has=S,w.prototype.set=O;e.a=w},function(t,e,n){var r=n(1),o=n(47),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(8),o=n(7),i=n(4),c=n(43);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=c(e),a=r.length,u=0;a>u;)o.f(t,n=r[u++],e[n]);return t}},function(t,e,n){var r=n(3),o=n(162);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(t,e,n){"use strict";var r=n(15),o=n(5),i=[].slice,c={},a=function(t,e,n){if(!(e in c)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";c[e]=Function("C,a","return new C("+r.join(",")+")")}return c[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=i.call(arguments,1),c=function(){var r=n.concat(i.call(arguments));return this instanceof c?a(e,r.length,r):e.apply(t,r)};return o(e.prototype)&&(c.prototype=e.prototype),c}},function(t,e,n){"use strict";var r=n(56),o=n(79);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(13);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(14),o=n(7),i=n(0),c=n(8),a=i("species");t.exports=function(t){var e=r(t),n=o.f;c&&e&&!e[a]&&n(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(4),o=n(91),i=n(11),c=n(35),a=n(92),u=n(93),s=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var l,f,p,h,d,v,y,g=n&&n.that,b=!(!n||!n.AS_ENTRIES),_=!(!n||!n.IS_ITERATOR),m=!(!n||!n.INTERRUPTED),x=c(e,g,1+b+m),j=function(t){return l&&u(l),new s(!0,t)},S=function(t){return b?(r(t),m?x(t[0],t[1],j):x(t[0],t[1])):m?x(t,j):x(t)};if(_)l=t;else{if("function"!=typeof(f=a(t)))throw TypeError("Target is not iterable");if(o(f)){for(p=0,h=i(t.length);h>p;p++)if((d=S(t[p]))&&d instanceof s)return d;return new s(!1)}l=f.call(t)}for(v=l.next;!(y=v.call(l)).done;){try{d=S(y.value)}catch(t){throw u(l),t}if("object"==typeof d&&d&&d instanceof s)return d}return new s(!1)}},function(t,e,n){var r,o,i,c,a,u,s,l,f=n(1),p=n(16).f,h=n(81).set,d=n(82),v=n(134),y=n(30),g=f.MutationObserver||f.WebKitMutationObserver,b=f.document,_=f.process,m=f.Promise,x=p(f,"queueMicrotask"),j=x&&x.value;j||(r=function(){var t,e;for(y&&(t=_.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?c():i=void 0,t}}i=void 0,t&&t.enter()},d||y||v||!g||!b?m&&m.resolve?(s=m.resolve(void 0),l=s.then,c=function(){l.call(s,r)}):c=y?function(){_.nextTick(r)}:function(){h.call(f,r)}:(a=!0,u=b.createTextNode(""),new g(r).observe(u,{characterData:!0}),c=function(){u.data=a=!a})),t.exports=j||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,c()),i=e}},function(t,e,n){var r=n(53);t.exports=/web0s(?!.*chrome)/i.test(r)},function(t,e,n){var r=n(4),o=n(5),i=n(83);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(1);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=n(10),o=n(50).f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return c.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(87).IteratorPrototype,o=n(31),i=n(23),c=n(32),a=n(25),u=function(){return this};t.exports=function(t,e,n){var s=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),c(t,s,!1,!0),a[s]=u,t}},function(t,e,n){var r=n(4),o=n(141);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),c=new T(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var c=n.delegate;if(c){var a=w(c,n);if(a){if(a===v)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=l(t,e,n);if("normal"===u.type){if(r=n.done?d:p,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,c),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={};function y(){}function g(){}function b(){}var _={};_[i]=function(){return this};var m=Object.getPrototypeOf,x=m&&m(m(P([])));x&&x!==n&&r.call(x,i)&&(_=x);var j=b.prototype=y.prototype=Object.create(_);function S(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function O(t,e){var n;this._invoke=function(o,i){function c(){return new e((function(n,c){!function n(o,i,c,a){var u=l(t[o],t,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,c,a)}),(function(t){n("throw",t,c,a)})):e.resolve(f).then((function(t){s.value=t,c(s)}),(function(t){return n("throw",t,c,a)}))}a(u.arg)}(o,i,n,c)}))}return n=n?n.then(c,c):c()}}function w(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,w(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function P(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,c=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return c.next=c}}return{next:A}}function A(){return{value:e,done:!0}}return g.prototype=j.constructor=b,b.constructor=g,g.displayName=u(b,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,u(t,a,"GeneratorFunction")),t.prototype=Object.create(j),t},t.awrap=function(t){return{__await:t}},S(O.prototype),O.prototype[c]=function(){return this},t.AsyncIterator=O,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var c=new O(s(e,n,r,o),i);return t.isGeneratorFunction(n)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},S(j),u(j,a,"Generator"),j[i]=function(){return this},j.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return a.type="throw",a.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var u=r.call(c,"catchLoc"),s=r.call(c,"finallyLoc");if(u&&s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";var r=n(104),o=n(4),i=n(11),c=n(26),a=n(17),u=n(105),s=n(151),l=n(106),f=Math.max,p=Math.min;r("replace",2,(function(t,e,n,r){var h=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=r.REPLACE_KEEPS_$0,v=h?"$":"$0";return[function(n,r){var o=a(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):e.call(String(o),n,r)},function(t,r){if(!h&&d||"string"==typeof r&&-1===r.indexOf(v)){var a=n(e,t,this,r);if(a.done)return a.value}var y=o(t),g=String(this),b="function"==typeof r;b||(r=String(r));var _=y.global;if(_){var m=y.unicode;y.lastIndex=0}for(var x=[];;){var j=l(y,g);if(null===j)break;if(x.push(j),!_)break;""===String(j[0])&&(y.lastIndex=u(g,i(y.lastIndex),m))}for(var S,O="",w=0,k=0;k<x.length;k++){j=x[k];for(var E=String(j[0]),T=f(p(c(j.index),g.length),0),P=[],A=1;A<j.length;A++)P.push(void 0===(S=j[A])?S:String(S));var R=j.groups;if(b){var C=[E].concat(P,T,g);void 0!==R&&C.push(R);var I=String(r.apply(void 0,C))}else I=s(E,g,T,P,R,r);T>=w&&(O+=g.slice(w,T)+I,w=T+E.length)}return O+g.slice(w)}]}))},function(t,e,n){var r=n(107);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,n){var r=n(0)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},,function(t,e,n){"use strict";var r,o=n(3),i=n(16).f,c=n(11),a=n(144),u=n(17),s=n(145),l=n(18),f="".startsWith,p=Math.min,h=s("startsWith");o({target:"String",proto:!0,forced:!!(l||h||(r=i(String.prototype,"startsWith"),!r||r.writable))&&!h},{startsWith:function(t){var e=String(u(this));a(t);var n=c(p(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return f?f.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";var r=n(39),o=n(61),i="[object AsyncFunction]",c="[object Function]",a="[object GeneratorFunction]",u="[object Proxy]";e.a=function(t){if(!Object(o.a)(t))return!1;var e=Object(r.a)(t);return e==c||e==a||e==i||e==u}},function(t,e,n){"use strict";e.a=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){"use strict";var r=9007199254740991;e.a=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=r}},function(t,e,n){var r=n(12),o=Math.floor,i="".replace,c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,a=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,n,u,s,l){var f=n+t.length,p=u.length,h=a;return void 0!==s&&(s=r(s),h=c),i.call(l,h,(function(r,i){var c;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(f);case"<":c=s[i.slice(1,-1)];break;default:var a=+i;if(0===a)return r;if(a>p){var l=o(a/10);return 0===l?r:l<=p?void 0===u[l-1]?i.charAt(1):u[l-1]+i.charAt(1):r}c=u[a-1]}return void 0===c?"":c}))}},function(t,e,n){"use strict";var r=n(35),o=n(12),i=n(153),c=n(91),a=n(11),u=n(57),s=n(92);t.exports=function(t){var e,n,l,f,p,h,d=o(t),v="function"==typeof this?this:Array,y=arguments.length,g=y>1?arguments[1]:void 0,b=void 0!==g,_=s(d),m=0;if(b&&(g=r(g,y>2?arguments[2]:void 0,2)),null==_||v==Array&&c(_))for(n=new v(e=a(d.length));e>m;m++)h=b?g(d[m],m):d[m],u(n,m,h);else for(p=(f=_.call(d)).next,n=new v;!(l=p.call(f)).done;m++)h=b?i(f,g,[l.value,m],!0):l.value,u(n,m,h);return n.length=m,n}},function(t,e,n){var r=n(4),o=n(93);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){throw o(t),e}}},function(t,e,n){"use strict";var r=n(104),o=n(107),i=n(4),c=n(17),a=n(95),u=n(105),s=n(11),l=n(106),f=n(63),p=n(103).UNSUPPORTED_Y,h=[].push,d=Math.min;r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(c(this)),i=void 0===n?4294967295:n>>>0;if(0===i)return[];if(void 0===t)return[r];if(!o(t))return e.call(r,t,i);for(var a,u,s,l=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=new RegExp(t.source,p+"g");(a=f.call(v,r))&&!((u=v.lastIndex)>d&&(l.push(r.slice(d,a.index)),a.length>1&&a.index<r.length&&h.apply(l,a.slice(1)),s=a[0].length,d=u,l.length>=i));)v.lastIndex===a.index&&v.lastIndex++;return d===r.length?!s&&v.test("")||l.push(""):l.push(r.slice(d)),l.length>i?l.slice(0,i):l}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var o=c(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,n):r.call(String(o),e,n)},function(t,o){var c=n(r,t,this,o,r!==e);if(c.done)return c.value;var f=i(t),h=String(this),v=a(f,RegExp),y=f.unicode,g=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(p?"g":"y"),b=new v(p?"^(?:"+f.source+")":f,g),_=void 0===o?4294967295:o>>>0;if(0===_)return[];if(0===h.length)return null===l(b,h)?[h]:[];for(var m=0,x=0,j=[];x<h.length;){b.lastIndex=p?0:x;var S,O=l(b,p?h.slice(x):h);if(null===O||(S=d(s(b.lastIndex+(p?x:0)),h.length))===m)x=u(h,x,y);else{if(j.push(h.slice(m,x)),j.length===_)return j;for(var w=1;w<=O.length-1;w++)if(j.push(O[w]),j.length===_)return j;x=m=S}}return j.push(h.slice(m)),j}]}),p)},,,function(t,e,n){var r=n(1),o=n(99),i=n(163),c=n(9);for(var a in o){var u=r[a],s=u&&u.prototype;if(s&&s.forEach!==i)try{c(s,"forEach",i)}catch(t){s.forEach=i}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));n(142),n(125),n(55),n(80),n(65),n(66),n(67),n(44),n(68),n(69),n(118),n(119),n(117);function r(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,a=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,c=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw c}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n,r,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void n(t)}a.done?e(u):Promise.resolve(u).then(r,o)}function a(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){c(i,r,o,a,u,"next",t)}function u(t){c(i,r,o,a,u,"throw",t)}a(void 0)}))}}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.target=e,this.setTarget=this.setTarget.bind(this)}var e,n,o;return e=t,(n=[{key:"wrap",value:function(t,e,n){n=Object.assign({propagate:!1,preventDefault:!0},n);var o=this;return(a(regeneratorRuntime.mark((function c(){var a,u,s,l,f,p,h,d,v,y,g=arguments;return regeneratorRuntime.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:for(y=function(e){o.target&&o.target.setState(e),t&&t!==o.target&&t.setState(e)},a=g.length,u=new Array(a),s=0;s<a;s++)u[s]=g[s];return l=u[0]&&"object"==i(u[0])&&"preventDefault"in u[0]?u[0]:null,n.preventDefault&&l&&l.preventDefault(),l&&"persist"in l&&l.persist(),y({error:null,wait:!0}),c.prev=6,c.next=9,e.apply(t,u);case 9:return f=c.sent,y({error:null,wait:!1}),c.abrupt("return",f);case 14:c.prev=14,c.t0=c.catch(6),p=Array.isArray(c.t0)?c.t0:[c.t0],d=r(p);try{for(d.s();!(v=d.n()).done;)h=v.value,console.error(h)}catch(t){d.e(t)}finally{d.f()}if("string"==typeof h&&(h=new Error(h)),y({error:h,wait:!1}),!n.propagate){c.next=23;break}throw h;case 23:case"end":return c.stop()}}),c,null,[[6,14]])}))))}},{key:"setTarget",value:function(t){this.target=t}}])&&u(e.prototype,n),o&&u(e,o),t}()},function(t,e,n){"use strict";var r=9007199254740991,o=/^(?:0|[1-9]\d*)$/;e.a=function(t,e){var n=typeof t;return!!(e=null==e?r:e)&&("number"==n||"symbol"!=n&&o.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){"use strict";var r=n(39),o=n(38),i="[object Arguments]";var c=function(t){return Object(o.a)(t)&&Object(r.a)(t)==i},a=Object.prototype,u=a.hasOwnProperty,s=a.propertyIsEnumerable,l=c(function(){return arguments}())?c:function(t){return Object(o.a)(t)&&u.call(t,"callee")&&!s.call(t,"callee")};e.a=l},function(t,e,n){"use strict";var r=n(3),o=n(34).map;r({target:"Array",proto:!0,forced:!n(41)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(8),o=n(2),i=n(43),c=n(60),a=n(59),u=n(12),s=n(36),l=Object.assign,f=Object.defineProperty;t.exports=!l||o((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol();return t[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||"abcdefghijklmnopqrst"!=i(l({},e)).join("")}))?function(t,e){for(var n=u(t),o=arguments.length,l=1,f=c.f,p=a.f;o>l;)for(var h,d=s(arguments[l++]),v=f?i(d).concat(f(d)):i(d),y=v.length,g=0;y>g;)h=v[g++],r&&!p.call(d,h)||(n[h]=d[h]);return n}:l},function(t,e,n){"use strict";var r=n(34).forEach,o=n(112)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(3),o=n(2),i=n(40),c=n(5),a=n(12),u=n(11),s=n(57),l=n(90),f=n(41),p=n(0),h=n(37),d=p("isConcatSpreadable"),v=h>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),y=f("concat"),g=function(t){if(!c(t))return!1;var e=t[d];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!v||!y},{concat:function(t){var e,n,r,o,i,c=a(this),f=l(c,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(i=-1===e?c:arguments[e],g(i)){if(p+(o=u(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&s(f,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(f,p++,i)}return f.length=p,f}})},function(t,e,n){"use strict";(function(t){var r=n(21),o=n(234),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,c=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=c&&c.exports===i?r.a.Buffer:void 0,u=(a?a.isBuffer:void 0)||o.a;e.a=u}).call(this,n(229)(t))},,,,,,function(t,e,n){"use strict";var r=n(3),o=n(64),i=n(26),c=n(11),a=n(12),u=n(90),s=n(57),l=n(41)("splice"),f=Math.max,p=Math.min;r({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var n,r,l,h,d,v,y=a(this),g=c(y.length),b=o(t,g),_=arguments.length;if(0===_?n=r=0:1===_?(n=0,r=g-b):(n=_-2,r=p(f(i(e),0),g-b)),g+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(l=u(y,r),h=0;h<r;h++)(d=b+h)in y&&s(l,h,y[d]);if(l.length=r,n<r){for(h=b;h<g-r;h++)v=h+n,(d=h+r)in y?y[v]=y[d]:delete y[v];for(h=g;h>g-r+n;h--)delete y[h-1]}else if(n>r)for(h=g-r;h>b;h--)v=h+n-1,(d=h+r-1)in y?y[v]=y[d]:delete y[v];for(h=0;h<n;h++)y[h+b]=arguments[h+2];return y.length=g-r+n,l}})},function(t,e,n){"use strict";(function(t){n(125),n(108),n(109),n(65),n(66),n(55),n(67),n(44),n(68),n(69);var r=n(19);n(337);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=l(t);if(e){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?s(t):e}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var f=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(l,e);var n,r,o,u=a(l);function l(t){var e,n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,l),e=u.call(this,t),n=s(e),o=function(){var t;e.props.disableIndividual||e.rollDie(),e.props.onClick&&(t=e.props).onClick.apply(t,arguments)},(r="onClick")in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,e.state={currentValue:t.defaultRoll||6},e.rollDie=e.rollDie.bind(s(e)),e}return n=l,(r=[{key:"getRandomInt",value:function(){var t=Math.ceil(this.props.sides);return Math.floor(Math.random()*t)+1}},{key:"rollDie",value:function(t){var e=this;this.die.className="die",this.die.offsetWidth;var n=t||this.getRandomInt();this.die.classList.add("roll".concat(n)),setTimeout((function(){e.setState({currentValue:n}),e.props.rollDone(n)}),1e3*this.props.rollTime)}},{key:"getValue",value:function(){return this.state.currentValue}},{key:"render",value:function(){var e=this,n={background:this.props.faceColor,outline:this.props.outline?"1px solid ".concat(this.props.outlineColor):"none",height:"".concat(this.props.dieSize,"px"),position:"absolute",width:"".concat(this.props.dieSize,"px")},r={transform:"rotateX(180deg) translateZ(".concat(this.props.dieSize/2,"px)")},o={transform:"rotateY(-90deg) translateZ(".concat(this.props.dieSize/2,"px)")},i={transform:"rotateX(90deg) translateZ(".concat(this.props.dieSize/2,"px)")},c={transform:"rotateX(-90deg) translateZ(".concat(this.props.dieSize/2,"px)")},a={transform:"rotateY(90deg) translateZ(".concat(this.props.dieSize/2,"px)")},u={transform:"rotateY(0deg) translateZ(".concat(this.props.dieSize/2,"px)")},s=this.props.dieSize/6-2,l={background:this.props.dotColor,height:"".concat(s,"px"),width:"".concat(s,"px")},f={top:"".concat(this.props.dieSize/6,"px"),left:"".concat(this.props.dieSize/6,"px")},p={top:"".concat(this.props.dieSize/6,"px"),right:"".concat(this.props.dieSize/6,"px")},h={top:"".concat(this.props.dieSize/2-s/2,"px"),left:"".concat(this.props.dieSize/6,"px")},d={top:"".concat(this.props.dieSize/2-s/2,"px"),left:"".concat(this.props.dieSize/2-s/2,"px")},v={top:"".concat(this.props.dieSize/2-s/2,"px"),right:"".concat(this.props.dieSize/6,"px")},y={bottom:"".concat(this.props.dieSize/6,"px"),left:"".concat(this.props.dieSize/6,"px")},g={bottom:"".concat(this.props.dieSize/6,"px"),right:"".concat(this.props.dieSize/6,"px")},b={animationDuration:"".concat(this.props.rollTime,"s"),height:"".concat(this.props.dieSize,"px"),width:"".concat(this.props.dieSize,"px")},_={margin:"".concat(this.props.margin,"px"),display:"inline-block"};return t("div",{className:"die-container",onClick:this.onClick,style:_},t("div",{className:"die roll".concat(this.getValue()),ref:function(t){return e.die=t},style:b},t("div",{className:"face six",style:Object.assign({},n,u)},t("span",{className:"dot",style:Object.assign({},l,f)}),t("span",{className:"dot",style:Object.assign({},l,p)}),t("span",{className:"dot",style:Object.assign({},l,h)}),t("span",{className:"dot",style:Object.assign({},l,v)}),t("span",{className:"dot",style:Object.assign({},l,y)}),t("span",{className:"dot",style:Object.assign({},l,g)})),t("div",{className:"face one",style:Object.assign({},n,r)},t("span",{className:"dot",style:Object.assign({},l,d)})),t("div",{className:"face five",style:Object.assign({},n,a)},t("span",{className:"dot",style:Object.assign({},l,f)}),t("span",{className:"dot",style:Object.assign({},l,p)}),t("span",{className:"dot",style:Object.assign({},l,d)}),t("span",{className:"dot",style:Object.assign({},l,y)}),t("span",{className:"dot",style:Object.assign({},l,g)})),t("div",{className:"face two",style:Object.assign({},n,o)},t("span",{className:"dot",style:Object.assign({},l,p)}),t("span",{className:"dot",style:Object.assign({},l,y)})),t("div",{className:"face three",style:Object.assign({},n,i)},t("span",{className:"dot",style:Object.assign({},l,p)}),t("span",{className:"dot",style:Object.assign({},l,d)}),t("span",{className:"dot",style:Object.assign({},l,y)})),t("div",{className:"face four",style:Object.assign({},n,c)},t("span",{className:"dot",style:Object.assign({},l,f)}),t("span",{className:"dot",style:Object.assign({},l,p)}),t("span",{className:"dot",style:Object.assign({},l,y)}),t("span",{className:"dot",style:Object.assign({},l,g)}))))}}])&&i(n.prototype,r),o&&i(n,o),l}(r.Component);e.a=f}).call(this,n(19).h)},function(t,e,n){"use strict";n(116),n(183),n(157),n(65),n(66),n(55),n(67),n(44),n(68),n(69),n(117),n(118),n(119);var r=n(110);var o=function(){this.__data__=new r.a,this.size=0};var i=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n};var c=function(t){return this.__data__.get(t)};var a=function(t){return this.__data__.has(t)},u=n(111),s=n(121),l=200;var f=function(t,e){var n=this.__data__;if(n instanceof r.a){var o=n.__data__;if(!u.a||o.length<l-1)return o.push([t,e]),this.size=++n.size,this;n=this.__data__=new s.a(o)}return n.set(t,e),this.size=n.size,this};function p(t){var e=this.__data__=new r.a(t);this.size=e.size}p.prototype.clear=o,p.prototype.delete=i,p.prototype.get=c,p.prototype.has=a,p.prototype.set=f;var h=p,d="__lodash_hash_undefined__";var v=function(t){return this.__data__.set(t,d),this};var y=function(t){return this.__data__.has(t)};function g(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new s.a;++e<n;)this.add(t[e])}g.prototype.add=g.prototype.push=v,g.prototype.has=y;var b=g;var _=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1};var m=function(t,e){return t.has(e)},x=1,j=2;var S=function(t,e,n,r,o,i){var c=n&x,a=t.length,u=e.length;if(a!=u&&!(c&&u>a))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var l=-1,f=!0,p=n&j?new b:void 0;for(i.set(t,e),i.set(e,t);++l<a;){var h=t[l],d=e[l];if(r)var v=c?r(d,h,l,e,t,i):r(h,d,l,t,e,i);if(void 0!==v){if(v)continue;f=!1;break}if(p){if(!_(e,(function(t,e){if(!m(p,e)&&(h===t||o(h,t,n,r,i)))return p.push(e)}))){f=!1;break}}else if(h!==d&&!o(h,d,n,r,i)){f=!1;break}}return i.delete(t),i.delete(e),f},O=n(22),w=n(21),k=w.a.Uint8Array,E=n(149);var T=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n};var P=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n},A=1,R=2,C="[object Boolean]",I="[object Date]",N="[object Error]",D="[object Map]",L="[object Number]",M="[object RegExp]",F="[object Set]",z="[object String]",U="[object Symbol]",K="[object ArrayBuffer]",W="[object DataView]",$=O.a?O.a.prototype:void 0,B=$?$.valueOf:void 0;var G=function(t,e,n,r,o,i,c){switch(n){case W:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case K:return!(t.byteLength!=e.byteLength||!i(new k(t),new k(e)));case C:case I:case L:return Object(E.a)(+t,+e);case N:return t.name==e.name&&t.message==e.message;case M:case z:return t==e+"";case D:var a=T;case F:var u=r&A;if(a||(a=P),t.size!=e.size&&!u)return!1;var s=c.get(t);if(s)return s==e;r|=R,c.set(t,e);var l=S(a(t),a(e),r,o,i,c);return c.delete(t),l;case U:if(B)return B.call(t)==B.call(e)}return!1};var V=function(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t},Y=n(42);var H=function(t,e,n){var r=e(t);return Object(Y.a)(t)?r:V(r,n(t))};var J=function(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var c=t[n];e(c,n,t)&&(i[o++]=c)}return i};var q=function(){return[]},X=Object.prototype.propertyIsEnumerable,Z=Object.getOwnPropertySymbols,Q=Z?function(t){return null==t?[]:(t=Object(t),J(Z(t),(function(e){return X.call(t,e)})))}:q;var tt=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r},et=n(160),nt=n(177),rt=n(159),ot=n(39),it=n(150),ct=n(38),at={};at["[object Float32Array]"]=at["[object Float64Array]"]=at["[object Int8Array]"]=at["[object Int16Array]"]=at["[object Int32Array]"]=at["[object Uint8Array]"]=at["[object Uint8ClampedArray]"]=at["[object Uint16Array]"]=at["[object Uint32Array]"]=!0,at["[object Arguments]"]=at["[object Array]"]=at["[object ArrayBuffer]"]=at["[object Boolean]"]=at["[object DataView]"]=at["[object Date]"]=at["[object Error]"]=at["[object Function]"]=at["[object Map]"]=at["[object Number]"]=at["[object Object]"]=at["[object RegExp]"]=at["[object Set]"]=at["[object String]"]=at["[object WeakMap]"]=!1;var ut=function(t){return Object(ct.a)(t)&&Object(it.a)(t.length)&&!!at[Object(ot.a)(t)]};var st=function(t){return function(e){return t(e)}},lt=n(201),ft=lt.a&&lt.a.isTypedArray,pt=ft?st(ft):ut,ht=Object.prototype.hasOwnProperty;var dt=function(t,e){var n=Object(Y.a)(t),r=!n&&Object(et.a)(t),o=!n&&!r&&Object(nt.a)(t),i=!n&&!r&&!o&&pt(t),c=n||r||o||i,a=c?tt(t.length,String):[],u=a.length;for(var s in t)!e&&!ht.call(t,s)||c&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Object(rt.a)(s,u))||a.push(s);return a},vt=Object.prototype;var yt=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vt)};var gt=function(t,e){return function(n){return t(e(n))}}(Object.keys,Object),bt=Object.prototype.hasOwnProperty;var _t=function(t){if(!yt(t))return gt(t);var e=[];for(var n in Object(t))bt.call(t,n)&&"constructor"!=n&&e.push(n);return e},mt=n(148);var xt=function(t){return null!=t&&Object(it.a)(t.length)&&!Object(mt.a)(t)};var jt=function(t){return xt(t)?dt(t):_t(t)};var St=function(t){return H(t,jt,Q)},Ot=1,wt=Object.prototype.hasOwnProperty;var kt=function(t,e,n,r,o,i){var c=n&Ot,a=St(t),u=a.length;if(u!=St(e).length&&!c)return!1;for(var s=u;s--;){var l=a[s];if(!(c?l in e:wt.call(e,l)))return!1}var f=i.get(t);if(f&&i.get(e))return f==e;var p=!0;i.set(t,e),i.set(e,t);for(var h=c;++s<u;){var d=t[l=a[s]],v=e[l];if(r)var y=c?r(v,d,l,e,t,i):r(d,v,l,t,e,i);if(!(void 0===y?d===v||o(d,v,n,r,i):y)){p=!1;break}h||(h="constructor"==l)}if(p&&!h){var g=t.constructor,b=e.constructor;g!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b)&&(p=!1)}return i.delete(t),i.delete(e),p},Et=n(58),Tt=Object(Et.a)(w.a,"DataView"),Pt=Object(Et.a)(w.a,"Promise"),At=Object(Et.a)(w.a,"Set"),Rt=Object(Et.a)(w.a,"WeakMap"),Ct=n(101),It=Object(Ct.a)(Tt),Nt=Object(Ct.a)(u.a),Dt=Object(Ct.a)(Pt),Lt=Object(Ct.a)(At),Mt=Object(Ct.a)(Rt),Ft=ot.a;(Tt&&"[object DataView]"!=Ft(new Tt(new ArrayBuffer(1)))||u.a&&"[object Map]"!=Ft(new u.a)||Pt&&"[object Promise]"!=Ft(Pt.resolve())||At&&"[object Set]"!=Ft(new At)||Rt&&"[object WeakMap]"!=Ft(new Rt))&&(Ft=function(t){var e=Object(ot.a)(t),n="[object Object]"==e?t.constructor:void 0,r=n?Object(Ct.a)(n):"";if(r)switch(r){case It:return"[object DataView]";case Nt:return"[object Map]";case Dt:return"[object Promise]";case Lt:return"[object Set]";case Mt:return"[object WeakMap]"}return e});var zt=Ft,Ut=1,Kt="[object Arguments]",Wt="[object Array]",$t="[object Object]",Bt=Object.prototype.hasOwnProperty;var Gt=function(t,e,n,r,o,i){var c=Object(Y.a)(t),a=Object(Y.a)(e),u=c?Wt:zt(t),s=a?Wt:zt(e),l=(u=u==Kt?$t:u)==$t,f=(s=s==Kt?$t:s)==$t,p=u==s;if(p&&Object(nt.a)(t)){if(!Object(nt.a)(e))return!1;c=!0,l=!1}if(p&&!l)return i||(i=new h),c||pt(t)?S(t,e,n,r,o,i):G(t,e,u,n,r,o,i);if(!(n&Ut)){var d=l&&Bt.call(t,"__wrapped__"),v=f&&Bt.call(e,"__wrapped__");if(d||v){var y=d?t.value():t,g=v?e.value():e;return i||(i=new h),o(y,g,n,r,i)}}return!!p&&(i||(i=new h),kt(t,e,n,r,o,i))};var Vt=function t(e,n,r,o,i){return e===n||(null==e||null==n||!Object(ct.a)(e)&&!Object(ct.a)(n)?e!=e&&n!=n:Gt(e,n,r,o,t,i))};var Yt=function(t,e){return Vt(t,e)};function Ht(t){return function(t){if(Array.isArray(t))return Jt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Jt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Jt(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function qt(t){var e=Ht(t).sort(),n=[];if(Yt([1,2,3,4,5,6],e))return{total:1500,scoringDice:e,nonScoringDice:[]};for(var r=0;e.length>=3;){for(var o=function(){var t=c[i];if(e.filter((function(e){return e==t})).length>=3){r+=1==t?1e3:100*t;for(var o=0;o<3;o++)n.push(t),e.splice(e.indexOf(t),1);return"continue"}},i=0,c=[1,6,5,4,3,2];i<c.length;i++)o();break}return Ht(e).forEach((function(t){1!=t&&5!=t||(n.push(t),e.splice(e.indexOf(t),1)),1==t&&(r+=100),5==t&&(r+=50)})),{total:r,scoringDice:n,nonScoringDice:e}}n.d(e,"a",(function(){return qt}))},function(t,e,n){"use strict";var r=n(3),o=n(34).find,i=n(98),c=!0;"find"in[]&&Array(1).find((function(){c=!1})),r({target:"Array",proto:!0,forced:c},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("find")},,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(13),o=n(4),i=n(2),c=n(123),a=RegExp.prototype,u=a.toString,s=i((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),l="toString"!=u.name;(s||l)&&r(RegExp.prototype,"toString",(function(){var t=o(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in a)?c.call(t):n)}),{unsafe:!0})},,function(t,e,n){"use strict";(function(t){var r=n(114),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===o&&r.a.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||c&&c.binding&&c.binding("util")}catch(t){}}();e.a=a}).call(this,n(229)(t))},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},,,,,function(t,e,n){"use strict";e.a=function(){return!1}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"Farkle",(function(){return x}));n(186),n(116),n(161),n(120),n(157),n(176),n(183),n(55),n(199),n(108),n(109),n(125),n(65),n(66),n(67),n(44),n(68),n(69),n(117),n(118),n(119);var r=n(19),o=n(184),i=(n(340),n(158)),c=n(88),a=n(185);n(341);function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||l(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){if(t){if("string"==typeof t)return f(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(t,e):void 0}}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function p(){return(p=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function v(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=b(t);if(e){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?g(t):e}function g(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function b(t){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var m=function(){return JSON.parse(JSON.stringify([{index:0},{index:1},{index:2},{index:3},{index:4},{index:5}]))},x=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(y,e);var n,c,u,f=v(y);function y(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,y),_(g(n=f.call(this,t,e)),"errorHandler",new i.a(g(n))),_(g(n),"diceRef",Object(r.createRef)()),_(g(n),"dice",new Array(6)),n.state={dice:m(),keptDice:[],priorScores:[],turnIndex:1},n}return n=y,(c=[{key:"render",value:function(){var e=this,n=this.state,r=n.error,i=n.dice,c=n.keptDice,u=n.rolling,s=n.didFarkle,l=n.didRollThrough,f=n.undoKeep,h=n.thisRollScore,d=n.thisRollMax,v=n.keptScore,y=n.turnIndex,g=n.priorScores,b={dieSize:105,disableIndividual:!0,dotColor:"#DBDAD6",faceColor:"#EF5E24",margin:12,outline:!1,outlineColor:"#373D42",rollTime:0,sides:6},_=!u&&void 0!==d,m=i.filter((function(t){return!t.kept})).find((function(t){return t.pendingKeep})),x=m&&0==Object(a.a)(i.filter((function(t){return t.pendingKeep})).map((function(t){return t.value}))).nonScoringDice.length;return t("div",{id:"wrapper"},t("div",{className:"farkle container ".concat(r?"error":"")},t("div",{className:"row dice-row"},r&&t("div",null,t("h1",null,"Error!"),t("pre",null,r.message)),s&&t("div",{className:"didFarkleWrapper"},t("h1",null,"Farkle!")),l&&t("div",{className:"didFarkleWrapper"},t("h1",null,"Free Roll!")),t("div",{className:"col-10 d-flex justify-content-center dice",ref:this.diceRef},i.map((function(n){return n.kept?t(o.a,p({},b,{key:[y,n.index].join("/"),outline:!0,outlineColor:"#DBDAD6",faceColor:"#FFFFFF",dotColor:"#DBDAD6",ref:function(t){return e.dice[n.index]=t}})):t(o.a,p({},b,(n.pendingKeep||s)&&{faceColor:"#DBDAD6",dotColor:"#FFFFFF"},{key:[y,n.index].join("/"),ref:function(t){return e.dice[n.index]=t},onClick:function(){return e.togglePendingKeep(n)},rollTime:void 0===u?0:(r=.8,i=2,Math.random()*(i-r)+r),rollDone:function(){}}));var r,i}))),t("div",{className:"col-1 d-flex justify-content-center kept-dice"},c.map((function(e){var n=i[e];return t(o.a,p({},b,{dieSize:30,rollTime:0,margin:4,key:[y,n.index].join("/"),defaultRoll:n.value}))}))),t("div",{className:"col-12"},_&&!m&&!l&&!s&&t("span",{className:"hint"},'Tap any scoring dice you wish to keep, then click "Keep dice".',t("br",null),"Or, you can end your turn and put your points in the bank."),_&&m&&!x&&t("span",{className:"hint"},"You must keep all dice in a set of 3"),_&&m&&x&&t("span",{className:"hint"},"Keep the selected dice and roll again, or end your turn and put your points in the bank."),!u&&f&&t("span",{className:"hint"},'You can change your selection by first touching "Change Dice"'),_&&s&&t("span",{className:"hint"},"None of your dice scored!  You lose this turn."),_&&l&&t("span",{className:"hint"},"All your dice scored!  You must roll at least one more time."))),t("div",{class:"row controls-row"},t("div",{class:"col-6 scores"},void 0!==h&&t("h3",{class:"badge badge-success"},h.total," points"),t("br",null),t("h3",{class:"badge badge-text"},(d&&d.total||0)+(v||0)," total ",void 0!==d&&!l&&"if you end now")),t("div",{class:"col-6"},u&&t("button",{class:"btn",disabled:!0},"Rolling..."),_&&!s&&!l&&t("button",{class:"btn btn-info",disabled:!x,onClick:function(){return e.keep()}},"Keep Dice"),!u&&f&&t("button",{class:"btn btn-outline-info",onClick:function(){return e.undoKeep()}},"Change Dice"),_&&!s&&!l&&t("button",{class:"btn btn-outline-info",onClick:function(){return e.nextTurn()}},"End Turn"),!u&&!_&&t("button",{class:"btn btn-danger",onClick:function(){return e.roll()}},"Roll!"),!u&&!s&&l&&t("button",{class:"btn btn-primary",onClick:function(){return e.rollThrough()}},"Free Roll!"),!u&&s&&t("button",{class:"btn btn-info",onClick:function(){return e.nextTurn()}},"Play Again")))),t("div",{className:"container"},t("div",{className:"col-12"},t("hr",null),t("table",null,t("thead",null,t("th",null,t("td",null,"Previous Turns"))),t("tbody",null,g.map((function(e){return t("tr",null,t("td",null,e))})))))))}},{key:"keep",value:function(){var t=this.state,e=t.dice,n=t.keptDice,r=[];e.filter((function(t){return t.pendingKeep})).forEach((function(t){e[t.index].pendingKeep=!1,e[t.index].kept=!0,r.push(t.index)})),this.setState({dice:e,keptDice:[].concat(s(n),r),keptScore:(this.state.keptScore||0)+this.state.thisRollScore.total,thisRollScore:void 0,thisRollMax:void 0,undoKeep:{previousKeptDice:n,newKeptDice:r,previousKeptScore:this.state.keptScore||0}})}},{key:"undoKeep",value:function(){if(this.state.undoKeep){var t=this.state.dice,e=this.state.undoKeep,n=e.previousKeptDice,r=e.newKeptDice,o=e.previousKeptScore;r.forEach((function(e){t[e].pendingKeep=!0,t[e].kept=!1})),this.setState({dice:t,keptDice:n,keptScore:o,undoKeep:void 0}),this.updateScore()}}},{key:"togglePendingKeep",value:function(t){var e=this.state,n=e.dice,r=e.thisRollMax,o=e.didRollThrough;if(r&&!o){if(n[t.index].pendingKeep)n[t.index].pendingKeep=!1;else{var i,c=s(r.scoringDice),a=function(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=l(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return c=t.done,t},e:function(t){a=!0,i=t},f:function(){try{c||null==n.return||n.return()}finally{if(a)throw i}}}}(n);try{for(a.s();!(i=a.n()).done;){var u=i.value;u.pendingKeep&&c.splice(c.indexOf(u.value),1)}}catch(t){a.e(t)}finally{a.f()}-1!=c.indexOf(t.value)&&(n[t.index].pendingKeep=!0)}this.setState({dice:n}),this.updateScore()}}},{key:"roll",value:function(){var t=this,e=this.state.dice;this.setState({rolling:!0,thisRollScore:void 0,undoKeep:void 0}),e.filter((function(t){return!t.kept})).forEach((function(e,n){var r=t.dice[e.index],o=r.getRandomInt();r.rollDie(o),e.value=o})),this.setState({dice:e}),setTimeout((function(){return t.rollDone()}),2e3)}},{key:"rollThrough",value:function(){var t=this;this.setState({turnIndex:this.state.turnIndex+1,keptScore:(this.state.keptScore||0)+this.state.thisRollScore.total,dice:m(),keptDice:[],didFarkle:void 0,didRollThrough:void 0,thisRollScore:void 0,thisRollMax:void 0,rolling:void 0,undoKeep:void 0}),setTimeout((function(){return t.roll()}),400)}},{key:"rollDone",value:function(){this.setState({rolling:!1}),this.updateScore()}},{key:"updateScore",value:function(){var t=this.state.dice.filter((function(t){return!t.kept})),e=Object(a.a)(t.map((function(t){return t.value})));0==e.scoringDice.length&&this.setState({didFarkle:!0});var n=t.filter((function(t){return t.pendingKeep})),r=n.length>0?n:t,o=Object(a.a)(r.map((function(t){return t.value})));this.setState({thisRollMax:e,thisRollScore:o,didRollThrough:0==e.nonScoringDice.length})}},{key:"nextTurn",value:function(){var t=this.state,e=t.didFarkle,n=t.thisRollMax,r=t.keptScore,o=t.turnIndex,i=this.state.priorScores,c=(n&&n.total||0)+(r||0);i=e?["farkle! (".concat(c," points lost)")].concat(s(i)):[c.toString()].concat(s(i)),this.setState({turnIndex:o+1,dice:m(),keptDice:[],priorScores:i,didFarkle:void 0,didRollThrough:void 0,thisRollScore:void 0,thisRollMax:void 0,keptScore:void 0,rolling:void 0,undoKeep:void 0})}}])&&h(n.prototype,c),u&&h(n,u),y}(r.Component);$(document).ready((function(){Object(c.a)(),Object(r.render)(t(x,null),document.getElementById("react-root"))}))}.call(this,n(19).h)},function(t,e,n){t.exports=n(338)()},function(t,e,n){"use strict";var r=n(339);function o(){}function i(){}i.resetWarningCache=o,t.exports=function(){function t(t,e,n,o,i,c){if(c!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QubW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL2FzeW5jLWVycm9yLWhhbmRsZXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL3JlYWN0LWRpY2UtY29tcGxldGUvc3JjL0RpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1NldENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0VxdWFsLmpzIiwid2VicGFjazovLy8uL3NyYy9mYXJrbGUvc2NvcmluZy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZmFya2xlL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwic2hhcmVkIiwiaGFzIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiRnVuY3Rpb24iLCJleGVjIiwiZXJyb3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwic291cmNlIiwidGFyZ2V0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJ1bmRlZmluZWQiLCJzaGFtIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJERVNDUklQVE9SUyIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIiRkZWZpbmVQcm9wZXJ0eSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsImZhaWxzIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInRvSW50ZWdlciIsIm1pbiIsImFyZ3VtZW50IiwiaW5zcGVjdFNvdXJjZSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsInN0YXRlIiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYSIsInB1c2giLCJjaGlsZHJlbiIsImRlZmF1bHRQcm9wcyIsInYiLCJ0eXBlIiwicHJvcHMiLCJyZWYiLCJfX2siLCJfXyIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsIl9faCIsImNvbnN0cnVjdG9yIiwiX192Iiwidm5vZGUiLCJoIiwiY3VycmVudCIsInkiLCJjb250ZXh0IiwiaW5kZXhPZiIsIl8iLCJiYXNlIiwiayIsImIiLCJfX3IiLCJkZWJvdW5jZVJlbmRlcmluZyIsInNvcnQiLCJzb21lIiwiX19QIiwiSSIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIlQiLCJ3IiwiQSIsIkFycmF5IiwiaXNBcnJheSIsImciLCJ4IiwiTCIsInoiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwic2V0UHJvcGVydHkiLCJ0ZXN0IiwiQyIsInN0eWxlIiwiY3NzVGV4dCIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkgiLCIkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImV2ZW50IiwiY29udGV4dFR5cGUiLCJfX0UiLCJyZW5kZXIiLCJNIiwic3ViIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yRWFjaCIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImoiLCJkaWZmZWQiLCJsb2NhbE5hbWUiLCJub2RlVHlwZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVFbGVtZW50IiwiaXMiLCJkYXRhIiwiY2hpbGROb2RlcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYXR0cmlidXRlcyIsIl9faHRtbCIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJjaGVja2VkIiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiTiIsIlMiLCJxIiwiQ29uc3VtZXIiLCJQcm92aWRlciIsInNwbGljZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJ0aGVuIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ0b1N0cmluZyIsImZyZWVTZWxmIiwicm9vdCIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic2V0IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIldlYWtNYXAiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJrZXlzIiwiY2xhc3NvZiIsInByb2Nlc3MiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwiZGlzcGxheSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIlByb3BlcnRpZXMiLCJyZXN1bHQiLCJUT19TVFJJTkdfVEFHIiwid2VsbEtub3duU3ltYm9sIiwiVEFHIiwiSVNfUFVSRSIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9PVVQiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJpbmRleCIsIm1hcCIsImZpbHRlciIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlck91dCIsImFwcGx5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJtYXRjaCIsInVzZXJBZ2VudCIsInZlcnNpb25zIiwidjgiLCJvYmplY3RQcm90byIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJpc093biIsInRhZyIsInVubWFza2VkIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsImFyZyIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJpbnRlcm5hbE9iamVjdEtleXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwiSXRlcmF0b3JzIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiZG9uZSIsIkFyZ3VtZW50cyIsIkVYSVNUUyIsImZ1bmN0aW9uVG9TdHJpbmciLCJpZCIsInBvc3RmaXgiLCJyYW5kb20iLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiSVNfTk9ERSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldEJ1aWx0SW4iLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsInByb3BlcnR5S2V5IiwibWFza1NyY0tleSIsImZ1bmMiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwiaXNGdW5jdGlvbiIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJzdHIiLCJyZUNvcHkiLCJyZSIsInN0aWNreSIsImZsYWdzIiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJtdWx0aWxpbmUiLCJtYXgiLCJpbnRlZ2VyIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwib2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCIkZm9yRWFjaCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIndyYXAiLCJkZXNjcmlwdGlvbiIsInN5bWJvbCIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwic2V0dGVyIiwic3RyaW5nIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJzcGFjZSIsIiRyZXBsYWNlciIsImFyZ3MiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmUiLCJyZWdleHAiLCJkZXNjIiwiY2hhckF0IiwicG9pbnQiLCJET01JdGVyYWJsZXMiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIklURVJBVE9SIiwiQXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIm93bktleXMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsIml0ZXJhdG9yIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidHJ5R2V0IiwiY2FsbGVlIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJyZWRlZmluZUFsbCIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInRhc2siLCJtaWNyb3Rhc2siLCJwcm9taXNlUmVzb2x2ZSIsImhvc3RSZXBvcnRFcnJvcnMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCIkZmV0Y2giLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTkFUSVZFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIkZPUkNFRCIsInByb21pc2UiLCJGYWtlUHJvbWlzZSIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJpdGVyYWJsZSIsImFsbCIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3QiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwicmVhc29uIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwicGFyZW50IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJmZXRjaCIsImNhcGFiaWxpdHkiLCIkcHJvbWlzZVJlc29sdmUiLCJjb3VudGVyIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhciIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIk5BTUUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJJdGVyYXRvcnNDb3JlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwicmV0dXJuVGhpcyIsIkl0ZXJhYmxlIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIm5leHQiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwicHJvdG8iLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiTkVXX0lURVJBVE9SX1BST1RPVFlQRSIsInBhdGhKb2luIiwicGF0aEFyciIsInRyaW1TdGFydCIsInRvVHJpbSIsInZhbHVlVG9SZW1vdmUiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiaW5qZWN0U2NyaXB0IiwiaW50ZWdyaXR5IiwiY3Jvc3NPcmlnaW4iLCJhcHBlbmQiLCJpbmplY3RCb290c3RyYXAiLCJocmVmIiwicmVsIiwic2VhcmNoIiwicG9zIiwic3Vic3RyIiwiQ09OVkVSVF9UT19TVFJJTkciLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJvcmlnaW5hbEFycmF5IiwiQXJyYXlQcm90b3R5cGUiLCJyZXR1cm5NZXRob2QiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJVTlNDT1BBQkxFUyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiUkUiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsImdyb3VwcyIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRVBMQUNFIiwiUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJ1bmljb2RlIiwicmVnZXhwRXhlYyIsIlIiLCJNQVRDSCIsImlzUmVnRXhwIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCJuYXRpdmVDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiY29uc3RydWN0IiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJpbnN0YW5jZSIsIl9fZGF0YV9fIiwiZXEiLCJwb3AiLCJMaXN0Q2FjaGUiLCJlbnRyeSIsIk1hcCIsImZyZWVHbG9iYWwiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCIkZmlsdGVyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsImNyZWF0ZVByb3BlcnR5IiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIm5hdGl2ZVNsaWNlIiwic3RhcnQiLCJlbmQiLCJDb25zdHJ1Y3RvciIsImZpbiIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJTVFJJQ1RfTUVUSE9EIiwic2VwYXJhdG9yIiwiSEFTSF9VTkRFRklORUQiLCJIYXNoIiwiTWFwQ2FjaGUiLCJpZ25vcmVDYXNlIiwiZG90QWxsIiwiYXNzaWduIiwiZmFjdG9yaWVzIiwiYXJnc0xlbmd0aCIsImxpc3QiLCJwYXJ0QXJncyIsIkNPTlNUUlVDVE9SX05BTUUiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvck1ldGhvZCIsIml0ZXJhdG9yQ2xvc2UiLCJSZXN1bHQiLCJzdG9wcGVkIiwidW5ib3VuZEZ1bmN0aW9uIiwiaXRlckZuIiwic3RlcCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImZsdXNoIiwiaGVhZCIsImxhc3QiLCJ0b2dnbGUiLCJub2RlIiwibWFjcm90YXNrIiwiSVNfV0VCT1NfV0VCS0lUIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJjb25zb2xlIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiZGVmaW5lIiwib2JqIiwiZXJyIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsImdldFN1YnN0aXR1dGlvbiIsInJlZ0V4cEV4ZWMiLCJtYXliZUNhbGxOYXRpdmUiLCJVTlNBRkVfU1VCU1RJVFVURSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVzIiwicngiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsImVycm9yMSIsImVycm9yMiIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsIiRzdGFydHNXaXRoIiwiQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMiLCJzZWFyY2hTdHJpbmciLCJhc3luY1RhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJwcm94eVRhZyIsIm90aGVyIiwiTUFYX1NBRkVfSU5URUdFUiIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJhcnJheUxpa2UiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJFTlRSSUVTIiwiY2FsbFJlZ0V4cEV4ZWMiLCJhcnJheVB1c2giLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJBc3luY0Vycm9ySGFuZGxlciIsInNldFRhcmdldCIsInByb3BhZ2F0ZSIsInByZXZlbnREZWZhdWx0IiwiZXZ0IiwicGVyc2lzdCIsIndhaXQiLCJlcnJvcnMiLCJleCIsImVsZW1lbnQiLCJyZUlzVWludCIsImFyZ3NUYWciLCJpc09iamVjdExpa2UiLCJpc0FyZ3VtZW50cyIsIiRtYXAiLCIkYXNzaWduIiwiQiIsImNociIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJsZW4iLCJFIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJ0byIsImFjdHVhbFN0YXJ0IiwiRGllIiwiZGlzYWJsZUluZGl2aWR1YWwiLCJyb2xsRGllIiwib25DbGljayIsImN1cnJlbnRWYWx1ZSIsImRlZmF1bHRSb2xsIiwic2lkZXMiLCJkaWUiLCJjbGFzc05hbWUiLCJvZmZzZXRXaWR0aCIsInJvbGwiLCJnZXRSYW5kb21JbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyb2xsRG9uZSIsInJvbGxUaW1lIiwiZmFjZVN0eWxlIiwiYmFja2dyb3VuZCIsImZhY2VDb2xvciIsIm91dGxpbmUiLCJvdXRsaW5lQ29sb3IiLCJoZWlnaHQiLCJkaWVTaXplIiwid2lkdGgiLCJmMVN0eWxlIiwidHJhbnNmb3JtIiwiZjJTdHlsZSIsImYzU3R5bGUiLCJmNFN0eWxlIiwiZjVTdHlsZSIsImY2U3R5bGUiLCJkb3RTaXplIiwiZG90U3R5bGUiLCJkb3RDb2xvciIsImQxU3R5bGUiLCJ0b3AiLCJsZWZ0IiwiZDJTdHlsZSIsInJpZ2h0IiwiZDNTdHlsZSIsImQ0U3R5bGUiLCJkNVN0eWxlIiwiZDZTdHlsZSIsImJvdHRvbSIsImQ3U3R5bGUiLCJyb2xsU3R5bGUiLCJhbmltYXRpb25EdXJhdGlvbiIsImNvbnRhaW5lclN0eWxlIiwibWFyZ2luIiwiZ2V0VmFsdWUiLCJDb21wb25lbnQiLCJMQVJHRV9BUlJBWV9TSVpFIiwicGFpcnMiLCJTdGFjayIsIlNldENhY2hlIiwicHJlZGljYXRlIiwiY2FjaGUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsInN0YWNrIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwic3RhY2tlZCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvdGhJbmRleCIsIlVpbnQ4QXJyYXkiLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwibWVzc2FnZSIsImNvbnZlcnQiLCJvZmZzZXQiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwicmVzSW5kZXgiLCJuYXRpdmVHZXRTeW1ib2xzIiwiaXRlcmF0ZWUiLCJ0eXBlZEFycmF5VGFncyIsImlzTGVuZ3RoIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIkN0b3IiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvYmpDdG9yIiwib3RoQ3RvciIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiYmFzZUlzRXF1YWwiLCJzY29yZVJvbGwiLCJkaWNlIiwicmVtYWluaW5nRGljZSIsInNjb3JpbmdEaWNlIiwiaXNFcXVhbCIsInRvdGFsIiwibm9uU2NvcmluZ0RpY2UiLCJzdWJ0b3RhbCIsIm51bSIsIiRmaW5kIiwiU0tJUFNfSE9MRVMiLCJSZWdFeHBQcm90b3R5cGUiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJyZiIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJJbml0aWFsRGljZSIsIkpTT04iLCJwYXJzZSIsIkZhcmtsZSIsImNyZWF0ZVJlZiIsImtlcHREaWNlIiwicHJpb3JTY29yZXMiLCJ0dXJuSW5kZXgiLCJyb2xsaW5nIiwiZGlkRmFya2xlIiwiZGlkUm9sbFRocm91Z2giLCJ1bmRvS2VlcCIsInRoaXNSb2xsU2NvcmUiLCJ0aGlzUm9sbE1heCIsImtlcHRTY29yZSIsImRpZVByb3BzIiwiZGlkUm9sbCIsImFueVBlbmRpbmdLZWVwIiwia2VwdCIsInBlbmRpbmdLZWVwIiwiY2FuS2VlcCIsImRpY2VSZWYiLCJ0b2dnbGVQZW5kaW5nS2VlcCIsImlkeCIsImNsYXNzIiwiZGlzYWJsZWQiLCJrZWVwIiwibmV4dFR1cm4iLCJyb2xsVGhyb3VnaCIsInNjb3JlIiwibmV3S2VwdERpY2UiLCJwcmV2aW91c0tlcHREaWNlIiwicHJldmlvdXNLZXB0U2NvcmUiLCJ1cGRhdGVTY29yZSIsImF2YWlsYWJsZVNjb3JpbmdEaWNlIiwiZGllUmVmIiwicGVuZGluZ0tlZXBEaWNlIiwiZGljZVRvU2NvcmUiLCJ0aGlzVHVyblNjb3JlIiwicmVhZHkiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsIm51bWJlciIsImFueSIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYs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b3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4uL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzM2KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBuLGwsdSxpLHQsbyxyPXt9LGY9W10sZT0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pO2Z1bmN0aW9uIGMobixsKXtmb3IodmFyIHUgaW4gbCluW3VdPWxbdV07cmV0dXJuIG59ZnVuY3Rpb24gcyhuKXt2YXIgbD1uLnBhcmVudE5vZGU7bCYmbC5yZW1vdmVDaGlsZChuKX1mdW5jdGlvbiBhKG4sbCx1KXt2YXIgaSx0LG8scj1hcmd1bWVudHMsZj17fTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtpZihudWxsIT11JiYoZi5jaGlsZHJlbj11KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZudWxsIT1uLmRlZmF1bHRQcm9wcylmb3IobyBpbiBuLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW29dJiYoZltvXT1uLmRlZmF1bHRQcm9wc1tvXSk7cmV0dXJuIHYobixmLGksdCxudWxsKX1mdW5jdGlvbiB2KGwsdSxpLHQsbyl7dmFyIHI9e3R5cGU6bCxwcm9wczp1LGtleTppLHJlZjp0LF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PW8/KytuLl9fdjpvfTtyZXR1cm4gbnVsbCE9bi52bm9kZSYmbi52bm9kZShyKSxyfWZ1bmN0aW9uIGgoKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiB5KG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIHAobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gZChuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ZChuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9kKG4pOm51bGx9ZnVuY3Rpb24gXyhuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIF8obil9fWZ1bmN0aW9uIGsobCl7KCFsLl9fZCYmKGwuX19kPSEwKSYmdS5wdXNoKGwpJiYhYi5fX3IrK3x8dCE9PW4uZGVib3VuY2VSZW5kZXJpbmcpJiYoKHQ9bi5kZWJvdW5jZVJlbmRlcmluZyl8fGkpKGIpfWZ1bmN0aW9uIGIoKXtmb3IodmFyIG47Yi5fX3I9dS5sZW5ndGg7KW49dS5zb3J0KGZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uX192Ll9fYi1sLl9fdi5fX2J9KSx1PVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9Yyh7fSx0KSkuX192PXQuX192KzEsSShyLHQsaSxsLl9fbix2b2lkIDAhPT1yLm93bmVyU1ZHRWxlbWVudCxudWxsIT10Ll9faD9bb106bnVsbCx1LG51bGw9PW8/ZCh0KTpvLHQuX19oKSxUKHUsdCksdC5fX2UhPW8mJl8odCkpKX0pfWZ1bmN0aW9uIG0obixsLHUsaSx0LG8sZSxjLHMsYSl7dmFyIGgscCxfLGssYixtLHcsQT1pJiZpLl9fa3x8ZixQPUEubGVuZ3RoO2Zvcih1Ll9faz1bXSxoPTA7aDxsLmxlbmd0aDtoKyspaWYobnVsbCE9KGs9dS5fX2tbaF09bnVsbD09KGs9bFtoXSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygaz9udWxsOlwic3RyaW5nXCI9PXR5cGVvZiBrfHxcIm51bWJlclwiPT10eXBlb2Yga3x8XCJiaWdpbnRcIj09dHlwZW9mIGs/dihudWxsLGssbnVsbCxudWxsLGspOkFycmF5LmlzQXJyYXkoayk/dih5LHtjaGlsZHJlbjprfSxudWxsLG51bGwsbnVsbCk6ay5fX2I+MD92KGsudHlwZSxrLnByb3BzLGsua2V5LG51bGwsay5fX3YpOmspKXtpZihrLl9fPXUsay5fX2I9dS5fX2IrMSxudWxsPT09KF89QVtoXSl8fF8mJmsua2V5PT1fLmtleSYmay50eXBlPT09Xy50eXBlKUFbaF09dm9pZCAwO2Vsc2UgZm9yKHA9MDtwPFA7cCsrKXtpZigoXz1BW3BdKSYmay5rZXk9PV8ua2V5JiZrLnR5cGU9PT1fLnR5cGUpe0FbcF09dm9pZCAwO2JyZWFrfV89bnVsbH1JKG4sayxfPV98fHIsdCxvLGUsYyxzLGEpLGI9ay5fX2UsKHA9ay5yZWYpJiZfLnJlZiE9cCYmKHd8fCh3PVtdKSxfLnJlZiYmdy5wdXNoKF8ucmVmLG51bGwsayksdy5wdXNoKHAsay5fX2N8fGIsaykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGsudHlwZSYmbnVsbCE9ay5fX2smJmsuX19rPT09Xy5fX2s/ay5fX2Q9cz1nKGsscyxuKTpzPXgobixrLF8sQSxiLHMpLGF8fFwib3B0aW9uXCIhPT11LnR5cGU/XCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiYodS5fX2Q9cyk6bi52YWx1ZT1cIlwiKTpzJiZfLl9fZT09cyYmcy5wYXJlbnROb2RlIT1uJiYocz1kKF8pKX1mb3IodS5fX2U9bSxoPVA7aC0tOyludWxsIT1BW2hdJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiZudWxsIT1BW2hdLl9fZSYmQVtoXS5fX2U9PXUuX19kJiYodS5fX2Q9ZChpLGgrMSkpLEwoQVtoXSxBW2hdKSk7aWYodylmb3IoaD0wO2g8dy5sZW5ndGg7aCsrKXood1toXSx3WysraF0sd1srK2hdKX1mdW5jdGlvbiBnKG4sbCx1KXt2YXIgaSx0O2ZvcihpPTA7aTxuLl9fay5sZW5ndGg7aSsrKSh0PW4uX19rW2ldKSYmKHQuX189bixsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudHlwZT9nKHQsbCx1KTp4KHUsdCx0LG4uX19rLHQuX19lLGwpKTtyZXR1cm4gbH1mdW5jdGlvbiB3KG4sbCl7cmV0dXJuIGw9bHx8W10sbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBufHwoQXJyYXkuaXNBcnJheShuKT9uLnNvbWUoZnVuY3Rpb24obil7dyhuLGwpfSk6bC5wdXNoKG4pKSxsfWZ1bmN0aW9uIHgobixsLHUsaSx0LG8pe3ZhciByLGYsZTtpZih2b2lkIDAhPT1sLl9fZClyPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKG51bGw9PXV8fHQhPW98fG51bGw9PXQucGFyZW50Tm9kZSluOmlmKG51bGw9PW98fG8ucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZCh0KSxyPW51bGw7ZWxzZXtmb3IoZj1vLGU9MDsoZj1mLm5leHRTaWJsaW5nKSYmZTxpLmxlbmd0aDtlKz0yKWlmKGY9PXQpYnJlYWsgbjtuLmluc2VydEJlZm9yZSh0LG8pLHI9b31yZXR1cm4gdm9pZCAwIT09cj9yOnQubmV4dFNpYmxpbmd9ZnVuY3Rpb24gQShuLGwsdSxpLHQpe3ZhciBvO2ZvcihvIGluIHUpXCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fG8gaW4gbHx8QyhuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fEMobixvLGxbb10sdVtvXSxpKX1mdW5jdGlvbiBQKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLHUpOm5bbF09bnVsbD09dT9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiB1fHxlLnRlc3QobCk/dTp1K1wicHhcIn1mdW5jdGlvbiBDKG4sbCx1LGksdCl7dmFyIG87bjppZihcInN0eWxlXCI9PT1sKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB1KW4uc3R5bGUuY3NzVGV4dD11O2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkmJihuLnN0eWxlLmNzc1RleHQ9aT1cIlwiKSxpKWZvcihsIGluIGkpdSYmbCBpbiB1fHxQKG4uc3R5bGUsbCxcIlwiKTtpZih1KWZvcihsIGluIHUpaSYmdVtsXT09PWlbbF18fFAobi5zdHlsZSxsLHVbbF0pfWVsc2UgaWYoXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0pbz1sIT09KGw9bC5yZXBsYWNlKC9DYXB0dXJlJC8sXCJcIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT9pfHxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP0g6JCxvKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxvP0g6JCxvKTtlbHNlIGlmKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwpe2lmKHQpbD1sLnJlcGxhY2UoL3hsaW5rW0g6aF0vLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8XCJhXCI9PT1sWzBdJiZcInJcIj09PWxbMV0pP24uc2V0QXR0cmlidXRlKGwsdSk6bi5yZW1vdmVBdHRyaWJ1dGUobCkpfX1mdW5jdGlvbiAkKGwpe3RoaXMubFtsLnR5cGUrITFdKG4uZXZlbnQ/bi5ldmVudChsKTpsKX1mdW5jdGlvbiBIKGwpe3RoaXMubFtsLnR5cGUrITBdKG4uZXZlbnQ/bi5ldmVudChsKTpsKX1mdW5jdGlvbiBJKGwsdSxpLHQsbyxyLGYsZSxzKXt2YXIgYSx2LGgsZCxfLGssYixnLHcseCxBLFA9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7bnVsbCE9aS5fX2gmJihzPWkuX19oLGU9dS5fX2U9aS5fX2UsdS5fX2g9bnVsbCxyPVtlXSksKGE9bi5fX2IpJiZhKHUpO3RyeXtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFApe2lmKGc9dS5wcm9wcyx3PShhPVAuY29udGV4dFR5cGUpJiZ0W2EuX19jXSx4PWE/dz93LnByb3BzLnZhbHVlOmEuX186dCxpLl9fYz9iPSh2PXUuX19jPWkuX19jKS5fXz12Ll9fRTooXCJwcm90b3R5cGVcImluIFAmJlAucHJvdG90eXBlLnJlbmRlcj91Ll9fYz12PW5ldyBQKGcseCk6KHUuX19jPXY9bmV3IHAoZyx4KSx2LmNvbnN0cnVjdG9yPVAsdi5yZW5kZXI9TSksdyYmdy5zdWIodiksdi5wcm9wcz1nLHYuc3RhdGV8fCh2LnN0YXRlPXt9KSx2LmNvbnRleHQ9eCx2Ll9fbj10LGg9di5fX2Q9ITAsdi5fX2g9W10pLG51bGw9PXYuX19zJiYodi5fX3M9di5zdGF0ZSksbnVsbCE9UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJih2Ll9fcz09di5zdGF0ZSYmKHYuX19zPWMoe30sdi5fX3MpKSxjKHYuX19zLFAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKGcsdi5fX3MpKSksZD12LnByb3BzLF89di5zdGF0ZSxoKW51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT12LmNvbXBvbmVudFdpbGxNb3VudCYmdi5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT12LmNvbXBvbmVudERpZE1vdW50JiZ2Ll9faC5wdXNoKHYuY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmchPT1kJiZudWxsIT12LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJnYuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhnLHgpLCF2Ll9fZSYmbnVsbCE9di5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09di5zaG91bGRDb21wb25lbnRVcGRhdGUoZyx2Ll9fcyx4KXx8dS5fX3Y9PT1pLl9fdil7di5wcm9wcz1nLHYuc3RhdGU9di5fX3MsdS5fX3YhPT1pLl9fdiYmKHYuX19kPSExKSx2Ll9fdj11LHUuX19lPWkuX19lLHUuX19rPWkuX19rLHUuX19rLmZvckVhY2goZnVuY3Rpb24obil7biYmKG4uX189dSl9KSx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KTticmVhayBufW51bGwhPXYuY29tcG9uZW50V2lsbFVwZGF0ZSYmdi5jb21wb25lbnRXaWxsVXBkYXRlKGcsdi5fX3MseCksbnVsbCE9di5jb21wb25lbnREaWRVcGRhdGUmJnYuX19oLnB1c2goZnVuY3Rpb24oKXt2LmNvbXBvbmVudERpZFVwZGF0ZShkLF8sayl9KX12LmNvbnRleHQ9eCx2LnByb3BzPWcsdi5zdGF0ZT12Ll9fcywoYT1uLl9fcikmJmEodSksdi5fX2Q9ITEsdi5fX3Y9dSx2Ll9fUD1sLGE9di5yZW5kZXIodi5wcm9wcyx2LnN0YXRlLHYuY29udGV4dCksdi5zdGF0ZT12Ll9fcyxudWxsIT12LmdldENoaWxkQ29udGV4dCYmKHQ9YyhjKHt9LHQpLHYuZ2V0Q2hpbGRDb250ZXh0KCkpKSxofHxudWxsPT12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHwoaz12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGQsXykpLEE9bnVsbCE9YSYmYS50eXBlPT09eSYmbnVsbD09YS5rZXk/YS5wcm9wcy5jaGlsZHJlbjphLG0obCxBcnJheS5pc0FycmF5KEEpP0E6W0FdLHUsaSx0LG8scixmLGUscyksdi5iYXNlPXUuX19lLHUuX19oPW51bGwsdi5fX2gubGVuZ3RoJiZmLnB1c2godiksYiYmKHYuX19FPXYuX189bnVsbCksdi5fX2U9ITF9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9aihpLl9fZSx1LGksdCxvLHIsZixzKTsoYT1uLmRpZmZlZCkmJmEodSl9Y2F0Y2gobCl7dS5fX3Y9bnVsbCwoc3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhcyxyW3IuaW5kZXhPZihlKV09bnVsbCksbi5fX2UobCx1LGkpfX1mdW5jdGlvbiBUKGwsdSl7bi5fX2MmJm4uX19jKHUsbCksbC5zb21lKGZ1bmN0aW9uKHUpe3RyeXtsPXUuX19oLHUuX19oPVtdLGwuc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSl9KX1jYXRjaChsKXtuLl9fZShsLHUuX192KX19KX1mdW5jdGlvbiBqKG4sbCx1LGksdCxvLGUsYyl7dmFyIGEsdixoLHkscD11LnByb3BzLGQ9bC5wcm9wcyxfPWwudHlwZSxrPTA7aWYoXCJzdmdcIj09PV8mJih0PSEwKSxudWxsIT1vKWZvcig7azxvLmxlbmd0aDtrKyspaWYoKGE9b1trXSkmJihhPT09bnx8KF8/YS5sb2NhbE5hbWU9PV86Mz09YS5ub2RlVHlwZSkpKXtuPWEsb1trXT1udWxsO2JyZWFrfWlmKG51bGw9PW4pe2lmKG51bGw9PT1fKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKTtuPXQ/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixfKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KF8sZC5pcyYmZCksbz1udWxsLGM9ITF9aWYobnVsbD09PV8pcD09PWR8fGMmJm4uZGF0YT09PWR8fChuLmRhdGE9ZCk7ZWxzZXtpZihvPW8mJmYuc2xpY2UuY2FsbChuLmNoaWxkTm9kZXMpLHY9KHA9dS5wcm9wc3x8cikuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1vKWZvcihwPXt9LHk9MDt5PG4uYXR0cmlidXRlcy5sZW5ndGg7eSsrKXBbbi5hdHRyaWJ1dGVzW3ldLm5hbWVdPW4uYXR0cmlidXRlc1t5XS52YWx1ZTsoaHx8dikmJihoJiYodiYmaC5fX2h0bWw9PXYuX19odG1sfHxoLl9faHRtbD09PW4uaW5uZXJIVE1MKXx8KG4uaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9aWYoQShuLGQscCx0LGMpLGgpbC5fX2s9W107ZWxzZSBpZihrPWwucHJvcHMuY2hpbGRyZW4sbShuLEFycmF5LmlzQXJyYXkoayk/azpba10sbCx1LGksdCYmXCJmb3JlaWduT2JqZWN0XCIhPT1fLG8sZSxuLmZpcnN0Q2hpbGQsYyksbnVsbCE9bylmb3Ioaz1vLmxlbmd0aDtrLS07KW51bGwhPW9ba10mJnMob1trXSk7Y3x8KFwidmFsdWVcImluIGQmJnZvaWQgMCE9PShrPWQudmFsdWUpJiYoayE9PW4udmFsdWV8fFwicHJvZ3Jlc3NcIj09PV8mJiFrKSYmQyhuLFwidmFsdWVcIixrLHAudmFsdWUsITEpLFwiY2hlY2tlZFwiaW4gZCYmdm9pZCAwIT09KGs9ZC5jaGVja2VkKSYmayE9PW4uY2hlY2tlZCYmQyhuLFwiY2hlY2tlZFwiLGsscC5jaGVja2VkLCExKSl9cmV0dXJuIG59ZnVuY3Rpb24geihsLHUsaSl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIGw/bCh1KTpsLmN1cnJlbnQ9dX1jYXRjaChsKXtuLl9fZShsLGkpfX1mdW5jdGlvbiBMKGwsdSxpKXt2YXIgdCxvLHI7aWYobi51bm1vdW50JiZuLnVubW91bnQobCksKHQ9bC5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1sLl9fZXx8eih0LG51bGwsdSkpLGl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGwudHlwZXx8KGk9bnVsbCE9KG89bC5fX2UpKSxsLl9fZT1sLl9fZD12b2lkIDAsbnVsbCE9KHQ9bC5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobCl7bi5fX2UobCx1KX10LmJhc2U9dC5fX1A9bnVsbH1pZih0PWwuX19rKWZvcihyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmTCh0W3JdLHUsaSk7bnVsbCE9byYmcyhvKX1mdW5jdGlvbiBNKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIE4obCx1LGkpe3ZhciB0LG8sZTtuLl9fJiZuLl9fKGwsdSksbz0odD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpKT9udWxsOmkmJmkuX19rfHx1Ll9fayxlPVtdLEkodSxsPSghdCYmaXx8dSkuX19rPWEoeSxudWxsLFtsXSksb3x8cixyLHZvaWQgMCE9PXUub3duZXJTVkdFbGVtZW50LCF0JiZpP1tpXTpvP251bGw6dS5maXJzdENoaWxkP2Yuc2xpY2UuY2FsbCh1LmNoaWxkTm9kZXMpOm51bGwsZSwhdCYmaT9pOm8/by5fX2U6dS5maXJzdENoaWxkLHQpLFQoZSxsKX1mdW5jdGlvbiBPKG4sbCl7TihuLGwsTyl9ZnVuY3Rpb24gUyhuLGwsdSl7dmFyIGksdCxvLHI9YXJndW1lbnRzLGY9Yyh7fSxuLnByb3BzKTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtyZXR1cm4gbnVsbCE9dSYmKGYuY2hpbGRyZW49dSksdihuLnR5cGUsZixpfHxuLmtleSx0fHxuLnJlZixudWxsKX1mdW5jdGlvbiBxKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK28rKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGspfSx0aGlzLnN1Yj1mdW5jdGlvbihuKXt1LnB1c2gobik7dmFyIGw9bi5jb21wb25lbnRXaWxsVW5tb3VudDtuLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dS5zcGxpY2UodS5pbmRleE9mKG4pLDEpLGwmJmwuY2FsbChuKX19KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49e19fZTpmdW5jdGlvbihuLGwpe2Zvcih2YXIgdSxpLHQ7bD1sLl9fOylpZigodT1sLl9fYykmJiF1Ll9fKXRyeXtpZigoaT11LmNvbnN0cnVjdG9yKSYmbnVsbCE9aS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih1LnNldFN0YXRlKGkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSx0PXUuX19kKSxudWxsIT11LmNvbXBvbmVudERpZENhdGNoJiYodS5jb21wb25lbnREaWRDYXRjaChuKSx0PXUuX19kKSx0KXJldHVybiB1Ll9fRT11fWNhdGNoKGwpe249bH10aHJvdyBufSxfX3Y6MH0sbD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmdm9pZCAwPT09bi5jb25zdHJ1Y3Rvcn0scC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9Yyh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGMoe30sdSksdGhpcy5wcm9wcykpLG4mJmModSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX19oLnB1c2gobCksayh0aGlzKSl9LHAucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSxrKHRoaXMpKX0scC5wcm90b3R5cGUucmVuZGVyPXksdT1bXSxpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LGIuX19yPTAsbz0wO2V4cG9ydHtOIGFzIHJlbmRlcixPIGFzIGh5ZHJhdGUsYSBhcyBjcmVhdGVFbGVtZW50LGEgYXMgaCx5IGFzIEZyYWdtZW50LGggYXMgY3JlYXRlUmVmLGwgYXMgaXNWYWxpZEVsZW1lbnQscCBhcyBDb21wb25lbnQsUyBhcyBjbG9uZUVsZW1lbnQscSBhcyBjcmVhdGVDb250ZXh0LHcgYXMgdG9DaGlsZEFycmF5LG4gYXMgb3B0aW9uc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QubW9kdWxlLmpzLm1hcFxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMTAuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCwgZmlsdGVyT3V0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIElTX0ZJTFRFUl9PVVQgPSBUWVBFID09IDc7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfT1VUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJPdXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlck91dGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJPdXQ6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gIVN5bWJvbC5zaGFtICYmXG4gICAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgIChJU19OT0RFID8gVjhfVkVSU0lPTiA9PT0gMzggOiBWOF9WRVJTSU9OID4gMzcgJiYgVjhfVkVSU0lPTiA8IDQxKTtcbn0pO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmFsdWU7XG4iLCJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1k7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSByZWdleHBGbGFncy5jYWxsKHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgneScsICcnKTtcbiAgICAgIGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IFN0cmluZyhzdHIpLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHJbcmUubGFzdEluZGV4IC0gMV0gIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBtYXRjaC5pbnB1dC5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcblxuaWYgKERFU0NSSVBUT1JTICYmIHR5cGVvZiBOYXRpdmVTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAoISgnZGVzY3JpcHRpb24nIGluIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXJcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpO1xuICB2YXIgc3ltYm9sUHJvdG90eXBlID0gU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wucHJvdG90eXBlO1xuICBzeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG5hdGl2ZSA9IFN0cmluZyhOYXRpdmVTeW1ib2woJ3Rlc3QnKSkgPT0gJ1N5bWJvbCh0ZXN0KSc7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICBkZWZpbmVQcm9wZXJ0eShzeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBpc09iamVjdCh0aGlzKSA/IHRoaXMudmFsdWVPZigpIDogdGhpcztcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBuYXRpdmUgPyBzdHJpbmcuc2xpY2UoNywgLTEpIDogc3RyaW5nLnJlcGxhY2UocmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgTkFUSVZFX1JFSkVDVElPTl9FVkVOVCA9IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJztcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IGluc3BlY3RTb3VyY2UoUHJvbWlzZUNvbnN0cnVjdG9yKSAhPT0gU3RyaW5nKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIGlmICghR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSkge1xuICAgIC8vIFY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgIGlmIChWOF9WRVJTSU9OID09PSA2NikgcmV0dXJuIHRydWU7XG4gICAgLy8gVW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIGlmICghSVNfTk9ERSAmJiAhTkFUSVZFX1JFSkVDVElPTl9FVkVOVCkgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUHJvbWlzZUNvbnN0cnVjdG9yKSkgcmV0dXJuIGZhbHNlO1xuICAvLyBEZXRlY3QgY29ycmVjdG5lc3Mgb2Ygc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICB2YXIgcHJvbWlzZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKDEpO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIHJldHVybiAhKHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2UpO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHN0YXRlLnJlYWN0aW9ucztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gY2hhaW5baW5kZXgrK107XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTtcbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UICYmIChoYW5kbGVyID0gZ2xvYmFsWydvbicgKyBuYW1lXSkpIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlc29sdmUsIHdyYXBwZXIsIHN0YXRlKSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZWplY3QsIHdyYXBwZXIsIHN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaW50ZXJuYWxSZWplY3Qod3JhcHBlciwgZXJyb3IsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzdGF0ZS5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICAgIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbnRlcm5hbFJlamVjdCh7IGRvbmU6IGZhbHNlIH0sIGVycm9yLCBzdGF0ZSk7XG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoRk9SQ0VEKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZWRlZmluZUFsbChQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeShzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47XG5cbiAgICAvLyB3cmFwIG5hdGl2ZSBQcm9taXNlI3RoZW4gZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbiAgICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoSVNfUFVSRSAmJiB0aGlzID09PSBQcm9taXNlV3JhcHBlciA/IFByb21pc2VDb25zdHJ1Y3RvciA6IHRoaXMsIHgpO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgLy8gYFByb21pc2UuYWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNwZWMgcmVxdWlyZW1lbnRcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgbG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMocG9zdClcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyg/OmlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCIvLyBwb2x5ZmlsbHNcbi8vIHRzbGludDpkaXNhYmxlOm5vLW5hbWVzcGFjZVxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6aW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFN0cmluZyB7XG4gICAgc3RhcnRzV2l0aChzZWFyY2g6IHN0cmluZywgcG9zPzogbnVtYmVyKTogYm9vbGVhblxuICB9XG59XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xuICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbihzZWFyY2g6IHN0cmluZywgcG9zOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJzdHIoIXBvcyB8fCBwb3MgPCAwID8gMCA6ICtwb3MsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2hcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FpdChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCBtcyksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhKb2luKC4uLnBhdGhBcnI6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBwYXRoQXJyLmpvaW4oJy8nKS5yZXBsYWNlKC9cXC97Mix9LywgJy8nKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZW5hbWUocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgcGF0aFBhcnRzID0gcGF0aC5zcGxpdCgnLycpXG4gIHJldHVybiBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmltU3RhcnQodG9UcmltOiBzdHJpbmcsIHZhbHVlVG9SZW1vdmU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghdG9UcmltIHx8ICF2YWx1ZVRvUmVtb3ZlKSB7XG4gICAgcmV0dXJuIHRvVHJpbVxuICB9XG4gIHdoaWxlICh0b1RyaW0uc3RhcnRzV2l0aCh2YWx1ZVRvUmVtb3ZlKSkge1xuICAgIHRvVHJpbSA9IHRvVHJpbS5zdWJzdHJpbmcodmFsdWVUb1JlbW92ZS5sZW5ndGgpXG4gIH1cbiAgcmV0dXJuIHRvVHJpbVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0U2NyaXB0KHNyYzogc3RyaW5nLCBpbnRlZ3JpdHk6IHN0cmluZykge1xuICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCdcbiAgcy5pbnRlZ3JpdHkgPSBpbnRlZ3JpdHlcbiAgcy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnXG4gIHMuc3JjID0gc3JjXG4gICQoJ2hlYWQnKS5hcHBlbmQocylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdENzcyhocmVmOiBzdHJpbmcsIGludGVncml0eTogc3RyaW5nKSB7XG4gIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJylcbiAgcy5yZWwgPSAnc3R5bGVzaGVldCdcbiAgcy5ocmVmID0gaHJlZlxuICBzLmludGVncml0eSA9IGludGVncml0eVxuICBzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cydcbiAgLy8gVXNlIGFueSBzZWxlY3RvclxuICAkKCdoZWFkJykuYXBwZW5kKHMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RCb290c3RyYXAoKSB7XG4gIGluamVjdENzcygnaHR0cHM6Ly9zdGFja3BhdGguYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC4zLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJyxcbiAgICAnc2hhMzg0LWdnT3lSMGlYQ2JNUXYzWGlwbWEzNE1EK2RILzFmUTc4NC9qNmNZL2lKVFFVT2hjV3I3eDlKdm9SeFQyTVp3MVQnKVxuICBpbmplY3RTY3JpcHQoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3BvcHBlci5qcy8xLjE0LjcvdW1kL3BvcHBlci5taW4uanMnLFxuICAgICdzaGEzODQtVU8yZVQwQ3BIcWRTSlE2aEp0eTVLVnBodFBoeldqOVdPMWNsSFRNR2EzSkRad3JuUXE0c0Y4NmRJSE5EejBXMScpXG4gIGluamVjdFNjcmlwdCgnaHR0cHM6Ly9zdGFja3BhdGguYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC4zLjEvanMvYm9vdHN0cmFwLm1pbi5qcycsXG4gICAgJ3NoYTM4NC1KalNtVmd5ZDBwM3BYQjFyUmliWlVBWW9JSXk2T3JRNlZyaklFYUZmL25KR3pJeEZEc2Y0eDB4SU0rQjA3alJNJylcbn1cbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpLnZhbHVlO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3IsXG4vLyBzbyB3ZSB1c2UgYW4gaW50ZXJtZWRpYXRlIGZ1bmN0aW9uLlxuZnVuY3Rpb24gUkUocywgZikge1xuICByZXR1cm4gUmVnRXhwKHMsIGYpO1xufVxuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG4gIHZhciByZSA9IFJFKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbmV4cG9ydHMuQlJPS0VOX0NBUkVUID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gUkUoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIG1vdmVkIHRvIGVudHJ5IHBvaW50c1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhKFxuICAgICAgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgJiZcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDAgJiZcbiAgICAgICFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRVxuICAgICkpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IFJlZ0V4cC5wcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChzaGFtKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuXG4gIHJldHVybiByZWdleHBFeGVjLmNhbGwoUiwgUyk7XG59O1xuXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUNsZWFyO1xuIiwiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NvY0luZGV4T2Y7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVHZXQ7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlU2V0O1xuIiwiaW1wb3J0IGxpc3RDYWNoZUNsZWFyIGZyb20gJy4vX2xpc3RDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVEZWxldGUgZnJvbSAnLi9fbGlzdENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVHZXQgZnJvbSAnLi9fbGlzdENhY2hlR2V0LmpzJztcbmltcG9ydCBsaXN0Q2FjaGVIYXMgZnJvbSAnLi9fbGlzdENhY2hlSGFzLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVTZXQgZnJvbSAnLi9fbGlzdENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q2FjaGU7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi1pbnN0YW5jZXMtbmFtZVxuaWYgKERFU0NSSVBUT1JTICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZy5jYWxsKHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUpvaW4uY2FsbCh0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hEZWxldGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsImltcG9ydCBoYXNoQ2xlYXIgZnJvbSAnLi9faGFzaENsZWFyLmpzJztcbmltcG9ydCBoYXNoRGVsZXRlIGZyb20gJy4vX2hhc2hEZWxldGUuanMnO1xuaW1wb3J0IGhhc2hHZXQgZnJvbSAnLi9faGFzaEdldC5qcyc7XG5pbXBvcnQgaGFzaEhhcyBmcm9tICcuL19oYXNoSGFzLmpzJztcbmltcG9ydCBoYXNoU2V0IGZyb20gJy4vX2hhc2hTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuZXhwb3J0IGRlZmF1bHQgSGFzaDtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghKGFyZ3NMZW5ndGggaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gd2UgaGF2ZSBubyBwcm9wZXIgYWx0ZXJuYXRpdmVzLCBJRTgtIG9ubHlcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgbGlzdC5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZEZ1bmN0aW9uID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQsIDEgKyBBU19FTlRSSUVTICsgSU5URVJSVVBURUQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoUkVQTEFDRSwgbmF0aXZlUmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlLCByZWFzb24pIHtcbiAgdmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gcmVhc29uLlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFO1xuICB2YXIgUkVQTEFDRV9LRUVQU18kMCA9IHJlYXNvbi5SRVBMQUNFX0tFRVBTXyQwO1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gcmVwbGFjZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKCFSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSAmJiBSRVBMQUNFX0tFRVBTXyQwKSB8fFxuICAgICAgICAodHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ3N0cmluZycgJiYgcmVwbGFjZVZhbHVlLmluZGV4T2YoVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSlcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXN0YXJ0c3dpdGggLS0gc2FmZVxudmFyICRzdGFydHNXaXRoID0gJycuc3RhcnRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ3N0YXJ0c1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcmVwbGFjZSA9ICcnLnJlcGxhY2U7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcbnZhciBhcnJheVB1c2ggPSBbXS5wdXNoO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCAyLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFycmF5UHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IG91dHB1dC5zbGljZSgwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogbmF0aXZlU3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IFMuc2xpY2UocSkgOiBTKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFVOU1VQUE9SVEVEX1kgPyBxIDogMCkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgVU5TVVBQT1JURURfWSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwiLy8gdHNsaW50OmRpc2FibGU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcblxuaW50ZXJmYWNlIElFcnJvckhhbmRsaW5nQ29tcG9uZW50IHtcbiAgc3RhdGU6IHtcbiAgICBlcnJvcj86IEVycm9yLFxuICAgIHdhaXQ/OiBib29sZWFuLFxuICB9LFxuICBzZXRTdGF0ZShuZXdTdGF0ZTogUGFydGlhbDx7IGVycm9yOiBFcnJvciwgd2FpdDogYm9vbGVhbn0+KTogYW55LFxufVxuXG5pbnRlcmZhY2UgSUVycm9ySGFuZGxpbmdPcHRpb25zIHtcbiAgcHJvcGFnYXRlPzogYm9vbGVhblxuICBwcmV2ZW50RGVmYXVsdD86IGJvb2xlYW5cbn1cblxudHlwZSBBc3luY01ldGhvZCA9ICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+XG5cbi8qKlxuICogV3JhcHMgYW4gYXN5bmMgaGFuZGxlciBmdW5jdGlvbiBpbiBhbiBlcnJvciBoYW5kbGVyLCB3aGljaCBtYW5hZ2VzIHRoZSBcIndhaXRcIiBhbmRcbiAqIFwiZXJyb3JcIiBwcm9wZXJ0aWVzIG9uIHRoZSBnaXZlbiBjb21wb25lbnQncyBzdGF0ZS5cbiAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB3aG9zZSBzdGF0ZSB0byBzZXQgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAqIEBwYXJhbSBmbiBUaGUgYXN5bmMgZXJyb3IgaGFuZGxpbmcgZnVuY3Rpb24gdG8gYmluZFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aEVycm9ySGFuZGxpbmc8RiBleHRlbmRzIEFzeW5jTWV0aG9kPihcbiAgY29tcG9uZW50OiBJRXJyb3JIYW5kbGluZ0NvbXBvbmVudCxcbiAgZm46IEYsXG4gIG9wdGlvbnM/OiBJRXJyb3JIYW5kbGluZ09wdGlvbnMsXG4pIHtcbiAgcmV0dXJuIG5ldyBBc3luY0Vycm9ySGFuZGxlcihjb21wb25lbnQpLndyYXAoY29tcG9uZW50LCBmbiwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBXcmFwcyBhc3luYyBmdW5jdGlvbnMgdG8gaGFuZGxlIHRocm93biBlcnJvcnMgYW5kIGZvcndhcmQgdGhlbSB0byB0aGUgZ2l2ZW5cbiAqIEVycm9ySGFuZGxpbmdDb21wb25lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEFzeW5jRXJyb3JIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXJnZXQ6IElFcnJvckhhbmRsaW5nQ29tcG9uZW50KSB7XG4gICAgdGhpcy5zZXRUYXJnZXQgPSB0aGlzLnNldFRhcmdldC5iaW5kKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBlcnJvciBoYW5kbGluZyB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIGZvcndhcmRzIGFueSBlcnJvcnMgdG8gdGhlIHRhcmdldFxuICAgKiBjb21wb25lbnRcbiAgICogVGhlIHJldHVybmVkIHdyYXBwZXIgZnVuY3Rpb24gd2lsbCBsb2cgYW55IGFzeW5jIGVycm9ycyBmcm9tIHRoZSBzb3VyY2UgY29tcG9uZW50XG4gICAqIGFuZCB0aGVuIHNldCB0aGUgc3RhdGUgb24gdGhlIHRhcmdldCBjb21wb25lbnQuXG4gICAqIEBwYXJhbSBzb3VyY2UgVGhlIGNvbXBvbmVudCB3aG9zZSBmdW5jdGlvbiBzaG91bGQgYmUgd3JhcHBlZFxuICAgKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGF0IGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgd3JhcDxGIGV4dGVuZHMgQXN5bmNNZXRob2Q+KFxuICAgICAgc291cmNlOiBhbnksXG4gICAgICBmbjogRixcbiAgICAgIG9wdGlvbnM/OiBJRXJyb3JIYW5kbGluZ09wdGlvbnMsXG4gICAgKTogRiB7XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBwcm9wYWdhdGU6IGZhbHNlLFxuICAgICAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgfSwgb3B0aW9ucylcblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgICByZXR1cm4gKGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCBldnQgPSAoYXJnc1swXSAmJiB0eXBlb2YgYXJnc1swXSA9PSAnb2JqZWN0JyAmJiAncHJldmVudERlZmF1bHQnIGluIGFyZ3NbMF0pID8gYXJnc1swXSA6IG51bGxcbiAgICAgIGlmIChvcHRpb25zLnByZXZlbnREZWZhdWx0ICYmIGV2dCkge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuICAgICAgaWYgKGV2dCAmJiAncGVyc2lzdCcgaW4gZXZ0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ldmVudHMuaHRtbCNldmVudC1wb29saW5nXG4gICAgICAgIGV2dC5wZXJzaXN0KClcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoeyBlcnJvcjogbnVsbCwgd2FpdDogdHJ1ZSB9KVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbi5hcHBseShzb3VyY2UsIGFyZ3MpXG4gICAgICAgIHNldFN0YXRlKHsgZXJyb3I6IG51bGwsIHdhaXQ6IGZhbHNlIH0pXG4gICAgICAgIHJldHVybiByZXN1bHRcblxuICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIC8vIGZvciBzb21lIHJlYXNvbiB0aGUgc2hvcGlmeSBjbGllbnQgdGhyb3dzIGFuIGFycmF5IG9mIGVycm9ycy5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gQXJyYXkuaXNBcnJheShleGNlcHRpb24pID8gZXhjZXB0aW9uIDogW2V4Y2VwdGlvbl1cbiAgICAgICAgbGV0IGV4OiBFcnJvciB8IHN0cmluZ1xuICAgICAgICBmb3IgKGV4IG9mIGVycm9ycykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBleCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGV4ID0gbmV3IEVycm9yKGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgc2V0U3RhdGUoeyBlcnJvcjogZXgsIHdhaXQ6IGZhbHNlIH0pXG5cbiAgICAgICAgaWYgKG9wdGlvbnMucHJvcGFnYXRlKSB7XG4gICAgICAgICAgdGhyb3cgZXhcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZTogSUVycm9ySGFuZGxpbmdDb21wb25lbnRbJ3N0YXRlJ10pIHtcbiAgICAgICAgaWYgKHNlbGYudGFyZ2V0KSB7IHNlbGYudGFyZ2V0LnNldFN0YXRlKHN0YXRlKSB9XG4gICAgICAgIGlmIChzb3VyY2UgJiYgc291cmNlICE9PSBzZWxmLnRhcmdldCkge1xuICAgICAgICAgIHNvdXJjZS5zZXRTdGF0ZShzdGF0ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pIGFzIEZcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0b3AtbGV2ZWwgdGFyZ2V0IHRvIGEgbmV3IGVsZW1lbnQuXG4gICAqIFVzZWZ1bCBpbiBhIHJlZjpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqICAgcHVibGljIHJlbmRlcigpIHtcbiAgICogICAgIHJldHVybiA8ZGl2PlxuICAgKiAgICAgICA8TXlFcnJvckhhbmRsZXIgcmVmPXt0aGlzLmVycm9ySGFuZGxlci5zZXRUYXJnZXR9IC8+XG4gICAqICAgICAgIDxPdGhlckFzeW5jQ29tcG9uZW50IGVycm9ySGFuZGxlcj17dGhpcy5lcnJvckhhbmRsZXJ9IC8+XG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljIHNldFRhcmdldChlbGVtZW50OiBJRXJyb3JIYW5kbGluZ0NvbXBvbmVudCkge1xuICAgIHRoaXMudGFyZ2V0ID0gZWxlbWVudFxuICB9XG59XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBvYmplY3RLZXlzKFMpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoUykpIDogb2JqZWN0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbn0gOiBbXS5mb3JFYWNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuaW1wb3J0IHN0dWJGYWxzZSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCdWZmZXI7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50IC8qICwgLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyKGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQgPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCk7XG4gICAgfVxuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgYWN0dWFsRGVsZXRlQ291bnQpO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICBmcm9tID0gYWN0dWFsU3RhcnQgKyBrO1xuICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgfVxuICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgaWYgKGluc2VydENvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudDtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlIE9bayAtIDFdO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IDA7IGsgPCBpbnNlcnRDb3VudDsgaysrKSB7XG4gICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgIH1cbiAgICBPLmxlbmd0aCA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncHJlYWN0J1xuaW1wb3J0IHsgUHJvcFR5cGVzIH0gZnJvbSAncHJvcC10eXBlcydcblxuY2xhc3MgRGllIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudFZhbHVlOiBwcm9wcy5kZWZhdWx0Um9sbCB8fCA2LFxuICAgIH1cbiAgICB0aGlzLnJvbGxEaWUgPSB0aGlzLnJvbGxEaWUuYmluZCh0aGlzKVxuICB9XG5cbiAgZ2V0UmFuZG9tSW50KCkge1xuICAgIGxldCBtaW4gPSAxXG4gICAgbGV0IG1heCA9IE1hdGguY2VpbCh0aGlzLnByb3BzLnNpZGVzKVxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpICsgbWluXG4gIH1cblxuICByb2xsRGllKHZhbHVlKSB7XG4gICAgdGhpcy5kaWUuY2xhc3NOYW1lID0gYGRpZWBcbiAgICB2b2lkIHRoaXMuZGllLm9mZnNldFdpZHRoXG4gICAgbGV0IHJvbGwgPSB2YWx1ZSB8fCB0aGlzLmdldFJhbmRvbUludCgpXG4gICAgdGhpcy5kaWUuY2xhc3NMaXN0LmFkZChgcm9sbCR7cm9sbH1gKVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRWYWx1ZTogcm9sbCB9KVxuICAgICAgdGhpcy5wcm9wcy5yb2xsRG9uZShyb2xsKVxuICAgIH0sIHRoaXMucHJvcHMucm9sbFRpbWUgKiAxMDAwKVxuICB9XG5cbiAgb25DbGljayA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVJbmRpdmlkdWFsKSB7XG4gICAgICB0aGlzLnJvbGxEaWUoKVxuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xpY2soLi4uYXJncylcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyZW50VmFsdWVcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBmYWNlIHN0eWxlc1xuICAgIGxldCBmYWNlU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLnByb3BzLmZhY2VDb2xvcixcbiAgICAgIG91dGxpbmU6IHRoaXMucHJvcHMub3V0bGluZVxuICAgICAgICA/IGAxcHggc29saWQgJHt0aGlzLnByb3BzLm91dGxpbmVDb2xvcn1gXG4gICAgICAgIDogJ25vbmUnLFxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnByb3BzLmRpZVNpemV9cHhgLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogYCR7dGhpcy5wcm9wcy5kaWVTaXplfXB4YCxcbiAgICB9XG4gICAgbGV0IGYxU3R5bGUgPSB7XG4gICAgICB0cmFuc2Zvcm06IGByb3RhdGVYKDE4MGRlZykgdHJhbnNsYXRlWigke3RoaXMucHJvcHMuZGllU2l6ZSAvIDJ9cHgpYCxcbiAgICB9XG4gICAgbGV0IGYyU3R5bGUgPSB7XG4gICAgICB0cmFuc2Zvcm06IGByb3RhdGVZKC05MGRlZykgdHJhbnNsYXRlWigke3RoaXMucHJvcHMuZGllU2l6ZSAvIDJ9cHgpYCxcbiAgICB9XG4gICAgbGV0IGYzU3R5bGUgPSB7XG4gICAgICB0cmFuc2Zvcm06IGByb3RhdGVYKDkwZGVnKSB0cmFuc2xhdGVaKCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gMn1weClgLFxuICAgIH1cbiAgICBsZXQgZjRTdHlsZSA9IHtcbiAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZVgoLTkwZGVnKSB0cmFuc2xhdGVaKCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gMn1weClgLFxuICAgIH1cbiAgICBsZXQgZjVTdHlsZSA9IHtcbiAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZVkoOTBkZWcpIHRyYW5zbGF0ZVooJHt0aGlzLnByb3BzLmRpZVNpemUgLyAyfXB4KWAsXG4gICAgfVxuICAgIGxldCBmNlN0eWxlID0ge1xuICAgICAgdHJhbnNmb3JtOiBgcm90YXRlWSgwZGVnKSB0cmFuc2xhdGVaKCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gMn1weClgLFxuICAgIH1cbiAgICAvLyBkb3Qgc3R5bGVzXG4gICAgbGV0IGRvdFNpemUgPSB0aGlzLnByb3BzLmRpZVNpemUgLyA2IC0gMlxuICAgIGxldCBkb3RTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMucHJvcHMuZG90Q29sb3IsXG4gICAgICBoZWlnaHQ6IGAke2RvdFNpemV9cHhgLFxuICAgICAgd2lkdGg6IGAke2RvdFNpemV9cHhgLFxuICAgIH1cbiAgICBsZXQgZDFTdHlsZSA9IHtcbiAgICAgIHRvcDogYCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gNn1weGAsXG4gICAgICBsZWZ0OiBgJHt0aGlzLnByb3BzLmRpZVNpemUgLyA2fXB4YCxcbiAgICB9XG4gICAgbGV0IGQyU3R5bGUgPSB7XG4gICAgICB0b3A6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgICAgcmlnaHQ6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgIH1cbiAgICBsZXQgZDNTdHlsZSA9IHtcbiAgICAgIHRvcDogYCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gMiAtIGRvdFNpemUgLyAyfXB4YCxcbiAgICAgIGxlZnQ6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgIH1cbiAgICBsZXQgZDRTdHlsZSA9IHtcbiAgICAgIHRvcDogYCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gMiAtIGRvdFNpemUgLyAyfXB4YCxcbiAgICAgIGxlZnQ6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDIgLSBkb3RTaXplIC8gMn1weGAsXG4gICAgfVxuICAgIGxldCBkNVN0eWxlID0ge1xuICAgICAgdG9wOiBgJHt0aGlzLnByb3BzLmRpZVNpemUgLyAyIC0gZG90U2l6ZSAvIDJ9cHhgLFxuICAgICAgcmlnaHQ6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgIH1cbiAgICBsZXQgZDZTdHlsZSA9IHtcbiAgICAgIGJvdHRvbTogYCR7dGhpcy5wcm9wcy5kaWVTaXplIC8gNn1weGAsXG4gICAgICBsZWZ0OiBgJHt0aGlzLnByb3BzLmRpZVNpemUgLyA2fXB4YCxcbiAgICB9XG4gICAgbGV0IGQ3U3R5bGUgPSB7XG4gICAgICBib3R0b206IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgICAgcmlnaHQ6IGAke3RoaXMucHJvcHMuZGllU2l6ZSAvIDZ9cHhgLFxuICAgIH1cbiAgICAvLyByb2xsIHN0eWxlc1xuICAgIGxldCByb2xsU3R5bGUgPSB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5wcm9wcy5yb2xsVGltZX1zYCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5wcm9wcy5kaWVTaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnByb3BzLmRpZVNpemV9cHhgLFxuICAgIH1cbiAgICAvLyBjb250YWluZXIgc3R5bGVzXG4gICAgbGV0IGNvbnRhaW5lclN0eWxlID0ge1xuICAgICAgbWFyZ2luOiBgJHt0aGlzLnByb3BzLm1hcmdpbn1weGAsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPSdkaWUtY29udGFpbmVyJ1xuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgIHN0eWxlPXtjb250YWluZXJTdHlsZX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17YGRpZSByb2xsJHt0aGlzLmdldFZhbHVlKCl9YH1cbiAgICAgICAgICByZWY9eyhkaWUpID0+ICh0aGlzLmRpZSA9IGRpZSl9XG4gICAgICAgICAgc3R5bGU9e3JvbGxTdHlsZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nZmFjZSBzaXgnXG4gICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZmFjZVN0eWxlLCBmNlN0eWxlKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkMVN0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkMlN0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkM1N0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkNVN0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkNlN0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2RvdCdcbiAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGRvdFN0eWxlLCBkN1N0eWxlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPSdmYWNlIG9uZSdcbiAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBmYWNlU3R5bGUsIGYxU3R5bGUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ0U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9J2ZhY2UgZml2ZSdcbiAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBmYWNlU3R5bGUsIGY1U3R5bGUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQxU3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQyU3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ0U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ2U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ3U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9J2ZhY2UgdHdvJ1xuICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIGZhY2VTdHlsZSwgZjJTdHlsZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkb3QnXG4gICAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBkb3RTdHlsZSwgZDJTdHlsZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkb3QnXG4gICAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBkb3RTdHlsZSwgZDZTdHlsZSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nZmFjZSB0aHJlZSdcbiAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBmYWNlU3R5bGUsIGYzU3R5bGUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQyU3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ0U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ2U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9J2ZhY2UgZm91cidcbiAgICAgICAgICAgIHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBmYWNlU3R5bGUsIGY0U3R5bGUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQxU3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQyU3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ2U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZG90J1xuICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgZG90U3R5bGUsIGQ3U3R5bGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGllXG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrSGFzO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrU2V0O1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IHN0YWNrQ2xlYXIgZnJvbSAnLi9fc3RhY2tDbGVhci5qcyc7XG5pbXBvcnQgc3RhY2tEZWxldGUgZnJvbSAnLi9fc3RhY2tEZWxldGUuanMnO1xuaW1wb3J0IHN0YWNrR2V0IGZyb20gJy4vX3N0YWNrR2V0LmpzJztcbmltcG9ydCBzdGFja0hhcyBmcm9tICcuL19zdGFja0hhcy5qcyc7XG5pbXBvcnQgc3RhY2tTZXQgZnJvbSAnLi9fc3RhY2tTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YWNrO1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUhhcztcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5pbXBvcnQgc2V0Q2FjaGVBZGQgZnJvbSAnLi9fc2V0Q2FjaGVBZGQuanMnO1xuaW1wb3J0IHNldENhY2hlSGFzIGZyb20gJy4vX3NldENhY2hlSGFzLmpzJztcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5leHBvcnQgZGVmYXVsdCBTZXRDYWNoZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYWNoZUhhcztcbiIsImltcG9ydCBTZXRDYWNoZSBmcm9tICcuL19TZXRDYWNoZS5qcyc7XG5pbXBvcnQgYXJyYXlTb21lIGZyb20gJy4vX2FycmF5U29tZS5qcyc7XG5pbXBvcnQgY2FjaGVIYXMgZnJvbSAnLi9fY2FjaGVIYXMuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEFycmF5cztcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBVaW50OEFycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvQXJyYXk7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBlcXVhbEFycmF5cyBmcm9tICcuL19lcXVhbEFycmF5cy5qcyc7XG5pbXBvcnQgbWFwVG9BcnJheSBmcm9tICcuL19tYXBUb0FycmF5LmpzJztcbmltcG9ydCBzZXRUb0FycmF5IGZyb20gJy4vX3NldFRvQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEJ5VGFnO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVB1c2g7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRBbGxLZXlzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJBcnJheTtcbiIsImltcG9ydCBhcnJheUZpbHRlciBmcm9tICcuL19hcnJheUZpbHRlci5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRpbWVzO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRBbGxLZXlzO1xuIiwiaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbE9iamVjdHM7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRhVmlldztcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9taXNlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5leHBvcnQgZGVmYXVsdCBTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgV2Vha01hcDtcbiIsImltcG9ydCBEYXRhVmlldyBmcm9tICcuL19EYXRhVmlldy5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuL19Qcm9taXNlLmpzJztcbmltcG9ydCBTZXQgZnJvbSAnLi9fU2V0LmpzJztcbmltcG9ydCBXZWFrTWFwIGZyb20gJy4vX1dlYWtNYXAuanMnO1xuaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUYWc7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBlcXVhbEJ5VGFnIGZyb20gJy4vX2VxdWFsQnlUYWcuanMnO1xuaW1wb3J0IGVxdWFsT2JqZWN0cyBmcm9tICcuL19lcXVhbE9iamVjdHMuanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRXF1YWxEZWVwO1xuIiwiaW1wb3J0IGJhc2VJc0VxdWFsRGVlcCBmcm9tICcuL19iYXNlSXNFcXVhbERlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbDtcbiIsImltcG9ydCBiYXNlSXNFcXVhbCBmcm9tICcuL19iYXNlSXNFcXVhbC5qcyc7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0VxdWFsO1xuIiwiaW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoLWVzL2lzRXF1YWwnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNjb3JlIHtcbiAgdG90YWw6IG51bWJlcixcbiAgc2NvcmluZ0RpY2U6IG51bWJlcltdLFxuICBub25TY29yaW5nRGljZTogbnVtYmVyW11cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjb3JlUm9sbChkaWNlOiBudW1iZXJbXSk6IElTY29yZSB7XG4gIGNvbnN0IHJlbWFpbmluZ0RpY2UgPSBbLi4uZGljZV0uc29ydCgpXG4gIGNvbnN0IHNjb3JpbmdEaWNlOiBudW1iZXJbXSA9IFtdXG5cbiAgaWYgKGlzRXF1YWwoWzEsIDIsIDMsIDQsIDUsIDZdLCByZW1haW5pbmdEaWNlKSkge1xuICAgIHJldHVybiB7IHRvdGFsOiAxNTAwLCBzY29yaW5nRGljZTogcmVtYWluaW5nRGljZSwgbm9uU2NvcmluZ0RpY2U6IFtdIH1cbiAgfVxuXG4gIGxldCBzdWJ0b3RhbCA9IDBcblxuICAvLyBjaGVjayB0cmlwbGVzXG4gIHdoaWxlIChyZW1haW5pbmdEaWNlLmxlbmd0aCA+PSAzKSB7XG4gICAgZm9yIChjb25zdCBudW0gb2YgWzEsIDYsIDUsIDQsIDMsIDJdKSB7XG4gICAgICBpZiAocmVtYWluaW5nRGljZS5maWx0ZXIoKG4pID0+IG4gPT0gbnVtKS5sZW5ndGggPj0gMykge1xuICAgICAgICAvLyAzIG9mIG51bSBleGlzdCBpbiB0aGUgZGljZSBhcnJheVxuICAgICAgICBzdWJ0b3RhbCArPSBudW0gPT0gMSA/IDEwMDAgOiBudW0gKiAxMDBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAvLyByZW1vdmUgdGhlbVxuICAgICAgICAgIHNjb3JpbmdEaWNlLnB1c2gobnVtKVxuICAgICAgICAgIHJlbWFpbmluZ0RpY2Uuc3BsaWNlKHJlbWFpbmluZ0RpY2UuaW5kZXhPZihudW0pLCAxKVxuICAgICAgICB9XG4gICAgICAgIC8vIGdvIHRocm91Z2ggdGhlIGxvb3AgYWdhaW5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbm8gdHJpcGxlc1xuICAgIGJyZWFrXG4gIH1cblxuICAvLyBjaGVjayAxcyAmIDVzXG4gIFsuLi5yZW1haW5pbmdEaWNlXS5mb3JFYWNoKChuKSA9PiB7XG4gICAgaWYgKG4gPT0gMSB8fCBuID09IDUpIHtcbiAgICAgIHNjb3JpbmdEaWNlLnB1c2gobilcbiAgICAgIHJlbWFpbmluZ0RpY2Uuc3BsaWNlKHJlbWFpbmluZ0RpY2UuaW5kZXhPZihuKSwgMSlcbiAgICB9XG4gICAgaWYgKG4gPT0gMSkgeyBzdWJ0b3RhbCArPSAxMDAgfVxuICAgIGlmIChuID09IDUpIHsgc3VidG90YWwgKz0gNTAgfVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgdG90YWw6IHN1YnRvdGFsLFxuICAgIHNjb3JpbmdEaWNlLFxuICAgIG5vblNjb3JpbmdEaWNlOiByZW1haW5pbmdEaWNlLFxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IG5hdGl2ZVRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVVdGlsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkZhbHNlO1xuIiwiaW1wb3J0IHR5cGUge30gZnJvbSAnYm9vdHN0cmFwJ1xuaW1wb3J0IHtDb21wb25lbnQsIGNyZWF0ZVJlZiwgaCwgcmVuZGVyfSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgRGllIGZyb20gJy4uLy4uL3ZlbmRvci9yZWFjdC1kaWNlLWNvbXBsZXRlL3NyYy9EaWUnXG5cbmltcG9ydCAnLi4vLi4vdmVuZG9yL3JlYWN0LWRpY2UtY29tcGxldGUvc3JjL3N0eWxlcy5zY3NzJ1xuaW1wb3J0IHsgQXN5bmNFcnJvckhhbmRsZXIgfSBmcm9tICcuLi9saWIvYXN5bmMtZXJyb3ItaGFuZGxlcidcbmltcG9ydCB7IGluamVjdEJvb3RzdHJhcCB9IGZyb20gJy4uL2xpYi91dGlscydcbmltcG9ydCB7IElTY29yZSwgc2NvcmVSb2xsIH0gZnJvbSAnLi9zY29yaW5nJ1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbmludGVyZmFjZSBJRGllU3RhdGUge1xuICBpbmRleDogbnVtYmVyXG4gIHZhbHVlPzogbnVtYmVyLFxuICBrZXB0PzogYm9vbGVhblxuICBwZW5kaW5nS2VlcD86IGJvb2xlYW5cbn1cblxuaW50ZXJmYWNlIElBcHBTdGF0ZSB7XG4gIGVycm9yPzogYW55IHwgbnVsbFxuXG4gIGRpY2U6IElEaWVTdGF0ZVtdXG4gIGtlcHREaWNlOiBudW1iZXJbXVxuXG4gIHJvbGxpbmc/OiBib29sZWFuXG4gIHRoaXNSb2xsTWF4PzogSVNjb3JlXG4gIHRoaXNSb2xsU2NvcmU/OiBJU2NvcmVcbiAga2VwdFNjb3JlPzogbnVtYmVyXG4gIGRpZEZhcmtsZT86IGJvb2xlYW5cbiAgZGlkUm9sbFRocm91Z2g/OiBib29sZWFuXG5cbiAgdW5kb0tlZXA/OiB7XG4gICAgcHJldmlvdXNLZXB0U2NvcmU6IG51bWJlcixcbiAgICBuZXdLZXB0RGljZTogbnVtYmVyW11cbiAgICBwcmV2aW91c0tlcHREaWNlOiBudW1iZXJbXSxcbiAgfVxuXG4gIHR1cm5JbmRleDogbnVtYmVyXG4gIHByaW9yU2NvcmVzOiBzdHJpbmdbXVxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbn1cblxuY29uc3QgSW5pdGlhbERpY2UgPSAoKSA9PiB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFtcbiAgICB7aW5kZXg6IDB9LFxuICAgIHtpbmRleDogMX0sXG4gICAge2luZGV4OiAyfSxcbiAgICB7aW5kZXg6IDN9LFxuICAgIHtpbmRleDogNH0sXG4gICAge2luZGV4OiA1fSxcbiAgXSkpXG59XG5cbmV4cG9ydCBjbGFzcyBGYXJrbGUgZXh0ZW5kcyBDb21wb25lbnQ8SVByb3BzLCBJQXBwU3RhdGU+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBlcnJvckhhbmRsZXIgPSBuZXcgQXN5bmNFcnJvckhhbmRsZXIodGhpcylcbiAgcHJpdmF0ZSBkaWNlUmVmID0gY3JlYXRlUmVmKClcblxuICBwcml2YXRlIGRpY2UgPSBuZXcgQXJyYXkoNilcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0PzogYW55KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGljZTogSW5pdGlhbERpY2UoKSxcbiAgICAgIGtlcHREaWNlOiBbXSxcbiAgICAgIHByaW9yU2NvcmVzOiBbXSxcbiAgICAgIHR1cm5JbmRleDogMSxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVycm9yLCBkaWNlLCBrZXB0RGljZSwgcm9sbGluZywgZGlkRmFya2xlLCBkaWRSb2xsVGhyb3VnaCwgdW5kb0tlZXAsXG4gICAgICB0aGlzUm9sbFNjb3JlLCB0aGlzUm9sbE1heCxcbiAgICAgIGtlcHRTY29yZSwgdHVybkluZGV4LCBwcmlvclNjb3JlcyxcbiAgICB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgY29uc3QgZGllUHJvcHMgPSB7XG4gICAgICBkaWVTaXplOiAxMDUsXG4gICAgICBkaXNhYmxlSW5kaXZpZHVhbDogdHJ1ZSxcbiAgICAgIGRvdENvbG9yOiAnI0RCREFENicsXG4gICAgICBmYWNlQ29sb3I6ICcjRUY1RTI0JyxcbiAgICAgIG1hcmdpbjogMTIsXG4gICAgICBvdXRsaW5lOiBmYWxzZSxcbiAgICAgIG91dGxpbmVDb2xvcjogJyMzNzNENDInLFxuICAgICAgcm9sbFRpbWU6IDAsXG4gICAgICBzaWRlczogNixcbiAgICB9XG5cbiAgICBjb25zdCBkaWRSb2xsID0gIXJvbGxpbmcgJiYgdGhpc1JvbGxNYXggIT09IHVuZGVmaW5lZFxuXG4gICAgLy8gRGlzYWJsZSB0aGUga2VlcCBidXR0b24gaWYgdGhlIHNlbGVjdGVkIGRpY2UgdG8ga2VlcCB3b3VsZCBpbmNsdWRlIGFueSBub24tc2NvcmluZyBkaWNlXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBnZXQgYSAzIG9mIGEga2luZCBhbmQgb25seSBzZWxlY3QgMSBvciAyIG9mIHRoZW1cbiAgICBjb25zdCBhbnlQZW5kaW5nS2VlcCA9IGRpY2UuZmlsdGVyKChkKSA9PiAhZC5rZXB0KS5maW5kKChkKSA9PiBkLnBlbmRpbmdLZWVwKVxuICAgIGNvbnN0IGNhbktlZXAgPVxuICAgICAgYW55UGVuZGluZ0tlZXAgJiZcbiAgICAgIHNjb3JlUm9sbChkaWNlLmZpbHRlcigoZCkgPT4gZC5wZW5kaW5nS2VlcCkubWFwKChkKSA9PiBkLnZhbHVlKSkubm9uU2NvcmluZ0RpY2UubGVuZ3RoID09IDBcblxuICAgIHJldHVybiA8ZGl2IGlkPVwid3JhcHBlclwiPlxuICAgIDxkaXYgY2xhc3NOYW1lPXtgZmFya2xlIGNvbnRhaW5lciAke2Vycm9yID8gJ2Vycm9yJyA6ICcnfWB9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgZGljZS1yb3dcIj5cbiAgICAgICAge2Vycm9yICYmIDxkaXY+XG4gICAgICAgICAgICA8aDE+RXJyb3IhPC9oMT5cbiAgICAgICAgICAgIDxwcmU+XG4gICAgICAgICAgICAgIHtlcnJvci5tZXNzYWdlfVxuICAgICAgICAgICAgPC9wcmU+XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgICB7ZGlkRmFya2xlICYmXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaWRGYXJrbGVXcmFwcGVyXCI+XG4gICAgICAgICAgICA8aDE+RmFya2xlITwvaDE+XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgICB7ZGlkUm9sbFRocm91Z2ggJiZcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpZEZhcmtsZVdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxoMT5GcmVlIFJvbGwhPC9oMT5cbiAgICAgICAgICA8L2Rpdj59XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEwIGQtZmxleMKganVzdGlmeS1jb250ZW50LWNlbnRlciBkaWNlXCIgcmVmPXt0aGlzLmRpY2VSZWZ9PlxuICAgICAgICAgIHtkaWNlLm1hcCgoZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGQua2VwdCkge1xuICAgICAgICAgICAgICByZXR1cm4gPERpZSB7Li4uZGllUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGtleT17W3R1cm5JbmRleCwgZC5pbmRleF0uam9pbignLycpfVxuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lQ29sb3I9XCIjREJEQUQ2XCJcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9yPVwiI0ZGRkZGRlwiXG4gICAgICAgICAgICAgICAgICAgIGRvdENvbG9yPVwiI0RCREFENlwiXG4gICAgICAgICAgICAgICAgICAgIHJlZj17KGRpZTogYW55KSA9PiAodGhpcy5kaWNlW2QuaW5kZXhdID0gZGllKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8RGllIHsuLi5kaWVQcm9wc31cbiAgICAgICAgICAgICAgey4uLigoZC5wZW5kaW5nS2VlcCB8fCBkaWRGYXJrbGUpICYmIHtcbiAgICAgICAgICAgICAgICBmYWNlQ29sb3I6ICcjREJEQUQ2JyxcbiAgICAgICAgICAgICAgICBkb3RDb2xvcjogJyNGRkZGRkYnLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAga2V5PXtbdHVybkluZGV4LCBkLmluZGV4XS5qb2luKCcvJyl9XG4gICAgICAgICAgICAgIHJlZj17KGRpZTogYW55KSA9PiAodGhpcy5kaWNlW2QuaW5kZXhdID0gZGllKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy50b2dnbGVQZW5kaW5nS2VlcChkKX1cbiAgICAgICAgICAgICAgLy8gcm9sbGluZyA9PT0gdW5kZWZpbmVkIGlmIHdlIGhhdmVuJ3Qgcm9sbGVkIHlldFxuICAgICAgICAgICAgICByb2xsVGltZT17cm9sbGluZyA9PT0gdW5kZWZpbmVkID8gMCA6IHJhbmRvbUJldHdlZW4oMC44LCAyLjApfVxuICAgICAgICAgICAgICByb2xsRG9uZT17KCkgPT4ge3JldHVybn19PjwvRGllPlxuICAgICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMSBkLWZsZXjCoGp1c3RpZnktY29udGVudC1jZW50ZXIga2VwdC1kaWNlXCI+XG4gICAgICAgICAge2tlcHREaWNlLm1hcCgoaWR4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkID0gZGljZVtpZHhdXG4gICAgICAgICAgICByZXR1cm4gPERpZSB7Li4uZGllUHJvcHN9XG4gICAgICAgICAgICAgIGRpZVNpemU9ezMwfVxuICAgICAgICAgICAgICByb2xsVGltZT17MH1cbiAgICAgICAgICAgICAgbWFyZ2luPXs0fVxuICAgICAgICAgICAgICBrZXk9e1t0dXJuSW5kZXgsIGQuaW5kZXhdLmpvaW4oJy8nKX1cbiAgICAgICAgICAgICAgZGVmYXVsdFJvbGw9e2QudmFsdWV9XG4gICAgICAgICAgICAgID48L0RpZT5cbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyXCI+XG4gICAgICAgICAge2RpZFJvbGwgJiYgIWFueVBlbmRpbmdLZWVwICYmICFkaWRSb2xsVGhyb3VnaCAmJiAhZGlkRmFya2xlICYmXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaW50XCI+XG4gICAgICAgICAgICAgIFRhcCBhbnkgc2NvcmluZyBkaWNlIHlvdSB3aXNoIHRvIGtlZXAsIHRoZW4gY2xpY2sgXCJLZWVwIGRpY2VcIi48YnIvPlxuICAgICAgICAgICAgICBPciwgeW91IGNhbiBlbmQgeW91ciB0dXJuIGFuZCBwdXQgeW91ciBwb2ludHMgaW4gdGhlIGJhbmsuXG4gICAgICAgICAgICA8L3NwYW4+fVxuICAgICAgICAgIHtkaWRSb2xsICYmIGFueVBlbmRpbmdLZWVwICYmICFjYW5LZWVwICYmXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaW50XCI+WW91IG11c3Qga2VlcCBhbGwgZGljZSBpbiBhIHNldCBvZiAzPC9zcGFuPn1cbiAgICAgICAgICB7ZGlkUm9sbCAmJiBhbnlQZW5kaW5nS2VlcCAmJiBjYW5LZWVwICYmXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaW50XCI+XG4gICAgICAgICAgICAgIEtlZXAgdGhlIHNlbGVjdGVkIGRpY2UgYW5kIHJvbGwgYWdhaW4sIG9yIGVuZCB5b3VyIHR1cm4gYW5kIHB1dCB5b3VyIHBvaW50cyBpbiB0aGUgYmFuay5cbiAgICAgICAgICAgIDwvc3Bhbj59XG4gICAgICAgICAgeyFyb2xsaW5nICYmIHVuZG9LZWVwICYmXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaW50XCI+WW91IGNhbiBjaGFuZ2UgeW91ciBzZWxlY3Rpb24gYnkgZmlyc3QgdG91Y2hpbmcgXCJDaGFuZ2UgRGljZVwiPC9zcGFuPn1cblxuICAgICAgICAgIHtkaWRSb2xsICYmIGRpZEZhcmtsZSAmJlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaGludFwiPk5vbmUgb2YgeW91ciBkaWNlIHNjb3JlZCEgIFlvdSBsb3NlIHRoaXMgdHVybi48L3NwYW4+fVxuICAgICAgICAgIHtkaWRSb2xsICYmIGRpZFJvbGxUaHJvdWdoICYmXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoaW50XCI+QWxsIHlvdXIgZGljZSBzY29yZWQhICBZb3UgbXVzdCByb2xsIGF0IGxlYXN0IG9uZSBtb3JlIHRpbWUuPC9zcGFuPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgY29udHJvbHMtcm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNiBzY29yZXNcIj5cbiAgICAgICAgICB7dGhpc1JvbGxTY29yZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJiYWRnZSBiYWRnZS1zdWNjZXNzXCI+e3RoaXNSb2xsU2NvcmUudG90YWx9IHBvaW50czwvaDM+fVxuICAgICAgICAgIDxici8+XG4gICAgICAgICAgPGgzIGNsYXNzPVwiYmFkZ2UgYmFkZ2UtdGV4dFwiPlxuICAgICAgICAgICAgeyh0aGlzUm9sbE1heCAmJiB0aGlzUm9sbE1heC50b3RhbCB8fCAwKSArIChrZXB0U2NvcmUgfHwgMCl9IHRvdGFsJm5ic3A7XG4gICAgICAgICAgICB7dGhpc1JvbGxNYXggIT09IHVuZGVmaW5lZCAmJiAhZGlkUm9sbFRocm91Z2ggJiYgJ2lmIHlvdSBlbmQgbm93J31cbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAge3JvbGxpbmcgJiZcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBkaXNhYmxlZD5Sb2xsaW5nLi4uPC9idXR0b24+fVxuXG4gICAgICAgICAge2RpZFJvbGwgJiYgIWRpZEZhcmtsZSAmJiAhZGlkUm9sbFRocm91Z2ggJiZcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4taW5mb1wiIGRpc2FibGVkPXshY2FuS2VlcH0gb25DbGljaz17KCkgPT4gdGhpcy5rZWVwKCl9PktlZXAgRGljZTwvYnV0dG9uPn1cbiAgICAgICAgICBcbiAgICAgICAgICB7IXJvbGxpbmcgJiYgdW5kb0tlZXAgJiZcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1pbmZvXCIgb25DbGljaz17KCkgPT4gdGhpcy51bmRvS2VlcCgpfT5DaGFuZ2UgRGljZTwvYnV0dG9uPn1cblxuICAgICAgICAgIHtkaWRSb2xsICYmICFkaWRGYXJrbGUgJiYgIWRpZFJvbGxUaHJvdWdoICYmXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtaW5mb1wiIG9uQ2xpY2s9eygpID0+IHRoaXMubmV4dFR1cm4oKX0+RW5kIFR1cm48L2J1dHRvbj59XG5cbiAgICAgICAgICB7IXJvbGxpbmcgJiYgIWRpZFJvbGwgJiZcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCIgb25DbGljaz17KCkgPT4gdGhpcy5yb2xsKCl9PlJvbGwhPC9idXR0b24+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgeyFyb2xsaW5nICYmICFkaWRGYXJrbGUgJiYgZGlkUm9sbFRocm91Z2ggJiZcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IHRoaXMucm9sbFRocm91Z2goKX0+RnJlZSBSb2xsITwvYnV0dG9uPlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgeyFyb2xsaW5nICYmIGRpZEZhcmtsZSAmJlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4taW5mb1wiIG9uQ2xpY2s9eygpID0+IHRoaXMubmV4dFR1cm4oKX0+UGxheSBBZ2FpbjwvYnV0dG9uPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cbiAgICAgICAgPGhyLz5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgPHRkPlByZXZpb3VzIFR1cm5zPC90ZD5cbiAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICB7cHJpb3JTY29yZXMubWFwKChzY29yZSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gPHRyPlxuICAgICAgICAgICAgICAgIDx0ZD57c2NvcmV9PC90ZD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIH1cblxuICBwcml2YXRlIGtlZXAoKSB7XG4gICAgY29uc3Qge2RpY2UsIGtlcHREaWNlfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCBuZXdLZXB0RGljZTogbnVtYmVyW10gPSBbXVxuICAgIGRpY2UuZmlsdGVyKChkKSA9PiBkLnBlbmRpbmdLZWVwKS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICBkaWNlW2QuaW5kZXhdLnBlbmRpbmdLZWVwID0gZmFsc2VcbiAgICAgIGRpY2VbZC5pbmRleF0ua2VwdCA9IHRydWVcbiAgICAgIG5ld0tlcHREaWNlLnB1c2goZC5pbmRleClcbiAgICB9KVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGljZSxcbiAgICAgIGtlcHREaWNlOiBbLi4ua2VwdERpY2UsIC4uLm5ld0tlcHREaWNlXSxcbiAgICAgIGtlcHRTY29yZTogKHRoaXMuc3RhdGUua2VwdFNjb3JlIHx8IDApICsgdGhpcy5zdGF0ZS50aGlzUm9sbFNjb3JlLnRvdGFsLFxuICAgICAgdGhpc1JvbGxTY29yZTogdW5kZWZpbmVkLFxuICAgICAgdGhpc1JvbGxNYXg6IHVuZGVmaW5lZCxcbiAgICAgIHVuZG9LZWVwOiB7XG4gICAgICAgIHByZXZpb3VzS2VwdERpY2U6IGtlcHREaWNlLFxuICAgICAgICBuZXdLZXB0RGljZSxcbiAgICAgICAgcHJldmlvdXNLZXB0U2NvcmU6IHRoaXMuc3RhdGUua2VwdFNjb3JlIHx8IDAsXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIHVuZG9LZWVwKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS51bmRvS2VlcCkgeyByZXR1cm4gfVxuICAgIGNvbnN0IHtkaWNlfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCB7cHJldmlvdXNLZXB0RGljZSwgbmV3S2VwdERpY2UsIHByZXZpb3VzS2VwdFNjb3JlfSA9IHRoaXMuc3RhdGUudW5kb0tlZXBcbiAgICBuZXdLZXB0RGljZS5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgZGljZVtpbmRleF0ucGVuZGluZ0tlZXAgPSB0cnVlXG4gICAgICBkaWNlW2luZGV4XS5rZXB0ID0gZmFsc2VcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaWNlLFxuICAgICAga2VwdERpY2U6IHByZXZpb3VzS2VwdERpY2UsXG4gICAgICBrZXB0U2NvcmU6IHByZXZpb3VzS2VwdFNjb3JlLFxuICAgICAgdW5kb0tlZXA6IHVuZGVmaW5lZCxcbiAgICB9KVxuICAgIHRoaXMudXBkYXRlU2NvcmUoKVxuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVQZW5kaW5nS2VlcChkaWU6IElEaWVTdGF0ZSkge1xuICAgIGNvbnN0IHtkaWNlLCB0aGlzUm9sbE1heCwgZGlkUm9sbFRocm91Z2h9ID0gdGhpcy5zdGF0ZVxuXG4gICAgaWYgKCF0aGlzUm9sbE1heCB8fCBkaWRSb2xsVGhyb3VnaCkgeyByZXR1cm4gfVxuXG4gICAgaWYgKGRpY2VbZGllLmluZGV4XS5wZW5kaW5nS2VlcCkge1xuICAgICAgLy8gd2UgY2FuIGFsd2F5cyB1bnRvZ2dsZSBpdFxuICAgICAgZGljZVtkaWUuaW5kZXhdLnBlbmRpbmdLZWVwID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY2FuIHdlIGtlZXAgdGhpcyBkaWUgb3Igbm90PyAgSXQgbXVzdCBiZSBhIHNjb3JpbmcgZGllXG4gICAgICBjb25zdCBhdmFpbGFibGVTY29yaW5nRGljZSA9IFsuLi50aGlzUm9sbE1heC5zY29yaW5nRGljZV1cbiAgICAgIGZvciAoY29uc3QgZCBvZiBkaWNlKSB7XG4gICAgICAgIGlmIChkLnBlbmRpbmdLZWVwKSB7XG4gICAgICAgICAgLy8gd2UncmUgYWxyZWFkeSBrZWVwaW5nIHRoaXMgXCIxXCIgb3IgXCI1XCIgKG9yIG9uZSBvZiBvdXIgMyBcIjRcInMgZXRjKVxuICAgICAgICAgIGF2YWlsYWJsZVNjb3JpbmdEaWNlLnNwbGljZShhdmFpbGFibGVTY29yaW5nRGljZS5pbmRleE9mKGQudmFsdWUpLCAxKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXZhaWxhYmxlU2NvcmluZ0RpY2UuaW5kZXhPZihkaWUudmFsdWUpICE9IC0xKSB7XG4gICAgICAgIC8vIFllcywgdGhpcyBvbmUgaXMgbm90IG9uZSBvZiB0aGUgYXZhaWxhYmxlIHNjb3JpbmcgZGljZS5cbiAgICAgICAgZGljZVtkaWUuaW5kZXhdLnBlbmRpbmdLZWVwID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGljZSxcbiAgICB9KVxuICAgIHRoaXMudXBkYXRlU2NvcmUoKVxuICB9XG5cbiAgcHJpdmF0ZSByb2xsKCkge1xuICAgIGNvbnN0IHtkaWNlfSA9IHRoaXMuc3RhdGVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHJvbGxpbmc6IHRydWUsXG4gICAgICB0aGlzUm9sbFNjb3JlOiB1bmRlZmluZWQsXG4gICAgICB1bmRvS2VlcDogdW5kZWZpbmVkLFxuICAgIH0pXG5cbiAgICBkaWNlLmZpbHRlcigoZCkgPT4gIWQua2VwdCkuZm9yRWFjaCgoZGllLCBpKSA9PiB7XG4gICAgICBjb25zdCBkaWVSZWYgPSB0aGlzLmRpY2VbZGllLmluZGV4XVxuICAgICAgY29uc3Qgcm9sbCA9IGRpZVJlZi5nZXRSYW5kb21JbnQoKVxuICAgICAgZGllUmVmLnJvbGxEaWUocm9sbClcbiAgICAgIGRpZS52YWx1ZSA9IHJvbGxcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaWNlLFxuICAgIH0pXG4gICAgc2V0VGltZW91dCgoKSA9PlxuICAgICAgdGhpcy5yb2xsRG9uZSgpLFxuICAgICAgMjAwMClcbiAgfVxuXG4gIHByaXZhdGUgcm9sbFRocm91Z2goKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0dXJuSW5kZXg6IHRoaXMuc3RhdGUudHVybkluZGV4ICsgMSxcbiAgICAgIGtlcHRTY29yZTogKHRoaXMuc3RhdGUua2VwdFNjb3JlIHx8IDApICsgdGhpcy5zdGF0ZS50aGlzUm9sbFNjb3JlLnRvdGFsLFxuICAgICAgZGljZTogSW5pdGlhbERpY2UoKSxcbiAgICAgIGtlcHREaWNlOiBbXSxcbiAgICAgIGRpZEZhcmtsZTogdW5kZWZpbmVkLFxuICAgICAgZGlkUm9sbFRocm91Z2g6IHVuZGVmaW5lZCxcbiAgICAgIHRoaXNSb2xsU2NvcmU6IHVuZGVmaW5lZCxcbiAgICAgIHRoaXNSb2xsTWF4OiB1bmRlZmluZWQsXG4gICAgICByb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICB1bmRvS2VlcDogdW5kZWZpbmVkLFxuICAgIH0pXG4gICAgc2V0VGltZW91dCgoKSA9PlxuICAgICAgdGhpcy5yb2xsKCksXG4gICAgICA0MDApXG5cbiAgfVxuXG4gIHByaXZhdGUgcm9sbERvbmUoKSB7XG4gICAgLy8gYWxsIGRvbmUgcm9sbGluZ1xuICAgIHRoaXMuc2V0U3RhdGUoeyByb2xsaW5nOiBmYWxzZSB9KVxuICAgIHRoaXMudXBkYXRlU2NvcmUoKVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTY29yZSgpIHtcbiAgICBjb25zdCByZW1haW5pbmdEaWNlID0gdGhpcy5zdGF0ZS5kaWNlLmZpbHRlcigoZCkgPT4gIWQua2VwdClcbiAgICBjb25zdCB0aGlzUm9sbE1heCA9IHNjb3JlUm9sbChyZW1haW5pbmdEaWNlLm1hcCgoZCkgPT4gZC52YWx1ZSkpXG4gICAgY29uc3QgZGlkRmFya2xlID0gdGhpc1JvbGxNYXguc2NvcmluZ0RpY2UubGVuZ3RoID09IDBcbiAgICBpZiAoZGlkRmFya2xlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGlkRmFya2xlOiB0cnVlLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBwZW5kaW5nS2VlcERpY2UgPSByZW1haW5pbmdEaWNlLmZpbHRlcigoZCkgPT4gZC5wZW5kaW5nS2VlcClcblxuICAgIGNvbnN0IGRpY2VUb1Njb3JlID0gcGVuZGluZ0tlZXBEaWNlLmxlbmd0aCA+IDAgPyBwZW5kaW5nS2VlcERpY2UgOiByZW1haW5pbmdEaWNlXG4gICAgY29uc3QgdGhpc1JvbGxTY29yZSA9IHNjb3JlUm9sbChkaWNlVG9TY29yZS5tYXAoKGQpID0+IGQudmFsdWUpKVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdGhpc1JvbGxNYXgsXG4gICAgICB0aGlzUm9sbFNjb3JlLFxuICAgICAgZGlkUm9sbFRocm91Z2g6IHRoaXNSb2xsTWF4Lm5vblNjb3JpbmdEaWNlLmxlbmd0aCA9PSAwLFxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIG5leHRUdXJuKCkge1xuICAgIGNvbnN0IHtkaWRGYXJrbGUsIHRoaXNSb2xsTWF4LCBrZXB0U2NvcmUsIHR1cm5JbmRleH0gPSB0aGlzLnN0YXRlXG4gICAgbGV0IHByaW9yU2NvcmVzID0gdGhpcy5zdGF0ZS5wcmlvclNjb3Jlc1xuICAgIGNvbnN0IHRoaXNUdXJuU2NvcmUgPSAodGhpc1JvbGxNYXggJiYgdGhpc1JvbGxNYXgudG90YWwgfHwgMCkgKyAoa2VwdFNjb3JlIHx8IDApXG4gICAgaWYgKCFkaWRGYXJrbGUpIHtcbiAgICAgIHByaW9yU2NvcmVzID0gW3RoaXNUdXJuU2NvcmUudG9TdHJpbmcoKSwgLi4ucHJpb3JTY29yZXNdXG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW9yU2NvcmVzID0gW2BmYXJrbGUhICgke3RoaXNUdXJuU2NvcmV9IHBvaW50cyBsb3N0KWAsIC4uLnByaW9yU2NvcmVzXVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdHVybkluZGV4OiB0dXJuSW5kZXggKyAxLFxuICAgICAgZGljZTogSW5pdGlhbERpY2UoKSxcbiAgICAgIGtlcHREaWNlOiBbXSxcbiAgICAgIHByaW9yU2NvcmVzLFxuICAgICAgZGlkRmFya2xlOiB1bmRlZmluZWQsXG4gICAgICBkaWRSb2xsVGhyb3VnaDogdW5kZWZpbmVkLFxuICAgICAgdGhpc1JvbGxTY29yZTogdW5kZWZpbmVkLFxuICAgICAgdGhpc1JvbGxNYXg6IHVuZGVmaW5lZCxcbiAgICAgIGtlcHRTY29yZTogdW5kZWZpbmVkLFxuICAgICAgcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgdW5kb0tlZXA6IHVuZGVmaW5lZCxcbiAgICB9KVxuICB9XG59XG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgaW5qZWN0Qm9vdHN0cmFwKClcblxuICAvLyByZW5kZXIgd2l0aG91dCBVSSBleHRlbnNpb24gc2RrIGZvciBub3dcbiAgcmVuZGVyKDxGYXJrbGUgLz4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0LXJvb3QnKSEpXG59KVxuXG5mdW5jdGlvbiByYW5kb21CZXR3ZWVuKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==